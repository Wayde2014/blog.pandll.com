<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据库术语(DQL|DML|DDL|DCL)</title>
    <url>/article/4e12/</url>
    <content><![CDATA[<p>SQL语言分为四大类</p>
<h4><span id="数据定义语言ddldate-definition-language">数据定义语言DDL(Date Definition Language)</span></h4><blockquote>
<p>数据定义语言DDL用来创建数据库中的各种对象—–表、视图、索引、同义词、聚簇等如：<br>1) 创建：CREATE TABLE/VIEW/INDEX/SYN/CLUSTER<br>2) 删除：DROP<br>3) 修改：ALTER<br>DDL操作是隐性提交的！不能rollback</p>
</blockquote>
<h4><span id="数据操纵语言dmldate-manipulation-language">数据操纵语言DML(Date  Manipulation Language)</span></h4><blockquote>
<p>数据操纵语言DML主要有三种形式：<br>1) 插入：INSERT<br>2) 更新：UPDATE<br>3) 删除：DELETE</p>
</blockquote>
<h4><span id="数据查询语言dqldate-definition-language">数据查询语言DQL(Date Definition Language)</span></h4><blockquote>
<p>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE<br>子句组成的查询块：<br>SELECT &lt;字段名表&gt;<br>FROM &lt;表或视图名&gt;<br>WHERE &lt;查询条件&gt;</p>
</blockquote>
<h4><span id="数据控制语言dcldate-control-language">数据控制语言DCL(Date Control Language)</span></h4><blockquote>
<p>数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制<br>数据库操纵事务发生的时间及效果，对数据库实行监视等。如：<br>1)授权： GRANT<br>2)回滚： ROLLBACK:</p>
</blockquote>
<a id="more"></a>
<p>参考资料:</p>
<p><a href="http://www.cnblogs.com/study-s/p/5287529.html" target="_blank" rel="noopener">数据库操作语句类型（DQL、DML、DDL、DCL）简介</a></p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>理论知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab clone wiki pages</title>
    <url>/article/d559/</url>
    <content><![CDATA[<p><code>git clone repository-url:Wiki/Technology.wiki.git</code></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>wiki</tag>
      </tags>
  </entry>
  <entry>
    <title>Git ignore某个目录除某某文件</title>
    <url>/article/4bb6/</url>
    <content><![CDATA[<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For doc</span></span><br><span class="line">/docs/*</span><br><span class="line">!/docs/apidoc.json</span><br><span class="line">!/docs/generate.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git submodule说明</title>
    <url>/article/dcb4/</url>
    <content><![CDATA[<blockquote>
<p>以下示例: 父项目为<strong>box-server</strong>，子项目为<strong>box-deploy</strong></p>
</blockquote>
<h4><span id="添加submodule">添加submodule</span></h4><ol>
<li><code>cd box-server</code></li>
<li><code>git submodule add box-deploy-repository-url deploy</code></li>
<li><code>git ci -m &#39;add submodule deploy&#39;</code></li>
</ol>
<h4><span id="clone含有submodule的项目">clone含有submodule的项目</span></h4><ol>
<li>方法一(<strong>推荐</strong>)<ul>
<li><code>git clone --recursive box-server-repository-url</code></li>
</ul>
</li>
<li>方法二<ul>
<li><code>git clone box-server-repository-url</code></li>
<li><code>git submodule init</code> </li>
<li><code>git submodule update</code></li>
</ul>
</li>
<li>方法三<ul>
<li><code>git clone box-server-repository-url</code></li>
<li><code>git submodule update --init --recursive</code></li>
</ul>
</li>
</ol>
<a id="more"></a>
<h4><span id="检出子项目最新代码">检出子项目最新代码</span></h4><ol>
<li><p>方法一</p>
<p><code>git submodule update --remote</code>(默认检出master分支)</p>
<blockquote>
<p>设置子模块跟踪仓库其它分支</p>
<p>git config -f .gitmodules submodule.deploy.branch developer</p>
</blockquote>
</li>
<li><p>方法二</p>
<ul>
<li><code>cd deploy</code></li>
<li><code>git fetch</code></li>
<li><code>git merge origin/master</code></li>
</ul>
</li>
</ol>
<ol>
<li><p>方法三</p>
<ul>
<li><code>git submodule update --remote --merge</code>(检出并合并)</li>
</ul>
</li>
</ol>
<h4><span id="其它">其它</span></h4><ol>
<li><code>git pull --recurse-submodules</code></li>
<li><code>git submodule foreach git checkout master</code></li>
<li><code>git submodule foreach git pull</code></li>
<li><code>git submodule update --init --recursive</code></li>
</ol>
<h4><span id="删除submodule">删除submodule</span></h4><ol>
<li><code>$ git submodule deinit -f -- deploy</code></li>
<li><code>$ rm -rf .git/modules/deploy</code></li>
<li><code>$ git rm -f deploy</code> 或 <code>$ git rm --cached deploy</code></li>
<li><code>$ git commit -m &quot;remove deploy submodule&quot;</code></li>
</ol>
<h4><span id="修改submodule-url">修改submodule url</span></h4><p>修改<code>.gitmodules</code>文件对应submodule的url，然后执行<code>$ git submodule sync</code>。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>submodule</tag>
      </tags>
  </entry>
  <entry>
    <title>Git tag命令</title>
    <url>/article/58ad/</url>
    <content><![CDATA[<ol>
<li><p>创建 tag</p>
<p><code>git tag -a v1.0 -m &#39;1.0&#39;</code></p>
</li>
<li><p>查看 tag</p>
<p><code>git tag</code></p>
<p><code>git tag -l &#39;v1.*&#39;</code></p>
</li>
<li><p>推送 tag</p>
<p><code>git push origin v1.0</code></p>
<p><code>git push --tags</code></p>
<p><code>git push origin --tags</code></p>
</li>
</ol>
<p>参考资料:<br><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener">Git 基础 - 打标签</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 分支管理</title>
    <url>/article/c80e/</url>
    <content><![CDATA[<ol>
<li><p>查看不存在对应远程分支的本地分支</p>
<p><code>$ git remote show origin</code></p>
<p>or</p>
<p><code>$ git remote prune origin --dry-run</code></p>
</li>
<li><p>删除不存在对应远程分支的本地分支</p>
<p><code>$ git remote prune origin</code></p>
</li>
<li><p>删除远程分支</p>
<p><code>$ git push origin --delete &lt;branch_name&gt;</code></p>
<p>or</p>
<p><code>$ git push origin :&lt;branch_name&gt;</code></p>
</li>
<li><p>批量删除远程分支</p>
<p><code>$ git branch --sort=committerdate | grep -v &#39;master\|developer&#39; | xargs git push --delete origin</code></p>
<a id="more"></a>
</li>
<li><p>重命名本地分支</p>
<p><code>$ git branch -m old_name new_name</code></p>
</li>
<li><p>备份Git分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">cd realibox;</span><br><span class="line">for remote in `git br -r | grep -v 'HEAD\|developer'`</span><br><span class="line">do</span><br><span class="line">    git co -b $&#123;remote:7&#125; $&#123;remote&#125;</span><br><span class="line">    #echo 'git co -b $&#123;remote:7&#125; $&#123;remote&#125;'</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
</li>
<li><p>分支排序</p>
<p><code>$ git branch --sort=-committerdate</code></p>
<p><code>$ git branch --sort=committerdate</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for k in `git branch | sed s/^..//`; do</span><br><span class="line">    echo -e `git log -1 --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" "$k"`\\t"$k";</span><br><span class="line">done | sort -r</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令</title>
    <url>/article/c97/</url>
    <content><![CDATA[<h4><span id="本地新建项目并关联到远程仓库">本地新建项目并关联到远程仓库</span></h4><p><code>git init</code><br><code>git remote add origin repository-url</code><br><code>git push --set-upstream origin master</code></p>
<h4><span id="添加远程仓库地址">添加远程仓库地址</span></h4><p><code>git remote set-url origin new-repository-url</code></p>
<h4><span id="恢复单个文件版本">恢复单个文件版本</span></h4><p><code>git checkout &lt;hash&gt; &lt;filename&gt;</code></p>
<h4><span id="导出代码">导出代码</span></h4><p><code>git archive -o ../updated.zip HEAD $(git diff --name-only HEAD^)</code></p>
<h4><span id="移除版本控制">移除版本控制</span></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm -r -n --cached docs/api	# -n 预览命令，并不真正删除</span><br><span class="line">git rm -r --cached docs/api</span><br></pre></td></tr></table></figure>
<h4><span id="将某个commit移动到其它branch">将某个commit移动到其它branch</span></h4><p><code>git cherry-pick &lt;commit id&gt;</code></p>
<a id="more"></a>
<h4><span id="比较差异">比较差异</span></h4><ol>
<li><p>比较工作区与暂存区</p>
<p><code>git diff [path]</code></p>
</li>
<li><p>比较暂存区与最新本地版本库</p>
<p><code>git diff --cached [path]</code></p>
<p><code>git diff --staged [path]</code></p>
</li>
<li><p>比较commit</p>
<p><code>git diff [commit-id] [path]</code></p>
<p><code>git diff [commit-id] [commit-id]</code></p>
</li>
<li><p>比较branch</p>
<p><code>git diff [branch] [path]</code></p>
<p><code>git diff [branch] [branch]</code></p>
</li>
</ol>
<h4><span id="中文文件名及路径乱码">中文文件名及路径乱码</span></h4><p><code>git config --global core.quotepath false</code></p>
<h4><span id="查看修改记录">查看修改记录</span></h4><p><code>git log [options] [path]</code></p>
<blockquote>
<p>-p            显示具体差异</p>
<p>–follow        查看文件改名之前的修改记录</p>
<p>–merges    仅查看merge记录</p>
<p>–author=xx    查看指定author的修改记录</p>
</blockquote>
<h4><span id="同步-github-fork-出来的分支">同步 Github fork 出来的分支</span></h4><p><code>git remote add upstream fork-source-repo-url</code><br><code>git fetch upstream</code><br><code>git merge upstream/master</code><br><code>git push</code></p>
<h4><span id="查看储藏区stash的差异">查看储藏区(stash)的差异</span></h4><p><code>git stash show -p stash@\{0\} --exit-code</code></p>
<p>####设置显示名称及邮箱</p>
<p><code>git config --local user.name &quot;Wayde&quot;</code></p>
<p><code>git config --local user.email &quot;email_address&quot;</code></p>
<h4><span id="修改commit的author信息">修改commit的author信息</span></h4><p><code>git commit --amend --reset-author</code></p>
<p>参考资料:<br><a href="https://git-scm.com/docs/git-archive" target="_blank" rel="noopener">git-archive - Create an archive of files from a named tree</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 项目分离</title>
    <url>/article/bb22/</url>
    <content><![CDATA[<p>应用场景: </p>
<blockquote>
<p>box项目目录结构如下:</p>
<p>​    –server<br>​    –frontend<br>​    –configs<br>​    –docs<br>​    –jobs<br>​    –fabtask<br>​    –migrations<br>​    –config.py<br>​    –fabfile.py<br>​    –handler.py<br>​    –manage.py<br>​    –README.md<br>​    –requirements.txt</p>
<ol>
<li>删除frontend文件夹，创建新的项目box-server</li>
<li>抽出frontend文件夹，创建新的项目box-web</li>
<li>抽出configs/ fabtask/ docs/ fabfile.py config.py，创建新的项目box-deploy</li>
</ol>
</blockquote>
<a id="more"></a>
<h4><span id="分离box-server项目">分离box-server项目</span></h4><ol>
<li>创建新项目box-server</li>
<li><code>git clone box-repository-url box-server</code></li>
<li><code>cd box-server</code></li>
<li><code>git filter-branch --tree-filter &#39;rm -rf frontend&#39; --prune-empty -- --all</code></li>
<li><code>git remote set-url origin box-server-repository-url</code></li>
<li><code>git push --all origin</code></li>
</ol>
<h4><span id="分离box-web项目">分离box-web项目</span></h4><ol>
<li>创建新项目box-web</li>
<li><code>git clone box-repository-url box-web</code></li>
<li><code>cd box-web</code></li>
<li><code>git filter-branch --prune-empty --subdirectory-filter frontend/ -- --all</code></li>
<li><code>git remote set-url origin box-web-respository-url</code></li>
<li><code>git push --all origin</code></li>
</ol>
<h4><span id="分离box-deploy项目">分离box-deploy项目</span></h4><ol>
<li>创建新项目box-deploy</li>
<li><code>git clone box-repository-url box-deploy</code></li>
<li><code>cd box-deploy</code></li>
<li><code>git filter-branch --index-filter &#39;git rm --cached -qr --ignore-unmatch -- . &amp;&amp; git reset -q $GIT_COMMIT -- configs/ fabtask/ docs/ fabfile.py config.py&#39; --prune-empty -- --all</code></li>
<li><code>git remote set-url origin box-deploy-repository-url</code></li>
<li><code>git push</code></li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 文件归档</title>
    <url>/article/36e6/</url>
    <content><![CDATA[<ol>
<li><p>查看支持的归档格式</p>
<p><code>git archive --list</code></p>
</li>
<li><p>导出最新的版本库</p>
<p><code>git archive -o ../latest.zip HEAD</code></p>
</li>
<li><p>导出指定提交记录</p>
<p><code>git archive -o ../git-1.4.0.tar 8996b47</code></p>
</li>
<li><p>导出一个目录</p>
<p><code>git archive -o ../git-1.4.0-docs.zip  HEAD:Documentation/</code></p>
</li>
<li><p>导出为tar.gz格式</p>
<p><code>git archive 8996b47 | gzip &gt; ../git-1.4.0.tar.gz</code></p>
</li>
<li><p>导出最后一次提交修改过的文件</p>
<p><code>git archive -o ../updated.zip HEAD $(git diff --name-only HEAD^)</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>archive</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM 配置文件详解</title>
    <url>/article/2f40/</url>
    <content><![CDATA[<ol>
<li><p>cpu设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vcpu</span> <span class="attr">placement</span>=<span class="string">'static'</span>&gt;</span>8<span class="tag">&lt;/<span class="name">vcpu</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>内存设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">memory</span> <span class="attr">unit</span>=<span class="string">'KiB'</span>&gt;</span>4094304<span class="tag">&lt;/<span class="name">memory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">currentMemory</span> <span class="attr">unit</span>=<span class="string">'KiB'</span>&gt;</span>4094304<span class="tag">&lt;/<span class="name">currentMemory</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>参考资料:<br><a href="http://www.cnblogs.com/sammyliu/p/4543597.html" target="_blank" rel="noopener">KVM 介绍（2）：CPU 和内存虚拟化</a><br><a href="http://www.cnblogs.com/chenjiahe/p/5950136.html" target="_blank" rel="noopener">KVM之十一：调整cpu和内存</a><br><a href="https://blog.csdn.net/u011956172/article/details/51163750" target="_blank" rel="noopener">绑定KVM虚拟机的vcpu与物理CPU</a><br><a href="http://blog.51cto.com/wolfer/1872441" target="_blank" rel="noopener">kvm-virsh使用</a></p>
]]></content>
      <categories>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM常用操作</title>
    <url>/article/9982/</url>
    <content><![CDATA[<ol>
<li><p>查看虚拟机列表</p>
<p><code>$ virsh list --all</code></p>
</li>
<li><p>编辑虚拟机配置文件</p>
<p><code>$ virsh edit vm1</code></p>
<p>可以通过mac地址联合<code>arp -a</code>查找虚拟机ip</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">'bridge'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mac</span> <span class="attr">address</span>=<span class="string">'52:54:00:60:e9:32'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">bridge</span>=<span class="string">'br0'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">model</span> <span class="attr">type</span>=<span class="string">'rtl8139'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">'pci'</span> <span class="attr">domain</span>=<span class="string">'0x0000'</span> <span class="attr">bus</span>=<span class="string">'0x00'</span> <span class="attr">slot</span>=<span class="string">'0x02'</span> <span class="attr">function</span>=<span class="string">'0x0'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动虚拟机</p>
<p><code>$ virsh start vm1</code></p>
</li>
<li><p>查看虚拟机信息</p>
<p><code>$ virsh dominfo vm1</code></p>
</li>
<li><p>查看虚拟机cpu信息</p>
<p><code>$ virsh vcpuinfo vm1</code></p>
</li>
<li><p>关闭虚拟机</p>
<p><code>$ virsh shutdown vm1</code></p>
<blockquote>
<p>KVM虚拟机默认是无法用virsh shutdown|reboot的,如果要想使用该命令，则必须在kvm虚拟机上安装acpid acpid-sysvinit两个包，启动acpid服务，并且设置随机启动</p>
</blockquote>
<p><code>$ virsh destroy vm1</code> </p>
<blockquote>
<p>强制关机</p>
</blockquote>
</li>
<li><p>重启虚拟机</p>
<p><code>$ virsh reboot vm1</code></p>
</li>
<li><p>删除虚拟机</p>
<p><code>$ virsh undefine vm1</code></p>
</li>
<li><p>挂起/恢复虚拟机</p>
<p><code>$ virsh suspend vm1</code></p>
<p><code>$ virsh resume vm1</code></p>
</li>
<li><p>设置虚拟机自动启动</p>
<p><code>$ virsh autostart vm1</code></p>
</li>
<li><p>关闭虚拟机自动启动</p>
<p><code>$ virsh autostart --disable vm1</code></p>
</li>
<li><p>登陆虚拟机控制台</p>
<p><code>$ virsh console vm1</code> </p>
<blockquote>
<p>只对指定了console的虚机才管用</p>
</blockquote>
<p>退出: <code>ctrl + ]</code></p>
</li>
<li><p>将iso镜像挂载到cdrom光驱(即时生效)</p>
<p><code>$ virsh attach-disk vm1 iso_file_path hdc --type cdrom --mode readonly</code></p>
</li>
<li><p>增加新的网卡</p>
<p><code>$ virsh attach-interface vm1 --type bridge --source br1 --model virtio</code></p>
</li>
<li><p>查看支持的cpu类型</p>
<p><code>$ kvm -cpu \?</code></p>
</li>
<li><p>虚拟机批量管理脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/sh</span><br><span class="line"><span class="meta">#</span> /etc/init.d/recall</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Some things that run always</span><br><span class="line">touch /var/lock/recall</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Carry out specific functions when asked to by the system</span><br><span class="line">case "$1" in</span><br><span class="line">  start)</span><br><span class="line">    shift</span><br><span class="line"></span><br><span class="line">    waits=0</span><br><span class="line">    # /var/run/libvirt/libvirt-sock</span><br><span class="line">    sockf=/var/run/libvirt/libvirt-sock</span><br><span class="line">    while ! test -e $sockf; do</span><br><span class="line">      waits=$((waits+1))</span><br><span class="line">      echo "Waiting for $sockf" $waits $@</span><br><span class="line">      [ $waits -ge 60 ] &amp;&amp; break</span><br><span class="line">      sleep 1</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    # set default list</span><br><span class="line">    [ $# -eq 0 ] &amp;&amp; set -- vm1 vm2 vm3</span><br><span class="line">    echo "List:" $# [$@]</span><br><span class="line"></span><br><span class="line">    while [ $# -ge 1 ]; do</span><br><span class="line">      ( ! virsh list | grep "$1" &gt; /dev/null ) &amp;&amp; echo 'Starting' $# [$1] &amp;&amp; virsh start $1 &amp;&amp; sleep 1</span><br><span class="line">      shift</span><br><span class="line">    done</span><br><span class="line">    virsh list --all</span><br><span class="line">    echo "Started.\n"</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  stop)</span><br><span class="line">    shift</span><br><span class="line">    while [ $# -ge 1 ]; do</span><br><span class="line">      ( virsh list | grep "$1" &gt; /dev/null ) &amp;&amp; echo 'Stopping' $# [$1] &amp;&amp; virsh destroy $1 &amp;&amp; sleep 1</span><br><span class="line">      shift</span><br><span class="line">    done</span><br><span class="line">    virsh list --all</span><br><span class="line">    echo "Stopped.\n"</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  *)</span><br><span class="line">    echo "Usage: $0 &#123;start|stop&#125;"</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<p>参考资料:<br><a href="http://www.cnblogs.com/liwei0526vip/p/6201582.html" target="_blank" rel="noopener">kvm 使用入门详解</a><br><a href="http://www.cnblogs.com/chenjiahe/p/5919426.html" target="_blank" rel="noopener">KVM之五：KVM日常管理常用命令</a><br><a href="http://www.cnblogs.com/hukey/p/6436211.html" target="_blank" rel="noopener">kvm 四种简单的网络模型</a><br><a href="https://www.jianshu.com/p/110b60c14a8b" target="_blank" rel="noopener">KVM-网络配置</a></p>
]]></content>
      <categories>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM虚拟机安装Ubuntu 16.04</title>
    <url>/article/d9ba/</url>
    <content><![CDATA[<ol>
<li><p>创建10G系统盘(固态硬盘)</p>
<p><code>lvcreate -L 10G -n lv0-ubuntu16.04 vg0</code></p>
</li>
<li><p>创建50G挂载盘(机械硬盘)</p>
<p><code>lvcreate -L 50G -n lv9-ubuntu16.04 vg9</code></p>
</li>
<li><p>创建虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">virt-install \</span><br><span class="line">--virt-type kvm \</span><br><span class="line">--name ubuntu16.04 \</span><br><span class="line">--ram 8192 \</span><br><span class="line">--cdrom=/uni/iso/ubuntu-16.04.3-server-amd64.iso \</span><br><span class="line">--cpu core2duo \</span><br><span class="line">--network bridge=br0,model='e1000' \</span><br><span class="line">--graphics vnc,listen=0.0.0.0 \</span><br><span class="line">--disk path=/dev/mapper/vg0-lv0--ubuntu16.04,bus='ide' \</span><br><span class="line">--disk path=/dev/mapper/vg9-lv9--ubuntu16.04,bus='ide' \</span><br><span class="line">--noautoconsole \</span><br><span class="line">--os-type=linux \</span><br><span class="line">--os-variant=ubuntu16.04</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过vpc连接继续安装</p>
</li>
<li><p>安装完成后设置开机启动</p>
<p><code>virsh autostart ubuntu16.04</code></p>
<p>常用命令请查看<a href="/article/9982/">KVM常用操作</a></p>
</li>
<li><p>磁盘扩容</p>
<ul>
<li><p>登陆宿主机，扩容逻辑卷</p>
<p><code>$ lvextend -L +10G /dev/vg0/lv0v31</code></p>
</li>
<li><p>重启虚拟机</p>
</li>
<li><p>登陆虚拟机，扩展分区</p>
<p><code>$ sudo apt-get install gparted</code></p>
<p><code>$ sudo gparted</code> 修改配置</p>
<blockquote>
<p>如果遇到 (gpartedbin:2088): Gtk-WARNING **: cannot open display: localhost:10.0，尝试执行<code>export DISPLAY=:0.0</code>，再ssh连上重试。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p>参考资料:<br><a href="https://blog.csdn.net/u011956172/article/details/51153402" target="_blank" rel="noopener">使用virt-install手动创建qcow2镜像并安装ISO</a><br><a href="https://blog.csdn.net/zhengchaooo/article/details/79500209" target="_blank" rel="noopener">Ubuntu 16.04 Server 版安装过程图文详解</a><br><a href="http://www.361way.com/virt-install/2721.html" target="_blank" rel="noopener">kvm虚拟化之virt-install</a></p>
]]></content>
      <categories>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>KVM</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM虚拟机安装windows 10</title>
    <url>/article/2beb/</url>
    <content><![CDATA[<ol>
<li><p><code>qemu-img create -f raw /opt/kvm.raw 10G</code></p>
</li>
<li><p><code>qemu-img info /opt/kvm.raw</code></p>
</li>
<li><p>创建虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">virt-install \</span><br><span class="line">--virt-type kvm \</span><br><span class="line">--name windows10 \</span><br><span class="line">--ram 8192 \</span><br><span class="line">--cdrom=/uni/windows10/cn_windows_10_enterprise_version__dvd_9057083.iso \</span><br><span class="line">--boot cdrom \</span><br><span class="line">--cpu core2duo \</span><br><span class="line">--network bridge=br0,model='e1000' \</span><br><span class="line">--graphics vnc,listen=0.0.0.0 \</span><br><span class="line">--disk path=/opt/kvm.raw,bus='ide' \</span><br><span class="line">--noautoconsole \</span><br><span class="line">--os-type=windows</span><br></pre></td></tr></table></figure>
</li>
<li><p>ubuntu16.04 利用Remmina 远程桌面客户端连接10.17.1.10继续安装</p>
</li>
<li><p>安装完成后设置开机启动</p>
<p><code>virsh autostart windows10</code></p>
<p>常用命令请查看<a href="/article/9982/">KVM常用操作</a></p>
</li>
</ol>
<p>参考资料:<br><a href="http://www.cnblogs.com/yang-ning/p/7111649.html" target="_blank" rel="noopener">CentOS7.2上用KVM安装虚拟机windows10踩过的坑</a></p>
]]></content>
      <categories>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>KVM</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM虚拟机安装Windows XP</title>
    <url>/article/39c4/</url>
    <content><![CDATA[<ol>
<li><p>创建10G系统盘(固态硬盘)</p>
<p><code>lvcreate -L 20G -n lv0-windows-xp vg0</code></p>
</li>
<li><p>创建50G挂载盘(机械硬盘)</p>
<p><code>lvcreate -L 50G -n lv9-windows-xp vg9</code></p>
</li>
<li><p>创建虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">virt-install \</span><br><span class="line">--virt-type kvm \</span><br><span class="line">--name winxp \</span><br><span class="line">--ram 4096 \</span><br><span class="line">--cdrom=/uni/iso/win-xp64-sp3.iso \</span><br><span class="line">--cpu core2duo \</span><br><span class="line">--network bridge=br0,model=virtio \</span><br><span class="line">--graphics vnc,listen=0.0.0.0 \</span><br><span class="line">--disk path=/dev/mapper/vg0-lv0--winxp,bus='ide' \</span><br><span class="line">--disk path=/dev/mapper/vg9-lv9--winxp,bus='ide' \</span><br><span class="line">--noautoconsole \</span><br><span class="line">--os-type=windows \</span><br><span class="line">--os-variant=winxp</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过vpc连接继续安装</p>
</li>
<li><p>安装完成后设置开机启动</p>
<p><code>virsh autostart windows-xp</code></p>
<p>常用命令请查看<a href="/article/9982/">KVM常用操作</a></p>
</li>
</ol>
<p>参考资料:<br><a href="https://www.ovirt.org/documentation/how-to/virtual-machines/create-a-windows-xp-virtual-machine/" target="_blank" rel="noopener">How to Create a Windows XP Virtual Machine</a><br><a href="https://www.ovirt.org/documentation/internal/guest-agent/understanding-guest-agents-and-other-tools/#VirtIO_Drivers" target="_blank" rel="noopener">Understanding Guest Agents and Other Tools</a><br><a href="https://docs.fedoraproject.org/quick-docs/en-US/creating-windows-virtual-machines-using-virtio-drivers.html" target="_blank" rel="noopener">Creating Windows virtual machines using virtIO drivers</a><br><a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.149-2/" target="_blank" rel="noopener">virtio驱动下载</a><br><a href="http://thomasmullaly.com/2014/11/16/the-list-of-os-variants-in-kvm/" target="_blank" rel="noopener">The List of Os Variants in KVM</a></p>
]]></content>
      <categories>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>KVM</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟服务器</title>
    <url>/article/8bf8/</url>
    <content><![CDATA[<h2><span id="虚拟专用服务器virtual-private-server">虚拟专用服务器(Virtual private server)</span></h2><p>维基百科如此介绍:</p>
<blockquote>
<p>虚拟专用服务器(Virtual Private Server，缩写为VPS)，是将一台服务器分区成多个虚拟专享服务器的服务。</p>
<p>实现VPS的技术分为容器技术和虚拟机技术 ，在容器或虚拟机中，每个VPS都可分配独立公网IP地址、独立操作系统、实现不同VPS间磁盘空间、内存、CPU资源、进程和系统配置的隔离，为用户和应用程序模拟出“独占”使用计算资源的体验。</p>
<p>VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。VPS为用户提供了管理配置的自由，可用于企业虚拟化，也可以用于IDC资源租用。 IDC资源租用，由VPS提供商提供。不同VPS提供商所使用的硬件VPS软件的差异，及销售策略的不同，VPS的使用体验也有较大差异。尤其是VPS提供商超卖，导致实体服务器超负荷时，VPS性能将受到极大影响。相对来说，容器技术比虚拟机技术硬件使用效率更高，更易于超卖，所以一般来说容器VPS的价格都高于虚拟机VPS的价格。 这些VPS主机以最大化的效率共享硬件、软件许可证以及管理资源。每个VPS主机都可分配独立公网IP地址、独立操作系统、独立超大空间、独立内存、独立CPU资源、独立执行程序和独立系统配置等。VPS主机用户可在服务器上自行安装程序，单独重启主机。</p>
</blockquote>
<h2><span id="虚拟机网络连接">虚拟机网络连接</span></h2><p>虚拟机网络连接常见的有3种方式：</p>
<ol>
<li><p><strong>NAT 网络</strong></p>
<p>即内部地址转换，相当于从物理网卡外接了一个虚拟的路由，然后所有虚拟机都连接到该“路由器”上，虚拟机可以借助这个路由器访问到外面的网络，但外面的网络却无法访问，因为虚拟机的地址只是路由器上唯一的，出了路由器就不再唯一了。</p>
</li>
<li><p><strong>桥接网络</strong></p>
<p>也叫物理设备共享，相当于虚拟了一个和服务网卡一样的网卡，这个虚拟网卡和物理网卡是平行的关系，并且虚拟机共用物理网卡额资源。这样，虚拟机能够接入外部网络，不受物理机的限制了。</p>
</li>
<li><p><strong>Host-Only 网络</strong></p>
<p>与 NAT 类似，但是比 NAT 更封闭，只有物理机能够访问该虚拟机，其他虚拟机也不能访问。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>理论知识</tag>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>LVM-逻辑卷管理</title>
    <url>/article/bad/</url>
    <content><![CDATA[<ul>
<li><p>查看当前系统已存在物理卷</p>
<p><code>pvdisplay</code></p>
</li>
<li><p>查看当前系统已存在卷组</p>
<p><code>vgdisplay</code></p>
</li>
<li><p>查看当前系统存在的逻辑卷</p>
<p><code>lvdisplay</code></p>
</li>
<li><p>查看系统块设备</p>
<p><code>lsblk -l</code></p>
</li>
<li><p>删除逻辑卷</p>
<p><code>lvremove /dev/vg9/lv9c2016</code></p>
</li>
<li><p>创建逻辑卷</p>
<p><code>lvcreate -L 30G -n lv0-windows10 vg0</code></p>
</li>
<li><p>逻辑卷扩容</p>
<p><code>lvextend -L +20G /dev/vg0/lv0-windows10</code></p>
</li>
<li><p>指定逻辑卷安装windows10</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">virt-install \</span><br><span class="line">--virt-type kvm \</span><br><span class="line">--name windows10 \</span><br><span class="line">--ram 8192 \</span><br><span class="line">--cdrom=/uni/windows10/cn_windows_10_enterprise_version_1607_x64_dvd_9057083.iso \</span><br><span class="line">--boot cdrom \</span><br><span class="line">--cpu core2duo \</span><br><span class="line">--network bridge=br0,model='e1000' \</span><br><span class="line">--graphics vnc,listen=0.0.0.0 \</span><br><span class="line">--disk path=/dev/mapper/vg0-lv0--windows10,bus='ide' \</span><br><span class="line">--noautoconsole \</span><br><span class="line">--os-type=windows</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>windows10 扩容磁盘</p>
<p><code>lvcreate -L 50G -n lv9-windows10 vg9</code></p>
<p><code>virsh edit windows10</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">'block'</span> <span class="attr">device</span>=<span class="string">'disk'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">'qemu'</span> <span class="attr">type</span>=<span class="string">'raw'</span> <span class="attr">cache</span>=<span class="string">'none'</span> <span class="attr">io</span>=<span class="string">'native'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">dev</span>=<span class="string">'/dev/mapper/vg0-lv0--windows10'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">'hda'</span> <span class="attr">bus</span>=<span class="string">'ide'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">'drive'</span> <span class="attr">controller</span>=<span class="string">'0'</span> <span class="attr">bus</span>=<span class="string">'0'</span> <span class="attr">target</span>=<span class="string">'0'</span> <span class="attr">unit</span>=<span class="string">'0'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">'file'</span> <span class="attr">device</span>=<span class="string">'cdrom'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">'qemu'</span> <span class="attr">type</span>=<span class="string">'raw'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">file</span>=<span class="string">'/uni/windows10/cn_windows_10_enterprise_version_1607_updated_jul_2016_x64_dvd_9057083.iso'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">'hdb'</span> <span class="attr">bus</span>=<span class="string">'ide'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">readonly</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">'drive'</span> <span class="attr">controller</span>=<span class="string">'0'</span> <span class="attr">bus</span>=<span class="string">'0'</span> <span class="attr">target</span>=<span class="string">'0'</span> <span class="attr">unit</span>=<span class="string">'1'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 以下为新加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">'block'</span> <span class="attr">device</span>=<span class="string">'disk'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">'qemu'</span> <span class="attr">type</span>=<span class="string">'raw'</span> <span class="attr">cache</span>=<span class="string">'none'</span> <span class="attr">io</span>=<span class="string">'native'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">dev</span>=<span class="string">'/dev/mapper/vg9-lv9--windows10'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">'hdc'</span> <span class="attr">bus</span>=<span class="string">'ide'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">'drive'</span> <span class="attr">controller</span>=<span class="string">'0'</span> <span class="attr">bus</span>=<span class="string">'1'</span> <span class="attr">target</span>=<span class="string">'0'</span> <span class="attr">unit</span>=<span class="string">'0'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>参考资料:<br><a href="https://hubinwei.me/2017/12/28/fdisk-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9/" target="_blank" rel="noopener">fdisk-磁盘分区与分区扩容</a><br><a href="http://www.cnblogs.com/jackruicao/p/6258812.html" target="_blank" rel="noopener">LVM基本介绍与常用命令</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中Locale及shell编码问题</title>
    <url>/article/b31c/</url>
    <content><![CDATA[<p>查看当前系统语言环境 <code>locale</code></p>
<p>查看系统内安装的locale <code>locale -a</code></p>
<blockquote>
<p>1、语言符号及其分类(LC_CTYPE)<br>2、数字(LC_NUMERIC)<br>3、比较和排序习惯(LC_COLLATE)<br>4、时间显示格式(LC_TIME)<br>5、货币单位(LC_MONETARY)<br>6、信息主要是提示信息,错误信息,状态信息,标题,标签,按钮和菜单等(LC_MESSAGES)<br>7、姓名书写方式(LC_NAME)<br>8、地址书写方式(LC_ADDRESS)<br>9、电话号码书写方式(LC_TELEPHONE)<br>10、度量衡表达方式 (LC_MEASUREMENT)<br>11、默认纸张尺寸大小(LC_PAPER)<br>12、对locale自身包含信息的概述(LC_IDENTIFICATION)。</p>
</blockquote>
<p><code>LC_CTYPE=zh_CN.UTF-8</code></p>
<p>参考资料:<br><a href="http://www.drupal001.com/2012/04/shell-utf8/" target="_blank" rel="noopener">Linux中Locale及shell编码问题</a><br><a href="https://stackoverflow.com/questions/40037191/unicodedecodeerror-when-ssh-from-os-x" target="_blank" rel="noopener">UnicodeDecodeError when ssh from OS X</a><br><a href="http://wiki.ubuntu.org.cn/%E4%BF%AE%E6%94%B9locale" target="_blank" rel="noopener">修改locale</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>locale</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Pass密码管理</title>
    <url>/article/875/</url>
    <content><![CDATA[<ol>
<li><p>安装pass</p>
<p><code>sudo apt-get install pass</code></p>
<p><code>echo &quot;source /etc/bash_completion.d/password-store&quot; &gt;&gt; ~/.bashrc</code></p>
</li>
<li><p>生成密钥对</p>
<p><code>gpg --gen-key</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg (GnuPG) 1.4.20; Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">gpg: 钥匙环‘/home/wayde/.gnupg/secring.gpg’已建立</span><br><span class="line">gpg: 钥匙环‘/home/wayde/.gnupg/pubring.gpg’已建立</span><br><span class="line">请选择您要使用的密钥种类：</span><br><span class="line">   (1) RSA and RSA (default)</span><br><span class="line">   (2) DSA and Elgamal</span><br><span class="line">   (3) DSA (仅用于签名)</span><br><span class="line">   (4) RSA (仅用于签名)</span><br><span class="line">您的选择？ </span><br><span class="line">RSA 密钥长度应在 1024 位与 4096 位之间。</span><br><span class="line">您想要用多大的密钥尺寸？(2048) </span><br><span class="line">您所要求的密钥尺寸是 2048 位</span><br><span class="line">请设定这把密钥的有效期限。</span><br><span class="line">         0 = 密钥永不过期</span><br><span class="line">      &lt;n&gt;  = 密钥在 n 天后过期</span><br><span class="line">      &lt;n&gt;w = 密钥在 n 周后过期</span><br><span class="line">      &lt;n&gt;m = 密钥在 n 月后过期</span><br><span class="line">      &lt;n&gt;y = 密钥在 n 年后过期</span><br><span class="line">密钥的有效期限是？(0) </span><br><span class="line">密钥永远不会过期</span><br><span class="line">以上正确吗？(y/n) y</span><br><span class="line"></span><br><span class="line">您需要一个用户标识来辨识您的密钥；本软件会用真实姓名、注释和电子邮件地址组合</span><br><span class="line">成用户标识，如下所示：</span><br><span class="line">    “Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;”</span><br><span class="line"></span><br><span class="line">真实姓名： Wayde</span><br><span class="line">电子邮件地址： lynnheavn@126.com</span><br><span class="line">注释： </span><br><span class="line">您选定了这个用户标识：</span><br><span class="line">    “Wayde &lt;lynnheavn@126.com&gt;”</span><br><span class="line"></span><br><span class="line">更改姓名(N)、注释(C)、电子邮件地址(E)或确定(O)/退出(Q)？ o</span><br><span class="line">您需要一个密码来保护您的私钥。</span><br><span class="line"></span><br><span class="line">我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动</span><br><span class="line">鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。</span><br><span class="line">.........+++++</span><br><span class="line">..+++++</span><br><span class="line">我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动</span><br><span class="line">鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。</span><br><span class="line"></span><br><span class="line">随机字节不够多。请再做一些其他的琐事，以使操作系统能搜集到更多的熵！</span><br><span class="line">(还需要57字节)</span><br><span class="line">......</span><br><span class="line">随机字节不够多。请再做一些其他的琐事，以使操作系统能搜集到更多的熵！</span><br><span class="line">(还需要119字节)</span><br><span class="line">......</span><br><span class="line">/home/wayde/.gnupg/trustdb.gpg：建立了信任度数据库</span><br><span class="line">gpg: 密钥 1613CE21 被标记为绝对信任</span><br><span class="line">公钥和私钥已经生成并经签名。</span><br><span class="line"></span><br><span class="line">gpg: 正在检查信任度数据库</span><br><span class="line">gpg: 需要 3 份勉强信任和 1 份完全信任，PGP 信任模型</span><br><span class="line">gpg: 深度：0 有效性：  1 已签名：  0 信任度：0-，0q，0n，0m，0f，1u</span><br><span class="line">pub   2048R/1613CE21 2018-03-10</span><br><span class="line">      密钥指纹 = A2E6 2AED AABB 6CA3 A190  AABB 61DC 65E6 AABB CE21</span><br><span class="line">uid                  Wayde &lt;lynnheavn@126.com&gt;</span><br><span class="line">sub   2048R/9A9237B5 2018-03-10</span><br></pre></td></tr></table></figure>
</li>
<li><p>备份密钥对</p>
<p>查看密钥信息 <code>gpg --list-keys</code></p>
<p>导出私钥 <code>gpg --export-secret-keys --armor 1613CE21 &gt; ~/Profile/pass_gpg_privkey.asc</code></p>
<p>导出公钥 <code>gpg --export --armor 1613CE21 &gt; ~/Profile/pass_gpg_pubkey.asc</code></p>
</li>
<li><p>导入密钥对</p>
<p>导入公钥 <code>gpg --import ~/Profile/pass_gpg_privkey.asc</code></p>
<p>导入私钥 <code>gpg --import ~/Profile/pass_gpg_pubkey.asc</code></p>
</li>
<li><p>初始化</p>
<p><code>pass init 1613CE21</code></p>
<p><code>pass git init</code></p>
<p><code>pass git remote add origin pass-repository-url</code></p>
</li>
<li><p>添加记录</p>
<p><code>pass insert test/wayde</code></p>
</li>
<li><p>多行添加</p>
<p><code>pass insert email -m</code></p>
</li>
<li><p>密码显示在屏幕</p>
<p><code>pass test/wayde</code></p>
</li>
<li><p>密码复制到剪贴板(45s后自动清空)</p>
<p><code>pass -c test/wayde</code></p>
</li>
<li><p>删除记录</p>
<p><code>pass rm test/wayde</code></p>
</li>
<li><p>生成并存储新密码</p>
<p>eg. 生成一个具有10个字符不带符号的密码，并将它存储到 “email/new_service.com”列表中</p>
<p><code>pass generate email/new_service.com 10 -n</code></p>
<p>eg. 生成一个由 15 个字符组成的密码：包含字母，数字和特殊符号</p>
<p><code>pass generate mysite 15</code></p>
<blockquote>
<p>–no-symbols 只包含字母和数字</p>
<p>–clip or -c 密码直接拷贝到剪切板</p>
<p>–qrcode or -q 生成二维码</p>
</blockquote>
<p>同时支持 <code>pass mv | cp | rm</code></p>
</li>
<li><p>新机器同步pass</p>
<ol>
<li>导入密钥对</li>
<li>安装pass</li>
<li><code>git clone pass-repository-url .password-store/</code></li>
<li><code>pass</code>即可查看</li>
</ol>
</li>
</ol>
<ul>
<li><p>遇到问题:</p>
<ol>
<li><blockquote>
<p>gpg: decryption failed: No secret key</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg --export [ID] | gpg2 --import</span><br><span class="line">gpg --export-secret-keys [ID] | gpg2 --import</span><br><span class="line"></span><br><span class="line">gpg --export $(cat ~/.password-store/.gpg-id) | gpg2 --import</span><br><span class="line">gpg --export-secret-keys $(cat ~/.password-store/.gpg-id) | gpg2 --import</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 直接用gpg解密(成功)</span><br><span class="line">gpg -d .password-store/Soft/tplink-ID.gpg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 直接用gpg2解密(失败)</span><br><span class="line">gpg2 -d .password-store/Soft/tplink-ID.gpg</span><br><span class="line"><span class="meta">#</span> gpg: public key decryption failed: Permission denied</span><br><span class="line"><span class="meta">#</span> gpg: decryption failed: No secret key</span><br></pre></td></tr></table></figure>
<p><em>ps: 尚未解决</em></p>
<p>参考资料:</p>
<p><a href="https://github.com/IJHack/qtpass/issues/92" target="_blank" rel="noopener">gpg: decryption failed: No secret key #92</a></p>
<p><a href="https://www.gnupg.org/gph/en/manual.html#AEN346" target="_blank" rel="noopener">Trust in a key’s owner</a></p>
</li>
<li><blockquote>
<p>gpg: 9A9237B5：没有证据表明这把密钥真的属于它所声称的持有者<br>gpg: /dev/shm/pass.sZAxIBItx71YV/6uwLt-Shopping-Amazon.txt: encryption failed: 不可用公钥<br>GPG encryption failed. Would you like to try again? [y/N]</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg --list-keys</span><br><span class="line">gpg --edit-key 1613CE21</span><br><span class="line">trust</span><br><span class="line">5 (设置成绝对信任)</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>参考资料:<br><a href="https://linux.cn/article-9407-1.html" target="_blank" rel="noopener">使用 pass 密码管理器管理你的密码</a><br><a href="https://linux.cn/article-3155-1.html" target="_blank" rel="noopener">如何在Linux上使用命令行管理密码</a><br><a href="http://www.lupaworld.com/article-237364-1.html" target="_blank" rel="noopener">pass: 以 Unix 之道来管理密码</a><br><a href="http://www.ruanyifeng.com/blog/2013/07/gpg.html" target="_blank" rel="noopener">GPG入门教程</a><br><a href="https://gist.github.com/abtrout/d64fb11ad6f9f49fa325" target="_blank" rel="noopener">Using password-store with git repository synching</a><a href="https://wiki.archlinux.org/index.php/GnuPG_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">GnuPG (简体中文)</a>)</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>pass</tag>
        <tag>gpg</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux device设备文件</title>
    <url>/article/a3dc/</url>
    <content><![CDATA[<blockquote>
<p>设备文件：块设备文件(b)、字符设备文件(c)</p>
<p>/dev/hd[a-t]：IDE设备<br>/dev/sd[a-z]：SCSI设备<br>/dev/fd[0-7]：标准软驱<br>/dev/md[0-31]：软raid设备<br>/dev/loop[0-7]：本地回环设备<br>/dev/ram[0-15]：内存<br>/dev/null：无限数据接收设备,相当于黑洞<br>/dev/zero：无限零资源<br>/dev/tty[0-63]：虚拟终端<br>/dev/ttyS[0-3]：串口<br>/dev/lp[0-3]：并口<br>/dev/console：控制台<br>/dev/fb[0-31]：framebuffer<br>/dev/cdrom =&gt; /dev/hdc<br>/dev/modem =&gt; /dev/ttyS[0-9]<br>/dev/pilot =&gt; /dev/ttyS[0-9]<br>/dev/random：随机数设备<br>/dev/urandom：随机数设备</p>
</blockquote>
<p>特殊设备：</p>
<ol>
<li>/dev/null 它是空设备，也称为位桶（bit bucket）或者黑洞(black hole)。你可以向它输入任何数据，但任何写入它的数据都会被抛弃。通常用于处理不需要的输出流。（当然，它也可以作为空的输入流）</li>
<li>/dev/zero 该设备无穷尽地提供空字符（ASCII NUL, 0x00），可以使用任何你需要的数目。它通常用于向设备或文件写入字符串0，用于初始化数据存储。（当然，也可作为输出流的接受容器）</li>
</ol>
<p>eg. dd if=/dev/zero of=test.txt bs=1k count=1</p>
<blockquote>
<p>dd：用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。</p>
</blockquote>
<p>参考资料：<br><a href="http://blog.csdn.net/liumang_d/article/details/3899462" target="_blank" rel="noopener">dd命令详解</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>device</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux sudo出现unable to resolve host</title>
    <url>/article/b0ed/</url>
    <content><![CDATA[<blockquote>
<p>sudo: unable to resolve host pandll-hk</p>
</blockquote>
<p><code>vim /etc/hosts</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">127.0.0.1	localhost	pandll-hk</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux swap分区</title>
    <url>/article/3366/</url>
    <content><![CDATA[<blockquote>
<p>Swap分区是在系统物理内存不够用时由系统内存管理程序将很长时间没有操作内存数据临时保存到Swap分区中，以提高可用内存额度的一种机制。当那些程序要再次重新运行时，会再从Swap分区恢复之前保存的数据到内存中。<br>相关操作会导致额外的IO开销，特别是，如果内存使用率已经非常高，而同时IO性能也不是很好的情况下，该机制其实会起到相反的效果：不仅系统性能提升较小（因为内存使用率已经非常高了），而且由于频繁的内存到SWAP的切换操作，会导致产生大量额外的IO操作，导致IO性能进一步降低，最终反而降低了系统总体性能。</p>
</blockquote>
<a id="more"></a>
<h4><span id="创建swap分区">创建swap分区</span></h4><ol>
<li><p>查看系统当前分区情况</p>
<p><code>free  -m</code></p>
</li>
<li><p>创建交换分区文件</p>
<p><code>dd if=/dev/zero of=/swap bs=4096 count=1572864</code></p>
</li>
<li><p>设置交换分区文件</p>
<p><code>mkswap /swap</code></p>
</li>
<li><p>启用交换分区文件</p>
<p><code>swapon /swap</code></p>
</li>
<li><p>设置开机时自动启用</p>
<p><code>echo “LABEL=SWAP-sda /swap swap swap defaults 0 0” &gt;&gt; /etc/fstab</code></p>
</li>
<li><p>删除swap</p>
<p><code>swapoff /swap ; rm -f /swap</code></p>
</li>
</ol>
<p>参考资料:<br><a href="http://blog.csdn.net/wangjunjun2008/article/details/50681115" target="_blank" rel="noopener">Linux下增加、删除Swap文件</a><br><a href="https://cloud.tencent.com/document/product/362/3597" target="_blank" rel="noopener">关于新购买Linux服务器不再提供SWAP盘的通知</a><br><a href="https://www.techonia.com/1807/add-swap-file-linux-freebsd" target="_blank" rel="noopener">How to create or add swap file on Linux and FreeBSD</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>swap</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 临时端口、临时端口范围、预留端口</title>
    <url>/article/cec0/</url>
    <content><![CDATA[<ol>
<li><p>临时端口</p>
<blockquote>
<p>临时端口又称短暂端口，是TCP，UDP，或SCTP协议通过TCP/IP底层软件从预设范围内自动获取的端口，一般提供给客户服务器通讯中的客户端。这种端口是临时的，并且仅在应用程序使用协议建立通讯联系的周期中有效。</p>
</blockquote>
</li>
<li><p>查看系统本地可用端口极限值</p>
<blockquote>
<p>32768  60999, 说明这台机器本地能向外连接28232个连接</p>
<p>Note: 本地向外连接，不是这台机器的所有连接，不会影响这台机器的 80端口的对外连接数。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cat /proc/sys/net/ipv4/ip_local_port_range </span><br><span class="line">32768	60999</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo sysctl -a | grep ip_local_port_range                               </span><br><span class="line">net.ipv4.ip_local_port_range = 32768	60999</span><br></pre></td></tr></table></figure>
<a id="more"></a>
</li>
<li><p>预留端口</p>
<blockquote>
<p>将服务监听的端口以逗号分隔全部添加到ip_local_reserved_ports中，TCP/IP协议栈从ip_local_port_range中随机选取源端口时，会排除ip_local_reserved_ports中定义的端口。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cat /proc/sys/net/ipv4/ip_local_reserved_ports </span><br><span class="line">40000,50000-50010</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo sysctl -a | grep ip_local_reserved_ports                               </span><br><span class="line">net.ipv4.ip_local_port_range = 40000,50000-50010</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 定时关机/重启计划</title>
    <url>/article/6961/</url>
    <content><![CDATA[<p>新增一条crontab配置如下:</p>
<p><code>00 01 * * 1,2,3,4,5 /sbin/shutdown -h now</code></p>
<blockquote>
<p>linux下运行crontab -可能会提示你：</p>
<p> no crontab for root - using an empty one，然后会叫你“Select a editor ……”下面有几个选项，就是叫你选择编辑器，然后选 vim.tiny。<br> 或直接进入编辑页面。<br> 进入crontab编辑页面之后就直接”shift+:”,然后输入wq保存即可。然后一个新的crontab就生成了！生成可能需要一会。</p>
</blockquote>
<p>Linux 关机/重启等命令区别</p>
<ul>
<li>shutdown</li>
<li>reboot</li>
<li>init 0</li>
<li>halt</li>
<li>poweroff</li>
</ul>
<p>遇到问题:</p>
<ol>
<li><p><code>no crontab for root - using an empty one</code></p>
<p>执行<code>select-editor</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> select-editor </span><br><span class="line">Select an editor.  To change later, run 'select-editor'.</span><br><span class="line">  1. /bin/ed</span><br><span class="line">  2. /bin/nano        &lt;---- easiest</span><br><span class="line">  3. /usr/bin/vim.basic</span><br><span class="line">  4. /usr/bin/vim.gnome</span><br><span class="line">  5. /usr/bin/vim.tiny</span><br><span class="line"></span><br><span class="line">Choose 1-5 [2]: 3</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>参考资料:<br><a href="http://blog.csdn.net/sweblish/article/details/8653336" target="_blank" rel="noopener">第一次使用crontab linux</a><br><a href="https://linux.cn/article-8577-1.html" target="_blank" rel="noopener">理解 Linux 中的 shutdown、poweroff、halt 和 reboot 命令</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 文件加密压缩和解压</title>
    <url>/article/cbf/</url>
    <content><![CDATA[<ol>
<li><p>zip</p>
<p>压缩</p>
<p><code>zip -re filename.zip filename</code></p>
<p><code>zip -rP &quot;123*&quot; filename.zip filename</code></p>
<p>解压</p>
<p><code>unzip filename.zip</code></p>
<p><code>unzip -P &quot;123*&quot; filename.zip</code></p>
</li>
<li><p>tar</p>
<p>压缩</p>
<p><code>tar -zcvf - filename | openssl des3 -salt -k &quot;123*&quot; -out filename.tar.gz</code></p>
<p>解压</p>
<p><code>openssl des3 -d -k &quot;123*&quot; -salt -in filename.tar.gz | tar zxvf -</code></p>
</li>
</ol>
<p>参考资料:<br><a href="http://blog.csdn.net/ydt_lwj/article/details/8206404" target="_blank" rel="noopener">linux 下文件加密压缩和解压的方法</a><br><a href="http://www.361way.com/openssl-encrypt-file/2692.html" target="_blank" rel="noopener">openssl加密文件或文件夹</a><br><a href="https://linux.cn/article-7947-1.html" target="_blank" rel="noopener">怎样用 Tar 和 OpenSSL 给文件和目录加密及解密</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tar</tag>
        <tag>zip</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 启用crontab日志</title>
    <url>/article/fb42/</url>
    <content><![CDATA[<ol>
<li><p>ubuntu</p>
<p><code>sudo vim /etc/rsyslog.d/50-default.conf</code></p>
<blockquote>
<p>cron.*    /var/log/cron.log #将cron前面的注释符去掉</p>
</blockquote>
<p><code>sudo service rsyslog restart</code></p>
<p>日志路径: <code>/var/log/cron.log</code></p>
</li>
<li><p>debian</p>
<p><code>sudo vim /etc/rsyslog.conf</code></p>
<blockquote>
<p>cron.*    /var/log/cron.log #将cron前面的注释符去掉</p>
</blockquote>
<p><code>sudo systemctl restart rsyslog.service</code></p>
<p>日志路径: <code>/var/log/cron.log</code></p>
</li>
</ol>
<p>参考资料:<br><a href="http://blog.csdn.net/zhuangtim1987/article/details/52280409" target="_blank" rel="noopener">Ubuntu查看crontab运行日志</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 多命令顺序执行连接符</title>
    <url>/article/4846/</url>
    <content><![CDATA[<ul>
<li><p>分号 ;</p>
<blockquote>
<p>分号，没有任何逻辑关系的连接符。当多个命令用分号连接时，各命令之间的执行成功与否彼此没有任何影响，都会一条一条执行下去</p>
</blockquote>
</li>
<li><p>逻辑或 ||</p>
<blockquote>
<p>逻辑或，当用此连接符连接多个命令时，前面的命令执行成功，则后面的命令不会执行。前面的命令执行失败，后面的命令才会执行。</p>
</blockquote>
</li>
<li><p>逻辑与 &amp;&amp;</p>
<blockquote>
<p>逻辑与，当用此连接符连接多个命令时，前面的命令执行成功，才会执行后面的命令，前面的命令执行失败，后面的命令不会执行，与 || 正好相反。</p>
</blockquote>
</li>
<li><p>管道符 |</p>
<blockquote>
<p>管道符，当用此连接符连接多个命令时，前面命令执行的正确输出，会交给后面的命令继续处理。若前面的命令执行失败，则会报错，若后面的命令无法处理前面命令的输出，也会报错。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 文件操作常用方法</title>
    <url>/article/9ed3/</url>
    <content><![CDATA[<ol>
<li><p>查找并显示文件信息</p>
<p><code>find ./ -size +1G -exec ls -lh {} \;</code><br>or<br><code>find ./ -size +1G | xargs -i ls -lh {}</code></p>
</li>
<li><p>查找并移动文件</p>
<p><code>find ./ -name *.iso -size +1G | xargs -I {} mv {} /data/OS/</code></p>
</li>
<li><p>查找修改时间超过3天的文件并删除</p>
<p><code>find ./ -maxdepth 1 -mtime +3 -exec rm -rf {} \;</code></p>
</li>
<li><p>查找非指定字符结尾的文件并删除</p>
<p><code>find ./ -name &#39;*[!.tar.gz]&#39; -exec rm -rf {} \;</code></p>
</li>
<li><p>删除文件时排除某个文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf  `ls | egrep -v tmp`</span><br><span class="line">rm -rf  `ls | egrep -v '(aa.txt|bb.txt|cc)'`</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>find</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 查看CPU信息</title>
    <url>/article/7e1/</url>
    <content><![CDATA[<p><strong>总核数 = 物理CPU个数 * 每颗物理CPU的核数</strong></p>
<p><strong>总逻辑CPU数 = 物理CPU个数 <em> 每颗物理CPU的核数 </em> 超线程数</strong></p>
<h4><span id="查看物理cpu个数">查看物理CPU个数</span></h4><p>方法1:</p>
<p><code>$ cat /proc/cpuinfo | grep &quot;physical id&quot; | sort | uniq | wc -l</code></p>
<p>方法2:</p>
<p><code>$ lscpu</code> 列出来的<code>Socket(s)</code>后面跟的数字即物理CPU个数</p>
<h4><span id="查看每个物理cpu中core的个数即核数">查看每个物理CPU中core的个数(即核数)</span></h4><p>方法1:</p>
<p><code>$ cat /proc/cpuinfo | grep &quot;cpu cores&quot; | uniq</code></p>
<p>方法2:</p>
<p><code>$ lscpu</code> 列出来的<code>Core(s) per socket</code>后面跟的数字即每个物理CPU中core的个数</p>
<h4><span id="查看逻辑cpu的个数">查看逻辑CPU的个数</span></h4><p>方法1:</p>
<p><code>$ cat /proc/cpuinfo | grep &quot;processor&quot; | wc -l</code></p>
<p>方法2:</p>
<p><code>$ lscpu</code> 列出来的<code>CPU(s)</code>后面跟的数字即逻辑CPU的个数</p>
<p>方法3:</p>
<p><code>$ nproc --all</code></p>
<p>方法4:</p>
<p><code>$ getconf _NPROCESSORS_ONLN</code></p>
<p>方法5:</p>
<p><code>$ cat /sys/devices/system/cpu/online</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 查看CPU温度信息</title>
    <url>/article/ff91/</url>
    <content><![CDATA[<h4><span id="ubuntu">Ubuntu</span></h4><ol>
<li><p><code>sudo apt-get install lm-sensors sensors-applet</code></p>
</li>
<li><p><code>sudo sensors-detect</code></p>
<p>不想重复输入yes就执行<code>sh -c &quot;yes|sensors-detect&quot;</code></p>
</li>
<li><p><code>sensors</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acpitz-virtual-0</span><br><span class="line">Adapter: Virtual device</span><br><span class="line">temp1:        +27.8 C  (crit = +119.0 C)</span><br><span class="line">temp2:        +29.8 C  (crit = +119.0 C)</span><br><span class="line"></span><br><span class="line">coretemp-isa-0000</span><br><span class="line">Adapter: ISA adapter</span><br><span class="line">Physical id 0:  +29.0 C  (high = +80.0 C, crit = +100.0 C)</span><br><span class="line">Core 0:         +25.0 C  (high = +80.0 C, crit = +100.0 C)</span><br><span class="line">Core 1:         +27.0 C  (high = +80.0 C, crit = +100.0 C)</span><br><span class="line">Core 2:         +23.0 C  (high = +80.0 C, crit = +100.0 C)</span><br><span class="line">Core 3:         +26.0 C  (high = +80.0 C, crit = +100.0 C)</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装图形显示工具</p>
<p><code>sudo apt-get install xsensors</code> </p>
<p><code>xsensors</code></p>
</li>
</ol>
<p>或者 安装 Sensors Unity</p>
<h4><span id="debian">Debian</span></h4><ol>
<li><code>sudo apt-get install lm-sensors</code></li>
<li><code>sudo sensors-detect</code></li>
<li><code>sensors</code></li>
</ol>
<p>参考资料:<br><a href="http://www.oschina.net/question/54100_11151" target="_blank" rel="noopener">Ubuntu下查看CPU温度风扇转速和硬盘温度</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 查看文件信息</title>
    <url>/article/c517/</url>
    <content><![CDATA[<ol>
<li><p>查看文件信息  <code>stat filename</code></p>
</li>
<li><p>文件类型</p>
<blockquote>
<p>b  -  块设备文件<br>d  -  目录<br>c  -   字符设备文件<br>p  -  管道文件<br>l  -  符号链接文件<br>f  -  普通文件<br>s  -  socket文件</p>
</blockquote>
</li>
<li><p>文件权限</p>
<blockquote>
<p>备注: 0755最前面的0表示不使用任何特殊权限，该位上的数字可以是:</p>
<p>0,1(–t),2(-s-),3(-st),4(s–),5(s-t),6(ss-),7(sst)</p>
</blockquote>
<ul>
<li><p>r  w  x</p>
</li>
<li><p>s </p>
<blockquote>
<p>未生效时为大写S</p>
<p>设置使文件在执行阶段具有文件所有者的权限，相当于临时拥有文件所有者的身份</p>
<p>典型的文件是passwd. 如果一般用户执行该文件, 则在执行过程中, 该文件可以获得root权限, 从而可以更改用户的密码</p>
</blockquote>
</li>
<li><p>t</p>
<blockquote>
<p>只针对目录生效，表示只能让所属主以及root可以删除(重命名/移动)该目录下的文件</p>
<p>典型的文件是 /tmp /home</p>
</blockquote>
</li>
<li><p>i</p>
<blockquote>
<p>不可修改权限</p>
</blockquote>
</li>
<li><p>a</p>
<blockquote>
<p>只追加权限</p>
</blockquote>
</li>
<li><p>Permission numbers</p>
</li>
</ul>
</li>
</ol>
<pre><code>&gt; 0 = ---
&gt;
&gt; 1 = --x
&gt;
&gt; 2 = -w-
&gt;
&gt; 3 = -wx
&gt;
&gt; 4 = r--
&gt;
&gt; 5 = r-x
&gt;
&gt; 6 = rw-
&gt;
&gt; 7 = rwx
</code></pre><ol>
<li><p>时间信息</p>
<ul>
<li><p>Access time</p>
<p>访问时间: 对文件进行一次读操作，它的访问时间就会改变。例如像：cat、more等操作，但是像之前的state还有ls命令对atime是不会有影响的</p>
</li>
<li><p>Modify time</p>
<p>修改时间: 文件的内容被最后一次修改的时间，我们经常用的ls -l命令显示出来的文件时间就是这个时间，当用vim对文件进行编辑之后保存，它的mtime就会相应的改变</p>
</li>
<li><p>Change time</p>
<p>状态时间: 当文件的状态被改变的时候，状态时间就会随之改变，例如当使用chmod、chown等改变文件属性的操作是会改变文件的ctime的</p>
</li>
<li><p>单独查看上述3个时间</p>
<p>Access Time: <code>ls -lu filename</code></p>
<p>Modify Time: <code>ls -l filename</code> (默认显示修改时间)</p>
<p>Change Time: <code>ls -lc filename</code></p>
</li>
</ul>
</li>
</ol>
<p>####</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 查看硬件信息</title>
    <url>/article/fd7f/</url>
    <content><![CDATA[<h4><span id="linux-查看硬件信息-proc">Linux 查看硬件信息: proc</span></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看CPU信息，内容很全哦！</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/cpuinfo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看内存信息。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/meminfo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这个文件列出字符和块设备的主设备号，以及分配到这些设备号的设备名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/devices</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这个文件包含的信息有CPU利用率，磁盘，内存页，内存对换，全部中断，接触开关等</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/<span class="built_in">stat</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看IO端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/ioports</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看交换分区信息(/proc)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/swaps</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">中断信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/interrupts</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看磁盘分区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/partitions</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看USB设备</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/bus/usb/devices</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看输入设备：键盘鼠标</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/bus/input/devices</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看PCI设备</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/bus/pci/devices</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看系统负载</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /proc/loadavg</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看开机检查的硬件，可以使用grep过虑：eth,cpu,mem,pci,usb,vga,sda……</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /var/<span class="built_in">log</span>/demsg</span></span><br></pre></td></tr></table></figure>
<h4><span id="linux-查看硬件信息-终端命令行">Linux 查看硬件信息: 终端命令行</span></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看CPU信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lscpu</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看PCI设备</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lspci</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看显卡信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lspci | grep -i vga</span></span><br><span class="line">00:02.0 VGA compatible controller: Intel Corporation HD Graphics 530 (rev 06)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看显卡详细信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lcpci -v -s 00:02.0</span></span><br><span class="line">00:02.0 VGA compatible controller: Intel Corporation HD Graphics 530 (rev 06) (prog-if 00 [VGA controller])</span><br><span class="line">	Subsystem: Gigabyte Technology Co., Ltd HD Graphics 530</span><br><span class="line">	Flags: bus master, fast devsel, latency 0, IRQ 131</span><br><span class="line">	Memory at de000000 (64-bit, non-prefetchable) [size=16M]</span><br><span class="line">	Memory at c0000000 (64-bit, prefetchable) [size=256M]</span><br><span class="line">	I/O ports at f000 [size=64]</span><br><span class="line">	[virtual] Expansion ROM at 000c0000 [disabled] [size=128K]</span><br><span class="line">	Capabilities: [40] Vendor Specific Information: Len=0c &lt;?&gt;</span><br><span class="line">	Capabilities: [70] Express Root Complex Integrated Endpoint, MSI 00</span><br><span class="line">	Capabilities: [ac] MSI: Enable+ Count=1/1 Maskable- 64bit-</span><br><span class="line">	Capabilities: [d0] Power Management version 2</span><br><span class="line">	Capabilities: [100] Process Address Space ID (PASID)</span><br><span class="line">	Capabilities: [200] Address Translation Service (ATS)</span><br><span class="line">	Capabilities: [300] Page Request Interface (PRI)</span><br><span class="line">	Kernel driver in use: i915</span><br><span class="line">	Kernel modules: i915</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看USB设备</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lsusb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">报告虚拟内存统计信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vmstat</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看分区信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> fdisk -l</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看磁盘参数</span></span><br><span class="line">hdparm -i /dev/sda</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看磁盘分信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> df -h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">读取系统DMI表来显示硬件和BIOS信息。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dmidecode</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">当前加载的驱动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lsmod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看开机检查的硬件，可以使用grep过虑：eth,cpu,mem,pci,usb,vga,sda……</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dmesg</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看系统负载</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uptime</span></span><br></pre></td></tr></table></figure>
<h4><span id="ubuntu-安装工具软件查看">Ubuntu 安装工具软件查看</span></h4><p><code>sudo apt-get install lshw lshw-gtk</code></p>
<p>or </p>
<p><code>sudo apt-get install hardinfo</code></p>
<p>or</p>
<p><code>sudo apt-get install sysinfo</code></p>
<p>参考资料:<br><a href="http://wowubuntu.com/hardware-info.html" target="_blank" rel="noopener">Linux 用命令行查看硬件信息</a><br><a href="http://bbs.51cto.com/thread-553568-1.html" target="_blank" rel="noopener">linux查看硬件信息的命令</a><br><a href="https://www.linuxidc.com/Linux/2011-07/39511.htm" target="_blank" rel="noopener">Ubuntu 上获取硬件信息的几件方式</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 通过pid查看进程信息</title>
    <url>/article/56ee/</url>
    <content><![CDATA[<blockquote>
<p>Linux在启动一个进程时，系统会在/proc下创建一个以PID命名的文件夹，在该文件夹下会有我们的进程的信息。</p>
</blockquote>
<p><code>ll /proc/PID</code></p>
<blockquote>
<p>cwd符号链接的是进程运行目录</p>
<p>exe符号连接就是执行程序的绝对路径</p>
<p>cmdline就是程序运行时输入的命令行命令</p>
<p>environ记录了进程运行时的环境变量</p>
<p>fd目录下是进程打开或使用的文件的符号连接</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 磁盘管理</title>
    <url>/article/6224/</url>
    <content><![CDATA[<h4><span id="查看信息">查看信息</span></h4><ol>
<li><p>查看磁盘信息</p>
<p><code>df</code></p>
<p><code>mount -l</code></p>
</li>
<li><p>查看磁盘分区</p>
<p><code>cat /proc/partitions</code></p>
</li>
<li><p>查看分区的UUID、系统类型等信息</p>
<p><code>blkid</code></p>
</li>
<li><p>列出系统中的磁盘分区</p>
<p><code>lsblk -a</code></p>
</li>
</ol>
<h4><span id="挂载磁盘">挂载磁盘</span></h4><ol>
<li><p>查看新增的磁盘设备</p>
<p><code>sudo fdisk -l</code></p>
</li>
<li><p>对新增磁盘分区、格式化</p>
<p><code>sudo fdisk /dev/sdb</code></p>
<p><code>sudo mkfs.ext4 /dev/sdb</code></p>
</li>
<li><p>更新分区表</p>
<p><code>sudo partprobe</code></p>
</li>
<li><p>新建目录并挂载</p>
<p><code>mkdir /data</code></p>
<p><code>sudo mount /dev/sdb /data</code></p>
</li>
<li><p>卸载磁盘</p>
<p><code>umount /dev/sdb</code> or <code>umount /data</code></p>
</li>
</ol>
<blockquote>
<p><strong>mount挂载常用参数</strong></p>
<p>-t    指定文件系统类型，例如：-t ext3、-t ext4、-t vfat</p>
<p>-o    指定挂载选项，例如：</p>
<p>​    -o ro,rw 以只读形式挂载，以读写形式挂载；默认是rw</p>
<p>​    -o async 代表所有操作使用缓存(内存)：提高文件系统读写数据的效率；默认为async使用缓存(内存)</p>
<p>​    -o sync 代表所有操作直接写入磁盘：代表所有操作不使用缓存，而是直接写入磁盘；应用在对数据安全性比较高的场景</p>
<p>​    -o atime 代表每次访问文件时，更新文件被访问的时间<strong>，</strong>默认为atime</p>
<p>​    -o noatime 代表每次访问文件时，不更新文件被访问的时间</p>
<p>​    -o remount 代表重新挂载文件系统</p>
</blockquote>
<p>参考资料:<br><a href="http://www.92csz.com/study/linux/8.htm" target="_blank" rel="noopener">第八章 Linux 磁盘管理</a><br><a href="https://wiki.centos.org/zh/HowTos/KVM#head-459d0617f002a86a763ae5b60e076eb8403b61f7" target="_blank" rel="noopener">KVM 与 CentOS-6</a><br><a href="http://blog.sina.com.cn/s/blog_7ca9c57a0100u34h.html" target="_blank" rel="noopener">debian的手工与自动挂载磁盘分区</a><br><a href="http://www.runoob.com/linux/linux-filesystem.html" target="_blank" rel="noopener">Linux 磁盘管理</a><br><a href="http://www.178linux.com/40200" target="_blank" rel="noopener">Linux磁盘管理（一）之分区、格式化、挂载使用</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>磁盘管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 系统日志</title>
    <url>/article/bdc5/</url>
    <content><![CDATA[<ol>
<li><p>执行脚本同时将标准输出到文件</p>
<p><code>fab deploy:internal,server 2&gt;&amp;1 | tee -a ./log/fab.realibox.log</code></p>
</li>
</ol>
<p>参考资料:<br><a href="http://www.cnblogs.com/liujianzuo888/p/5231081.html" target="_blank" rel="noopener">linux查看ssh用户登录日志与操作日志</a><br><a href="http://blog.csdn.net/nancygreen/article/details/9873895" target="_blank" rel="noopener">ubuntu/var/log/下各个日志文件</a><br><a href="http://blog.csdn.net/u010781856/article/details/47376753" target="_blank" rel="noopener">ubuntu查看系统日志及相关文件介绍</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux设置默认编辑器为Vim</title>
    <url>/article/2548/</url>
    <content><![CDATA[<p><code>sudo update-alternatives --config editor</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">There are 4 choices for the alternative editor (providing /usr/bin/editor).</span><br><span class="line"></span><br><span class="line">  Selection    Path                Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /bin/nano            40        auto mode</span><br><span class="line">  1            /bin/ed             -100       manual mode</span><br><span class="line">  2            /bin/nano            40        manual mode</span><br><span class="line">  3            /usr/bin/vim.basic   30        manual mode</span><br><span class="line">  4            /usr/bin/vim.tiny    10        manual mode</span><br><span class="line"></span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or type selection number: 3</span><br><span class="line">update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/editor (editor) in manual mode</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-远程桌面连接工具remmina</title>
    <url>/article/1132/</url>
    <content><![CDATA[<blockquote>
<p>remmina—一款远程连接软件，支持 RDP、VNC、NX、XDMCP 和 SSH</p>
</blockquote>
<p><img src="../../resource/images/remmina-01.png" alt="Remmina配置截图-01"><br><img src="../../resource/images/remmina-02.png" alt="Remmina配置截图-02"><br><img src="../../resource/images/remmina-03.png" alt="Remmina配置截图-03"></p>
<ol>
<li><p>remmina 只有管理员用户才能通过RDP协议远程连接？</p>
<p>修改windows10上的远程连接配置即可，如下图所示</p>
<p><img src="../../resource/images/remmina-windows10-01.png" alt="允许远程访问您的计算机"></p>
<p><img src="../../resource/images/remmina-windows10-02.png" alt="选择用户"></p>
</li>
</ol>
<h4><span id="ubuntu-远程连接-windows">ubuntu 远程连接 windows</span></h4><ol>
<li><p><code>sudo apt-get install rdesktop</code> </p>
</li>
<li><p><code>rdesktop -f -a 16 -T Win -u administrator -p a host:port</code></p>
<blockquote>
<p>-u        指定用户名</p>
<p>-p        密码</p>
<p>-f        默认全屏， 需要用Ctrl-Alt-Enter组合键进行全屏模式切换。</p>
<p>-a        16表示使用16 bit色</p>
<p>host    windows服务器地址</p>
<p>port    端口号（默认是3389，可以不用写）</p>
<p>-r clipboard:PRIMARYCLIPBOARD    剪切板</p>
<p>-r sound    启动本地音频设备</p>
<p>-r disk:sunray=/home/wayde    共享目录</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>remmina</tag>
      </tags>
  </entry>
  <entry>
    <title>私有地址</title>
    <url>/article/d552/</url>
    <content><![CDATA[<ul>
<li><p>私有地址</p>
<p>A类：10.0.0.0 后三位自由分配</p>
<p>B类：172.16.0.0 至172.31.0.0 后两位自由分配</p>
<p>C类：192.168.0.0 后两位自由分配</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Networking</category>
      </categories>
      <tags>
        <tag>networking</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 常用命令和配置</title>
    <url>/article/abd5/</url>
    <content><![CDATA[<h3><span id="nginx-介绍">Nginx 介绍</span></h3><p><strong>Nginx</strong>(发音同engine x)是一款免费的开源软件，由俄罗斯人伊戈尔·赛索耶夫2004年首次公开发布。</p>
<p>Nginx是一款面向性能设计、异步框架的Web服务器，支持反向代理，负载均衡和HTTP缓存。</p>
<p>Nginx使用异步事件驱动的方法来处理请求。Nginx的模块化事件驱动架构可以在高负载下提供更可预测的性能。</p>
<p>在Linux操作系统下，Nginx使用epoll事件模型，得益于此，Nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。</p>
<p>Nginx在官方测试的结果中，能够支持五万个并行连接，而在实际的运作中，可以支持二万至四万个并行链接。</p>
<h3><span id="nginx-常用命令">Nginx 常用命令</span></h3><h4><span id="启动服务">启动服务</span></h4><p><code>$ [sudo] /usr/sbin/nginx -c /etc/nginx/nginx.conf</code></p>
<a id="more"></a>
<h4><span id="管理运行实例">管理运行实例</span></h4><p><code>$ [sudo] nginx -s signal</code><br>​    stop – 快速关闭<br>​    quit – 优雅关闭 (等待 worker 线程完成处理)<br>​    reload – 重载配置文件<br>​    reopen – 重新打开日志文件</p>
<h4><span id="重启服务">重启服务</span></h4><p><code>$ [sudo] service nginx restart</code></p>
<h4><span id="停止服务">停止服务</span></h4><p><code>$ [sudo] service nginx restart</code></p>
<p>停止nginx服务其实就是给nginx主进程发送信号，所以需要先找到nginx主进程pid。</p>
<p>有两种方法可以找到nginx pid:</p>
<ul>
<li><p>通过<code>ps</code>命令</p>
<p><code>$ ps -ef | grep -w nginx | grep master | awk &#39;{print $2}&#39;</code></p>
</li>
<li><p>通过<code>nginx.pid</code>文件</p>
<p><code>nginx.pid</code>文件路径配置在<code>nginx.conf</code>里面的<code>pid</code>项里面(笔者Ubuntu环境为<code>/run/nginx.pid</code>)。</p>
</li>
</ul>
<h5><span id="强制停止">强制停止</span></h5><p><code>$ [sudo] pkill -9 nginx</code><br>或<br><code>$ cat /run/nginx.pid | xargs [sudo] kill -9</code></p>
<h5><span id="快速停止">快速停止</span></h5><p><code>$ cat /run/nginx.pid | xargs [sudo] kill -TERM</code></p>
<p><code>$ cat /run/nginx.pid | xargs [sudo] kill -INT</code></p>
<h5><span id="从容停止">从容停止</span></h5><p><code>$ cat /run/nginx.pid | xargs [sudo] kill -QUIT</code></p>
<h4><span id="重新加载配置">重新加载配置</span></h4><p><code>$ [sudo] /usr/sbin/nginx -s reload</code><br>或者<br><code>$ cat /run/nginx.pid | xargs [sudo] kill -HUP</code></p>
<h4><span id="检查配置">检查配置</span></h4><p><code>$ [sudo] /usr/sbin/nginx -t -c /etc/nginx/nginx.conf</code></p>
<h4><span id="ubuntu-升级nginx">Ubuntu 升级nginx</span></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-add-repository ppa:nginx/stable</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install nginx-extras	<span class="comment">#支持mp4播放扩展需要重新安装</span></span></span><br></pre></td></tr></table></figure>
<h3><span id="nginx-配置">Nginx 配置</span></h3><h4><span id="if语句">if语句</span></h4><p>Nginx配置文件语法不支持<code>if</code>语句嵌套，也不支持and、or、&amp;&amp;、|| 这类语法。<br>对<code>if</code>语句感兴趣的可查看<a href="http://agentzh.blogspot.com/2011/03/how-nginx-location-if-works.html" target="_blank" rel="noopener">location下if是如何工作的</a>这篇文章。</p>
<h4><span id="location-匹配">location 匹配</span></h4><p>location匹配规则及优先级(由高到低)如下:</p>
<ol>
<li><code>=</code> 严格匹配这个查询。如果找到，停止搜索。</li>
<li><code>^~</code> 匹配路径的前缀，如果找到，停止搜索。</li>
<li><code>~</code> 为区分大小写的正则匹配。</li>
<li><code>~*</code> 为不区分大小写匹配 。</li>
</ol>
<h4><span id="rewrite模块">rewrite模块</span></h4><p>rewrite的指令可以实现url的转向，rewrtie有四种不同的flag，分别是redirect、permanent、break和last。其中前两种是跳转型的flag，后两种是代理型。跳转型是指有客户端浏览器重新对新地址进行请求，代理型是在WEB服务器内部实现跳转的。</p>
<ul>
<li><code>redirect</code><br>302跳转到rewrtie后面的地址。</li>
<li><code>permanent</code><br>301永久调整到rewrtie后面的地址，即当前地址已经永久迁移到新地址，一般是为了对搜索引擎友好。</li>
<li><code>last</code><br>将rewrite后的地址重新在server标签执行。</li>
<li><code>break</code><br>将rewrite后的地址重新在当前的location标签执行。</li>
</ul>
<p>参考资料:<br><a href="http://www.nginx.cn/install" target="_blank" rel="noopener">Nginx安装</a><br><a href="http://blog.jobbole.com/113555/" target="_blank" rel="noopener">Nginx 教程 （1）：基本概念</a><br><a href="http://blog.jobbole.com/113572/" target="_blank" rel="noopener">Nginx 教程（2）：性能</a><br><a href="http://www.yduba.com/biancheng-5301527036.html" target="_blank" rel="noopener">nginx 配置 Rewrite， 并使URL不跳转</a><br><a href="https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/" target="_blank" rel="noopener">If Is Evil</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx gzip压缩</title>
    <url>/article/5d2c/</url>
    <content><![CDATA[<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">gzip</span>                <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span>     <span class="number">1k</span>;</span><br><span class="line">    <span class="attribute">gzip_buffers</span>        <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line">    <span class="attribute">gzip_http_version</span>   <span class="number">1</span>.<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span>     <span class="number">6</span>;</span><br><span class="line">    <span class="attribute">gzip_types</span>          text/plain application/javascript application/x-javascript text/javascript text/xml text/css font/ttf font/otf image/svg+xml;</span><br><span class="line">    <span class="attribute">gzip_disable</span>        <span class="string">"MSIE [1-6]\."</span>;</span><br><span class="line">    <span class="attribute">gzip_vary</span>           <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* ^.+\.(eot|ttf|otf|woff|svg)$</span> &#123;</span><br><span class="line">    <span class="attribute">access_log</span>  <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">expires</span>     max;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="http://www.cnblogs.com/share123/p/5534531.html" target="_blank" rel="noopener">Nginx 开启gzip 压缩</a><br><a href="http://www.cnblogs.com/mitang/p/4477220.html" target="_blank" rel="noopener">Nginx开启Gzip压缩大幅提高页面加载速度</a><br><a href="http://www.cnblogs.com/zhongxia/p/5901027.html" target="_blank" rel="noopener">Nginx开启 gzip和缓存</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>gzip</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx location配置优化</title>
    <url>/article/fd83/</url>
    <content><![CDATA[<blockquote>
<p>应用场景: 访问domain.com/xxx，返回project/templates/xxx.html内容</p>
</blockquote>
<p>原配置文件如下:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">root</span> /home/wayde/project/templates;</span><br><span class="line"><span class="attribute">location</span> /aaa &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> /aaa.html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /bbb &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> /bbb.html;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  	<span class="attribute">try_files</span> /app.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>方案1</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">root</span> /home/wayde/project/templates;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* ^/(\w+)/?.*$</span> &#123;</span><br><span class="line">	<span class="attribute">try_files</span> <span class="variable">$uri</span> /<span class="variable">$1</span>.html /app.html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">	<span class="attribute">try_files</span> <span class="variable">$uri</span> /app.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>方案2</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">root</span> /home/wayde/project/templates;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* ^/(\w+)/?.*$</span> &#123;</span><br><span class="line">	<span class="attribute">try_files</span> <span class="variable">$uri</span> /<span class="variable">$1</span>.html /app.html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="variable">@other</span> &#123;</span><br><span class="line">	<span class="attribute">try_files</span> <span class="variable">$uri</span> /app.html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">	<span class="attribute">try_files</span> <span class="variable">$uri</span> /app.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>方案3</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">root</span> /home/wayde/project/templates;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* ^/(\w+)/?.*$</span> &#123;</span><br><span class="line">	<span class="attribute">try_files</span> <span class="variable">$uri</span> /<span class="variable">$1</span>.html /; <span class="comment">#ubuntu nginx1.4.6不支持最后面的"/", nginx1.10.3以上版本支持支持</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">	<span class="attribute">try_files</span> <span class="variable">$uri</span> /app.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx实现负载均衡</title>
    <url>/article/7fb0/</url>
    <content><![CDATA[<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在http节点下，添加upstream节点</span></span><br><span class="line"><span class="attribute">upstream</span>  my_service &#123;</span><br><span class="line">    <span class="attribute">server</span>	<span class="number">192.168.1.23:8080</span>	weight=<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">server</span>  <span class="number">192.168.1.24:8080</span>	weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span>  <span class="number">192.168.1.25:8080</span>	weight=<span class="number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将server节点下的location节点中的proxy_pass配置为：http:// + upstream名称</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://my_service;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="upstream分配策略">upstream分配策略</span></h4><ul>
<li><p>轮询(默认)</p>
<p><code>upstream按照轮询（默认）方式进行负载，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。适用于图片服务器集群和纯静态页面服务器集群</code></p>
</li>
<li><p>weight(权重)</p>
<p><code>指定轮询几率，weight和访问比率成正比，用于服务器性能不均的情况。</code></p>
</li>
<li><p>ip_hash</p>
<p><code>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器</code></p>
</li>
<li><p>fair(第三方插件)</p>
<p><code>按服务器的响应时间来分配请求，响应时间短的优先分配</code></p>
</li>
<li><p>url_hash(第三方插件)</p>
<p><code>按访问url的hash结果来分配请求，使每个url定向到同一个服务器，服务器为缓存时比较有效</code></p>
</li>
</ul>
<p>注意：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> resinserver &#123;</span><br><span class="line">	<span class="attribute">server</span> <span class="number">10.0.0.10:7777</span>; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">10.0.0.11:8888</span>; </span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span>; </span><br><span class="line">    <span class="attribute">hash_method</span> crc32; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="upstream-状态值">upstream 状态值</span></h4><ul>
<li><p>down</p>
<p><code>表示当前的server暂时不参与负载</code></p>
</li>
<li><p>weight</p>
<p><code>默认为1，weight越大，负载的权重就越大</code></p>
</li>
<li><p>max_fails</p>
<p><code>允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误.</code></p>
</li>
<li><p>fail_timeout</p>
<p><code>max_fails次失败后，暂停的时间</code></p>
</li>
<li><p>backup</p>
<p><code>其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻</code></p>
</li>
</ul>
<p>参考资料:<br><a href="https://www.cnblogs.com/freeweb/p/6513973.html" target="_blank" rel="noopener">配置nginx到后端服务器负载均衡</a><br><a href="https://www.linuxidc.com/Linux/2015-03/115207.htm" target="_blank" rel="noopener">Nginx配置upstream实现负载均衡</a><br><a href="http://blog.csdn.net/happydream_C/article/details/54943802" target="_blank" rel="noopener">nginx基本配置与参数说明以及Nginx中的upstream轮询机制介绍</a><br><a href="http://debugo.com/nginx-web-upstream/" target="_blank" rel="noopener">Nginx基本服务与upstream配置详解</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 应用获取真实ip地址</title>
    <url>/article/7dfb/</url>
    <content><![CDATA[<p>nginx配置如下:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一层代理</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">   	<span class="attribute">proxy_pass</span> http://a-sz-s-5;</span><br><span class="line">   	<span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">   	<span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二层代理</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /api/.*</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)/$</span> /<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$http_x_real_ip</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:5001;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flask 获取用户真实地址</span></span><br><span class="line">request.environ.get(<span class="string">'HTTP_X_REAL_IP'</span>, request.remote_addr)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 支持MP4视频</title>
    <url>/article/804d/</url>
    <content><![CDATA[<ol>
<li><p><code>sudo apt-get update</code></p>
</li>
<li><p><code>sudo apt-get install nginx-extras</code></p>
</li>
<li><p>配置文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.mp4$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /home/wayde/project/static;</span><br><span class="line">    mp4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>mp4</tag>
      </tags>
  </entry>
  <entry>
    <title>用户自定义二级域名实现</title>
    <url>/article/bd02/</url>
    <content><![CDATA[<blockquote>
<p>场景一:</p>
<ol>
<li>访问abc.realibox.com实际显示pandll.com站点内容，但地址栏仍然显示abc.pandll.com</li>
<li>nginx检测abc未配置时，重定向到pandll.com，地址栏也显示pandll.com</li>
</ol>
<p>场景二:</p>
<ol>
<li>访问abc.pandll.com实际显示pandll.com/u/abc页面内容，地址栏仍然显示abc.pandll.com</li>
<li>web检测abc未配置(即/u/abc不存在)时，跳转至pandll.com，地址栏也显示pandll.com</li>
</ol>
</blockquote>
<a id="more"></a>
<ol>
<li><p>利用<strong>泛域名解析</strong>，将<code>*.pandll.com</code>解析<code>pandll.com</code>站点相同IP地址</p>
</li>
<li><p>Nginx配置如下</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>     pandll.com;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">try_files</span> <span class="variable">$uri</span> /app.html;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 场景一</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="regexp">*.pandll.com</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://pandll.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 场景二</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="regexp">*.pandll.com</span>;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$http_host</span> <span class="regexp">~* "^(.*?)\.pandll\.com$")</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://pandll.com/u/<span class="variable">$1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://pandll.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>参考资料:<br><a href="http://blog.csdn.net/Metropolis_cn/article/details/73613022" target="_blank" rel="noopener">nginx实现二级域名转发</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 监听多ip端口</title>
    <url>/article/847e/</url>
    <content><![CDATA[<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">10.11.26.3:80</span>;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">127.0.0.1:80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>     www.domain.com;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#listen" target="_blank" rel="noopener">nginx docs</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 配置静态目录</title>
    <url>/article/c2f6/</url>
    <content><![CDATA[<ul>
<li><p>配置静态目录</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /docs &#123;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">alias</span> /home/wayde/docs/operation;</span><br><span class="line">    <span class="attribute">index</span> op-ppt.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>root与alias</p>
<p>访问 domain/docs/test.html，即请求/home/www/project/docs/test.html</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /docs/ &#123;</span><br><span class="line">  <span class="attribute">root</span> /home/www/project;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问domain/docs/test.html，即请求/home/www/project/static/test.html</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /docs/ &#123;</span><br><span class="line">  <span class="attribute">alias</span> /home/www/project/static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>使用alias时目录名后面一定要加“/”</li>
<li>一般情况下，在location /中配置root，在location /other中配置alias</li>
</ol>
</li>
<li><p>404 Not Found</p>
<p>详见参考资料</p>
</li>
<li><p>403 Forbidden</p>
<blockquote>
<p>表示你在请求一个资源文件但是nginx不允许你查看</p>
<p>哪些场景需要返回403状态码的场景?</p>
<p>1.网站禁止特定的用户访问所有内容，例：网站屏蔽某个ip访问。</p>
<p>2.访问禁止目录浏览的目录，例：设置autoindex off后访问目录</p>
<p>3.用户访问只能被内网访问的文件</p>
<p>1.权限配置不正确</p>
<p>​    解决办法:设置所有父目录为755权限，设置文件为644权限可以避免权限不正确。</p>
<ol>
<li><p>目录索引设置错误（index指令配置）</p>
<p>当访问该网站的时，nginx 会按照 index.html，index.htm ，index.php 的先后顺序在根目录中查找文件。如果这三个文件都不存在，那么nginx就会返回403 Forbidden。</p>
<p>如果index中不定义 index.php ，nginx直接返回403 Forbidden而不会去检查index.php是否存在</p>
<p>解决办法:添加首页文件到index指令，常见的是index.php，index.jsp，index.jsp或者自定义首页文件</p>
</li>
</ol>
</blockquote>
</li>
<li><p>自动去掉url结尾斜杠(/)</p>
<blockquote>
<p>rewrite ^/(.*)/\$ /$1 permanent</p>
</blockquote>
</li>
</ul>
<p>参考资料:<br><a href="http://blog.csdn.net/line_aijava/article/details/71473793" target="_blank" rel="noopener">Nginx 配置静态文件404问题</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx错误页面配置</title>
    <url>/article/1464/</url>
    <content><![CDATA[<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">error_page</span>  <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line"><span class="attribute">location</span> =/<span class="number">404</span>.html &#123;</span><br><span class="line">	<span class="attribute">root</span>    /home/blog/blog.pandll.com/blog/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">error_page</span>  <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line"><span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">  <span class="attribute">root</span>   html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#location / &#123;</span></span><br><span class="line"><span class="comment">#    autoindex on;</span></span><br><span class="line"><span class="comment">#    try_files $uri $uri/ =404;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"><span class="comment">#try_files用法</span></span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="http://www.yunweipai.com/archives/22238.html" target="_blank" rel="noopener">Nginx实现404页面的几种方法，你知道几种</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Alembic命令</title>
    <url>/article/86c9/</url>
    <content><![CDATA[<blockquote>
<p>Alembic—一款数据库版本控制工具</p>
</blockquote>
<ol>
<li><p>安装Alembic</p>
<p><code>pip3 install alembic</code></p>
</li>
<li><p>初始化项目</p>
<p><code>alembic init project_name</code></p>
</li>
<li><p>查看当前版本</p>
<p><code>alembic current</code></p>
</li>
<li><p>查看当前版本详情</p>
<p><code>alembic show</code></p>
</li>
<li><p>查看历史版本列表</p>
<p><code>alembic history</code></p>
</li>
<li><p>升级到指定版本</p>
<p><code>alembic upgrade 版本号</code></p>
</li>
<li><p>升级到最新版本(默认)</p>
<p><code>alembic upgrade head</code></p>
</li>
<li><p>降级到指定版本</p>
<p><code>alembic downgrade 版本号</code></p>
</li>
<li><p>降级到最初版本</p>
<p><code>alembic downgrade base</code></p>
</li>
<li><p>离线更新(生成sql)</p>
<p><code>alembic upgrade 版本号 --sql &gt; migration.sql</code></p>
</li>
<li><p>从特定起始版本生成sql</p>
<p><code>alembic upgrade 版本一:版本二 --sql &gt; migration.sql</code></p>
</li>
</ol>
<p>参考文档:<br><a href="http://alembic.zzzcomputing.com/en/latest/" target="_blank" rel="noopener">官方手册</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Alembic</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU、超线程与进程、线程</title>
    <url>/article/1d3c/</url>
    <content><![CDATA[<h2><span id="cpu与超线程">CPU与超线程</span></h2><h3><span id="中央处理器central-processing-unit">中央处理器(Central Processing Unit)</span></h3><p>维基百科如此介绍:</p>
<blockquote>
<p>计算机的主要设备之一，功能主要是解释计算机指令以及处理计算机软件中的数据。</p>
<p>计算机的可编程性主要是指对中央处理器的编程。</p>
<p>中央处理器、内部存储器和输入/输出设备是现代电脑的三大核心部件。</p>
</blockquote>
<p><em>每个单位时间内，一个单运行管线的CPU只能处理一个线程(操作系统]: thread)</em></p>
<h3><span id="超线程hyper-threading">超线程(Hyper-Threading)</span></h3><p>维基百科如此介绍:</p>
<blockquote>
<p>英特尔研发的一种技术，于2002年发布。超线程技术原先只应用于Xeon[至强]处理器中，当时称为“Super-Threading”。之后陆续应用在Pentium 4[奔腾4] HT中。</p>
<p>通过此技术，英特尔实现在一个<strong>实体CPU</strong>中，提供两个<strong>逻辑线程</strong>。之后的Pentium D[奔腾D]纵使不支持超线程技术，但就集成了两个实体核心，所以仍会见到两个线程。超线程的未来发展，是提升处理器的逻辑线程。英特尔于2016年发布的Core i7-6950X便是将10核心的处理器，加上超线程技术，使之成为20个逻辑线程的产品。英特尔表示，超线程技术让Pentium 4 HT处理器增加5%的裸晶面积，就可以换来15%~30%的性能提升。</p>
<p>但实际上，在某些程序或未对多线程编译的程序而言，超线程反而会降低性能。除此之外，超线程技术亦要操作系统的配合，普通支持多处理器技术的系统亦未必能充分发挥该技术。</p>
</blockquote>
<p><em>HT技术是在CPU内部仅复制必要的资源、让两个线程可同时运行；在一单位时间内处理两个线程的工作，模拟实体双核心、双线程运作</em></p>
<p><em>既然是模拟，性能肯定比不上两个物理核</em></p>
<a id="more"></a>
<h2><span id="进程与线程">进程与线程</span></h2><h3><span id="进程process">进程(Process)</span></h3><p>维基百科如此介绍:</p>
<blockquote>
<p>计算机中已运行程序的实体。进程为曾经是分时系统的基本运作单位。</p>
<p>在面向进程设计的系统(如早期的UNIX，Linux2.4及更早的版本)中，进程是程序的基本执行实体。</p>
<p>在面向线程设计的系统(如当代多数操作系统、Linux2.6及更新的版本)中，进程本身不是基本运行单位，而是线程的容器。</p>
<p>程序本身只是指令、数据及其组织形式的描述，进程才是程序（那些指令和数据）的真正运行实例。若干进程有可能与同一个程序相关系，且每个进程皆可以同步（循序）或异步(平行)的方式独立运行。</p>
<p>现代计算机系统可在同一段时间内以进程的形式将多个程序加载到存储器中，并借由时间共享(或称时分复用），以在一个处理器上表现出同时(平行性)运行的感觉。</p>
<p>同样的，使用多线程技术(多线程即每一个线程都代表一个进程内的一个独立执行上下文)的操作系统或计算机架构，同样程序的平行线程，可在多CPU主机或网络上真正同时运行(在不同的CPU上)。</p>
</blockquote>
<p><em>进程是操作系统进行资源(包括cpu、内存、磁盘IO等)分配的最小单位</em></p>
<h3><span id="线程thread">线程(Thread)</span></h3><p>维基百科如此介绍:</p>
<blockquote>
<p>操作系统能够进行运算调度的最小单位。</p>
<p>它被包含在进程之中，是进程中的实际运作单位。</p>
<p>一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在Unix System V及SunOS中也被称为轻量进程(lightweight processes)，但轻量进程更多指内核线程(kernel thread)，而把用户线程(user thread)称为线程。</p>
<p>线程是独立调度和分派的基本单位。</p>
<p>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈(call stack)，自己的寄存器环境(register context)，自己的线程本地存储(thread-local storage)。</p>
<p>一个进程可以有很多线程，每条线程并行执行不同的任务。</p>
<p>在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责IO处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。</p>
</blockquote>
<p><em>线程是cpu调度和分配的基本单位</em></p>
<h3><span id="串行">串行</span></h3><p>串行多个任务，执行时一个执行完再执行另一个</p>
<h3><span id="并发">并发</span></h3><p>多个线程在单个核心运行，同一时间一个线程运行，系统不停切换线程，看起来像同时运行，实际上是线程不停切换</p>
<h3><span id="并行">并行</span></h3><p>每个线程分配给独立的核心，线程同时运行</p>
<h3><span id="进程与线程对比">进程与线程对比</span></h3><table>
<thead>
<tr>
<th style="text-align:center">对比项</th>
<th style="text-align:center">进程</th>
<th style="text-align:center">线程</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">概念</td>
<td style="text-align:center">进程是程序运行的一个实体的运行过程，是系统进行资源分配和调配的一个独立单位</td>
<td style="text-align:center">线程是进程运行和执行的最小调度单位</td>
</tr>
<tr>
<td style="text-align:center">系统开销</td>
<td style="text-align:center">创建撤销切换开销大，资源要重新分配和收回</td>
<td style="text-align:center">仅保存少量寄存器的内容，开销小，在进程的地址空间执行代码</td>
</tr>
<tr>
<td style="text-align:center">拥有资产</td>
<td style="text-align:center">资源拥有的基本单位</td>
<td style="text-align:center">基本上不占资源，仅有不可少的资源(程序计数器，一组寄存器和栈)</td>
</tr>
<tr>
<td style="text-align:center">调度</td>
<td style="text-align:center">资源分配的基本单位</td>
<td style="text-align:center">独立调度分配的单位</td>
</tr>
<tr>
<td style="text-align:center">安全性</td>
<td style="text-align:center">进程间相互独立，互不影响</td>
<td style="text-align:center">线程共享一个进程下面的资源，可以互相通信和影响</td>
</tr>
<tr>
<td style="text-align:center">地址空间</td>
<td style="text-align:center">系统赋予的独立的内存地址空间</td>
<td style="text-align:center">由相关堆栈寄存器和和线程控制表TCB组成，寄存器可被用来存储线程内的局部变量</td>
</tr>
</tbody>
</table>
<h3><span id="线程切换">线程切换</span></h3><ul>
<li>cpu给线程分配时间片(也就是分配给线程的时间)，执行完时间片后会切换都另一个线程。</li>
<li>切换之前会保存线程的状态，下次时间片再给这个线程时才能知道当前状态。</li>
<li>从保存线程A的状态再到切换到线程B时，重新加载线程B的状态的这个过程就叫上下文切换。</li>
<li>而上下切换时会消耗大量的cpu时间。</li>
</ul>
<h3><span id="线程开销">线程开销</span></h3><ul>
<li>上下文切换消耗</li>
<li>线程创建和消亡的开销</li>
<li>线程需要保存维持线程本地栈，会消耗内存</li>
</ul>
<h3><span id="计算密集型">计算密集型</span></h3><ul>
<li>程序主要为复杂的逻辑判断和复杂的运算。</li>
<li>cpu的利用率高，不用开太多的线程，开太多线程反而会因为线程切换时切换上下文而浪费资源。</li>
</ul>
<h3><span id="io密集型">IO密集型</span></h3><ul>
<li>程序主要为IO操作，比如磁盘IO(读取文件)和网络IO(网络请求)。</li>
<li>因为IO操作会阻塞线程，cpu利用率不高，可以开多点线程，阻塞时可以切换到其他就绪线程，提高cpu利用率。</li>
</ul>
<p>Linux下查看cpu相关信息可参考: <a href="/article/7e1/">查看CPU信息</a> 和<a href="/article/ff91/">查看cpu温度信息</a></p>
<p>参考资料:<br><a href="http://bbs.zol.com.cn/diybbs/d231_821332_uid_qq_9rp1y964o048.html" target="_blank" rel="noopener">超线程、多核知识实战，5分钟让你成为CPU专家</a><br><a href="http://www.cnblogs.com/-new/p/7234332.html" target="_blank" rel="noopener">认识cpu、核与线程</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>理论知识</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 常见问题及解决方法</title>
    <url>/article/78df/</url>
    <content><![CDATA[<h4><span id="chrome登录闪退">Chrome登录闪退</span></h4><p>尝试直接访问 chrome://chrome-signin/?source=2 登录</p>
<h4><span id="chrome清除dns-cache">Chrome清除dns cache</span></h4><p>访问<code>chrome://net-internals/#dns</code></p>
<blockquote>
<p>打开chrome://net-internals/#dns 右上角有个箭头，下拉，需要点击Clear cache 和 Flush sockets 两项才能清除</p>
</blockquote>
<h4><span id="chrome-网页截屏">Chrome 网页截屏</span></h4><p>F12  =&gt; Ctrl + Shift + P  =&gt; full size screenshot</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>DataGrip使用</title>
    <url>/article/6374/</url>
    <content><![CDATA[<p>参考资料:<br><a href="http://ywu.iteye.com/blog/2315446" target="_blank" rel="noopener">DataGrip使用入门-安装及数据源管理（一）</a><br><a href="http://ywu.iteye.com/blog/2315449" target="_blank" rel="noopener">DataGrip使用入门-常用设置（二）</a><br><a href="http://ywu.iteye.com/blog/2315495" target="_blank" rel="noopener">DataGrip使用入门-常用操作（三）</a><br><a href="http://ywu.iteye.com/blog/2315501" target="_blank" rel="noopener">DataGrip使用入门-导出数据（四）</a><br><a href="http://ywu.iteye.com/blog/2341838" target="_blank" rel="noopener">DataGrip使用进阶-导航及搜索（一）</a><br><a href="http://ywu.iteye.com/blog/2341844" target="_blank" rel="noopener">DataGrip使用进阶-代码提示及格式化（二）</a><br><a href="http://ywu.iteye.com/blog/2341847" target="_blank" rel="noopener">DataGrip使用进阶-文本编辑器（三）</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>DataGrip</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/article/d79a/</url>
    <content><![CDATA[<ol>
<li><p>查看实例</p>
<p><code>docker ps -a</code></p>
</li>
<li><p>导出镜像</p>
<p><code>sudo docker export &lt;CONTAINER ID&gt; &gt; forum_docker.tar</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码(HTTP Status Code)</title>
    <url>/article/3f0a/</url>
    <content><![CDATA[<h3><span id="1xx-信息">1xx-信息</span></h3><p>信息，服务器收到请求，需要请求者继续执行操作</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th style="text-align:left">名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:left">Continue</td>
<td style="text-align:left">请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</td>
</tr>
<tr>
<td style="text-align:center">101</td>
<td style="text-align:left">Switching Protocols</td>
<td style="text-align:left">服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3><span id="2xx-成功">2xx-成功</span></h3><p>成功，操作被成功接收并处理</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th style="text-align:left">名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">200</td>
<td style="text-align:left">OK</td>
<td style="text-align:left">请求成功。一般用于GET与POST请求</td>
</tr>
<tr>
<td style="text-align:center">201</td>
<td style="text-align:left">Created</td>
<td style="text-align:left">已创建。成功请求并创建了新的资源</td>
</tr>
<tr>
<td style="text-align:center">202</td>
<td style="text-align:left">Accepted</td>
<td style="text-align:left">已接受。已经接受请求，但未处理完成</td>
</tr>
<tr>
<td style="text-align:center">203</td>
<td style="text-align:left">Non-Authoritative Information</td>
<td style="text-align:left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td>
</tr>
<tr>
<td style="text-align:center">204</td>
<td style="text-align:left">No Content</td>
<td style="text-align:left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td>
</tr>
<tr>
<td style="text-align:center">205</td>
<td style="text-align:left">Reset Content</td>
<td style="text-align:left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td>
</tr>
<tr>
<td style="text-align:center">206</td>
<td style="text-align:left">Partial Content</td>
<td style="text-align:left">部分内容。服务器成功处理了部分GET请求</td>
</tr>
</tbody>
</table>
<h3><span id="3xx-重定向">3xx-重定向</span></h3><p>重定向，需要进一步的操作以完成请求</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th style="text-align:left">名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">300</td>
<td style="text-align:left">Multiple Choices</td>
<td style="text-align:left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td>
</tr>
<tr>
<td style="text-align:center">301</td>
<td style="text-align:left">Moved Permanently</td>
<td style="text-align:left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td>
</tr>
<tr>
<td style="text-align:center">302</td>
<td style="text-align:left">Found</td>
<td style="text-align:left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td>
</tr>
<tr>
<td style="text-align:center">303</td>
<td style="text-align:left">See Other</td>
<td style="text-align:left">查看其它地址。与301类似。使用GET和POST请求查看</td>
</tr>
<tr>
<td style="text-align:center">304</td>
<td style="text-align:left">Not Modified</td>
<td style="text-align:left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td>
</tr>
<tr>
<td style="text-align:center">305</td>
<td style="text-align:left">Use Proxy</td>
<td style="text-align:left">使用代理。所请求的资源必须通过代理访问</td>
</tr>
<tr>
<td style="text-align:center">306</td>
<td style="text-align:left">Unused</td>
<td style="text-align:left">已经被废弃的HTTP状态码</td>
</tr>
<tr>
<td style="text-align:center">307</td>
<td style="text-align:left">Temporary Redirect</td>
<td style="text-align:left">临时重定向。与302类似。使用GET请求重定向</td>
</tr>
</tbody>
</table>
<h3><span id="4xx-请求错误">4xx-请求错误</span></h3><p>客户端请求错误，请求包含语法错误或无法完成请求</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th style="text-align:left">名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">400</td>
<td style="text-align:left">Bad Request</td>
<td style="text-align:left">客户端请求的语法错误，服务器无法理解</td>
</tr>
<tr>
<td style="text-align:center">401</td>
<td style="text-align:left">Unauthorized</td>
<td style="text-align:left">请求要求用户的身份认证</td>
</tr>
<tr>
<td style="text-align:center">402</td>
<td style="text-align:left">Payment Required</td>
<td style="text-align:left">保留，将来使用</td>
</tr>
<tr>
<td style="text-align:center">403</td>
<td style="text-align:left">Forbidden</td>
<td style="text-align:left">服务器理解请求客户端的请求，但是拒绝执行此请求</td>
</tr>
<tr>
<td style="text-align:center">404</td>
<td style="text-align:left">Not Found</td>
<td style="text-align:left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td>
</tr>
<tr>
<td style="text-align:center">405</td>
<td style="text-align:left">Method Not Allowed</td>
<td style="text-align:left">客户端请求中的方法被禁止</td>
</tr>
<tr>
<td style="text-align:center">406</td>
<td style="text-align:left">Not Acceptable</td>
<td style="text-align:left">服务器无法根据客户端请求的内容特性完成请求</td>
</tr>
<tr>
<td style="text-align:center">407</td>
<td style="text-align:left">Proxy Authentication Required</td>
<td style="text-align:left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td style="text-align:center">408</td>
<td style="text-align:left">Request Time-out</td>
<td style="text-align:left">服务器等待客户端发送的请求时间过长，超时</td>
</tr>
<tr>
<td style="text-align:center">409</td>
<td style="text-align:left">Conflict</td>
<td style="text-align:left">服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td>
</tr>
<tr>
<td style="text-align:center">410</td>
<td style="text-align:left">Gone</td>
<td style="text-align:left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td>
</tr>
<tr>
<td style="text-align:center">411</td>
<td style="text-align:left">Length Required</td>
<td style="text-align:left">服务器无法处理客户端发送的不带Content-Length的请求信息</td>
</tr>
<tr>
<td style="text-align:center">412</td>
<td style="text-align:left">Precondition Failed</td>
<td style="text-align:left">客户端请求信息的先决条件错误</td>
</tr>
<tr>
<td style="text-align:center">413</td>
<td style="text-align:left">Request Entity Too Large</td>
<td style="text-align:left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td>
</tr>
<tr>
<td style="text-align:center">414</td>
<td style="text-align:left">Request-URI Too Large</td>
<td style="text-align:left">请求的URI过长（URI通常为网址），服务器无法处理</td>
</tr>
<tr>
<td style="text-align:center">415</td>
<td style="text-align:left">Unsupported Media Type</td>
<td style="text-align:left">服务器无法处理请求附带的媒体格式</td>
</tr>
<tr>
<td style="text-align:center">416</td>
<td style="text-align:left">Requested range not satisfiable</td>
<td style="text-align:left">客户端请求的范围无效</td>
</tr>
<tr>
<td style="text-align:center">417</td>
<td style="text-align:left">Expectation Failed</td>
<td style="text-align:left">服务器无法满足Expect的请求头信息</td>
</tr>
</tbody>
</table>
<h3><span id="5xx-服务器错误">5xx-服务器错误</span></h3><p>服务器错误，服务器在处理请求的过程中发生了错误</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th style="text-align:left">名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">500</td>
<td style="text-align:left">Internal Server Error</td>
<td style="text-align:left">服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td style="text-align:center">501</td>
<td style="text-align:left">Not Implemented</td>
<td style="text-align:left">服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td style="text-align:center">502</td>
<td style="text-align:left">Bad Gateway</td>
<td style="text-align:left">充当网关或代理的服务器，从远端服务器接收到了一个无效的请求</td>
</tr>
<tr>
<td style="text-align:center">503</td>
<td style="text-align:left">Service Unavailable</td>
<td style="text-align:left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td>
</tr>
<tr>
<td style="text-align:center">504</td>
<td style="text-align:left">Gateway Time-out</td>
<td style="text-align:left">充当网关或代理的服务器，未及时从远端服务器获取请求</td>
</tr>
<tr>
<td style="text-align:center">505</td>
<td style="text-align:left">HTTP Version not supported</td>
<td style="text-align:left">服务器不支持请求的HTTP协议的版本，无法完成处理</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>HTTP状态码</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/3eeb/</url>
    <content><![CDATA[<h4><span id="c版">C版</span></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="c版">C++版</span></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="javascript版">JavaScript版</span></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  alert(<span class="string">'Hello World'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="java版">Java版</span></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="ruby版">Ruby版</span></h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">puts <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
<h4><span id="sql版">SQL版</span></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'Hello World'</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>
<h4><span id="html版">HTML版</span></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="go版">Go版</span></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="shell版">SHELL版</span></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "Hello World"</span><br></pre></td></tr></table></figure>
<h4><span id="php版">PHP版</span></h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4><span id="python版">Python版</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
  </entry>
  <entry>
    <title>JetBrains系列授权服务器</title>
    <url>/article/f8dd/</url>
    <content><![CDATA[<ul>
<li><p>网络授权服务器</p>
<blockquote>
<p><a href="http://coding.zhxfei.com:6666/" target="_blank" rel="noopener">http://coding.zhxfei.com:6666/</a></p>
<p><a href="http://idea.imsxm.com/" target="_blank" rel="noopener">http://idea.imsxm.com/</a></p>
<p><a href="http://xidea.online" target="_blank" rel="noopener">http://xidea.online</a></p>
</blockquote>
</li>
<li><p>自行搭建JetBrains系列授权服务器</p>
</li>
</ul>
<p>参考资料:<br><a href="http://www.jianshu.com/p/0a44c172d38a" target="_blank" rel="noopener">五分钟搭建Jetbrains家族IDE授权服务器</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 时序图、流程图、甘特图</title>
    <url>/article/6780/</url>
    <content><![CDATA[<p>作为一名程序猿，平时少不了要画各种时序图、流程图。</p>
<p>最开始画流程图用的微软的<code>visio</code>，收费而且不好用，稍微复杂点的一调整半个小时过去了…</p>
<p>后面有用过<code>ProcessOn</code>，一款免费在线作图工具，支持实时协作，体验比<code>visio</code>好点，但调整也相当费事。</p>
<p>直到开始用<code>Markdown</code>，才终于不用<code>Ctrl + ↑↓←→</code>了。</p>
<p>推荐用<a href="/article/526b/">Typora</a>编辑器，已内置插件支持<code>Sequence</code>、<code>Flowchart</code>、<code>Gantt</code>等，只需要开启即可。</p>
<p>如果你用的不是<code>Typora</code>也没有关系，<a href="https://support.typora.io/Draw-Diagrams-With-Markdown/" target="_blank" rel="noopener">这篇文章</a>有说明它用的哪些<code>JS</code>插件。这些插件都是开源的，有详细的说明文档。有道云笔记是支持<code>Sequence</code>的，估计用的同样的插件，语法几乎一样。</p>
<a id="more"></a>
<p>废话不多说，看下效果图</p>
<p><img src="../../resource/images/markdown-sequence-01.png" alt="时序图"></p>
<p><em>标记分类</em></p>
<blockquote>
<p><strong>-</strong>    代表实线，表示主动发送消息<br><strong>–</strong>   代表虚线，表示返回消息<br><strong>&gt;</strong>   代表实心箭头，表示同步消息<br><strong>&gt;&gt;</strong> 代码非实心箭头，表示异步消息</p>
</blockquote>
<p>是不是看上去挺复杂？其实Markdown内容很简单，调整位置也相当方便，剪切粘贴即可。</p>
<p><code>Markdown</code>内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: This is a sequence diagram</span><br><span class="line">participant Browser</span><br><span class="line">participant Box</span><br><span class="line">participant Cloud</span><br><span class="line">participant Celery</span><br><span class="line">participant OSS</span><br><span class="line">Browser -&gt; Box: 1.get upload policy</span><br><span class="line">Note over Box: GET /api/upload_policy/file</span><br><span class="line">Box -&gt; Cloud: get oss policy by cloud</span><br><span class="line">Note over Cloud: POST /api/oss/policy</span><br><span class="line">Cloud -&gt; OSS: get policy</span><br><span class="line">OSS --&gt; Cloud: return policy</span><br><span class="line">Cloud --&gt; Box: return oss upload policy</span><br><span class="line">Box --&gt; Browser: return upload policy</span><br><span class="line">Browser -&gt; OSS: 2.upload file</span><br><span class="line">OSS -&gt;&gt; Cloud: 3.upload file finish, oss callback cloud</span><br><span class="line">Note over Cloud: POST /api/oss_callback</span><br><span class="line">Cloud -&gt; Box: notify box file upload completed</span><br><span class="line">Note over Box: POST /api/notify/file_uploaded</span><br><span class="line">Note right of Box: Box record data</span><br><span class="line">Box -&gt; Cloud: call cloud api, add celery task</span><br><span class="line">Note Over Cloud: POST /api/file/jobs</span><br><span class="line">Cloud -&gt; Celery: add celery task</span><br><span class="line">Cloud --&gt; Box: return 200 ok</span><br><span class="line">Note right of Cloud: update box data</span><br><span class="line">Box --&gt; Cloud: return 200 ok</span><br><span class="line">Cloud --&gt; OSS: return 200 ok</span><br><span class="line">OSS --&gt; Browser: return upload finished</span><br><span class="line">Celery -&gt; Celery: worker do something</span><br><span class="line">Note left of Celery: step 1</span><br><span class="line">Note left of Celery: step 2</span><br><span class="line">Note left of Celery: step 3</span><br><span class="line">Celery -&gt; Box: 4.do something over, notify box</span><br><span class="line">Note over Box: POST /api/file/status</span><br><span class="line">Note right of Box: step 1</span><br><span class="line">Note right of Box: step 2</span><br><span class="line">Note right of Box: step 3</span><br><span class="line">Box --&gt; Celery: return 200 ok</span><br></pre></td></tr></table></figure>
<p>流程图、甘特图与时序图类似，参考文档已经说的很详细了，这里就不举例了。</p>
<p>参考资料:<br><a href="https://support.typora.io/Draw-Diagrams-With-Markdown/" target="_blank" rel="noopener">Draw Diagrams With Markdown</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodeppt安装使用</title>
    <url>/article/b7bd/</url>
    <content><![CDATA[<blockquote>
<p>Nodeppt—一款支持markdown语法的网页版ppt制作工具</p>
</blockquote>
<ol>
<li><p>安装nodeppt</p>
<p><code>npm install -g nodeppt</code></p>
</li>
<li><p>查看版本</p>
<p><code>nodeppt -V</code></p>
</li>
<li><p>创建页面</p>
<p><code>nodeppt create project_name</code></p>
</li>
<li><p>启动本地服务</p>
<p><code>nodeppt start -p 10304 -H 127.0.0.1 -d project_name</code></p>
</li>
<li><p><code>google-chrome-stable http://127.0.0.1:10304</code></p>
</li>
<li><p>导出html</p>
<p><code>nodeppt generate project.md ~/Nodeppt/operation -a</code></p>
</li>
<li><p>快捷键</p>
<blockquote>
<p>按下键盘【N】键：显示[note]</p>
<p>按下键盘【P】键：鼠标左键为画笔</p>
<p>按下键盘【B/Y/R/G/M】：更换颜色</p>
<p>按下【1~4】：更换粗细</p>
<p>按下键盘【C】键：清空画板</p>
<p>按下键盘【W】键：调整宽度</p>
<p>按下键盘【O】键：进入overview模式</p>
</blockquote>
</li>
</ol>
<p>参考资料:<br><a href="http://js8.in/nodeppt/" target="_blank" rel="noopener">nodeppt markdown 演示 - By 三水清</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Nodeppt</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 常用命令</title>
    <url>/article/443/</url>
    <content><![CDATA[<ol>
<li><p>(ubuntu)安装redis服务</p>
<p><code>$ sudo apt-get install -y redis-server</code></p>
</li>
<li><p>启动服务</p>
<p><code>$ sudo service redis-server start</code></p>
</li>
<li><p>停止服务</p>
<p><code>$ sudo service redis-server stop</code></p>
</li>
<li><p>连接redis</p>
<p><code>$ redis-cli -h host -p port</code></p>
<p><code>$ redis-cli</code>默认连接本机6379端口</p>
</li>
<li><p>查看服务器信息</p>
<p><code>redis-cli&gt; info [section]</code></p>
<blockquote>
<p>section可选值有:</p>
<p>default    返回默认选择的信息(默认)</p>
<p>all        返回所有信息</p>
<p>server    Redis 服务器的信息</p>
<p>clients    已连接客户端的信息</p>
<p>memory    服务器的内存信息</p>
<p>persistence     RDB 持久化 和AOF 持久化有关的信息</p>
<p>stats    一般统计信息</p>
<p>replication    主/从复制信息</p>
<p>cpu        CPU 的计算量统计信息</p>
<p>commandstats    各种不同类型的命令的执行统计信息，比如命令执行的次数、命令耗费的 CPU 时间、    执行每个命令耗费的平均 CPU 时间等等</p>
<p>cluster    集群有关的信息</p>
<p>keyspace    数据库相关的统计信息，比如数据库的键数量、数据库已经被删除的过期键数量等</p>
</blockquote>
</li>
<li><p>切换db</p>
<p><code>redis-cli&gt; select 6</code></p>
</li>
<li><p>查看搜索key</p>
<p><code>redis-cli&gt; keys *</code></p>
<p><code>redis-cli&gt; keys session*</code></p>
</li>
<li><p>批量获取key</p>
<p><code>$ redis-cli KEYS session* | xargs redis-cli MGET</code></p>
</li>
<li><p>批量删除key</p>
<p><code>$ redis-cli KEYS session* | xargs redis-cli DEL</code></p>
</li>
<li><p>查看在线客户端信息</p>
<p><code>redis-cli&gt; client list</code></p>
</li>
<li><p>查看当前生效的redis服务器配置</p>
<p><code>redis-cli&gt; config get *</code> </p>
<p><code>redis-cli&gt; config get parameter</code> </p>
</li>
<li><p>查看当前数据库key的数量</p>
<p><code>redis-cli&gt; dbsize</code> </p>
</li>
<li><p>查看当前数据库时间</p>
<p><code>redis-cli&gt; time</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; time</span><br><span class="line">  1) "1522050588"	第一个字符串是当前时间(以 UNIX 时间戳格式表示)</span><br><span class="line">  2) "880633"		第二个字符串是当前这一秒钟已经逝去的微秒数</span><br></pre></td></tr></table></figure>
</li>
<li><p>清空数据(<strong>慎用</strong>)</p>
<p>当前库</p>
<p><code>redis-cli&gt; flushdb</code></p>
<p>所有库</p>
<p><code>redis-cli&gt; flushall</code></p>
</li>
<li><p>退出命令行</p>
<p><code>quit</code></p>
</li>
<li><p>查看key对应存储类型</p>
<p><code>redis-cli&gt; type(key)</code></p>
</li>
</ol>
<p>17.查看list类型数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[5]&gt; LLEN key</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[5]&gt; LRANGE key 0 10</span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="http://redisdoc.com/" target="_blank" rel="noopener">Redis 命令参考</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Supervisor 多实例运行</title>
    <url>/article/877c/</url>
    <content><![CDATA[<p>配置文件如下:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:project_name]</span></span><br><span class="line"><span class="attr">command</span>=%(ENV_PYTHON_PATH)s/bin/gunicorn -c %(ENV_SHARED_PATH)s/config/gunicorn.py application:app</span><br><span class="line"><span class="attr">directory</span>=%(ENV_APP_REPOSITORY)s</span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">user</span>=deploy</span><br><span class="line"><span class="attr">stopwaitsecs</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">killasgroup</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">stopasgroup</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[supervisorctl]</span></span><br><span class="line"><span class="attr">serverurl</span>=http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9002</span> #新增行</span><br><span class="line"><span class="attr">logfile</span> = %(ENV_SHARED_PATH)s/log/supervisorctl.log</span><br><span class="line"><span class="attr">pidfile</span> = %(ENV_SHARED_PATH)s/run/supervisorctl.pid</span><br><span class="line"></span><br><span class="line"><span class="section">[supervisord]</span></span><br><span class="line"><span class="attr">logfile</span> = %(ENV_SHARED_PATH)s/log/supervisor.log</span><br><span class="line"><span class="attr">pidfile</span> = %(ENV_SHARED_PATH)s/run/supervisor.pid</span><br><span class="line"></span><br><span class="line"><span class="section">[inet_http_server]</span></span><br><span class="line"><span class="attr">port</span>=:<span class="number">9002</span></span><br><span class="line"></span><br><span class="line"><span class="section">[rpcinterface:supervisor]</span></span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">;[inet_http_server]         ; 侦听在TCP上的socket，Web Server和远程的supervisorctl都要用到他</span></span><br><span class="line">                              不设置的话，默认为不开启。非必须设置</span><br><span class="line"><span class="comment">;port=127.0.0.1:9001        ; 这个是侦听的IP和端口，侦听所有IP用 :9001或*:9001。</span></span><br><span class="line"></span><br><span class="line"><span class="section">[supervisorctl]</span>              <span class="comment">;这个主要是针对supervisorctl的一些配置  </span></span><br><span class="line"><span class="attr">serverurl</span>=unix:///tmp/supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket</span><br><span class="line">                                        路径，注意这个是和前面的[unix_http_server]对应的</span><br><span class="line">                                        默认值就是unix:///tmp/supervisor.sock。。非必须设置</span><br><span class="line"><span class="comment">;serverurl=http://127.0.0.1:9001 ; 这个是supervisorctl远程连接supervisord的时候，用到的TCP socket路径</span></span><br><span class="line">                                   注意这个和前面的[inet_http_server]对应</span><br><span class="line">                                   默认就是http://127.0.0.1:9001。。。非必须项</span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="http://www.cnblogs.com/zhaoding/p/6257363.html" target="_blank" rel="noopener">python supervisor使用</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>apiDoc安装使用</title>
    <url>/article/64f5/</url>
    <content><![CDATA[<blockquote>
<p>apiDoc—一款Restful API的文档自动生成工具</p>
</blockquote>
<p>参考资料:<br><a href="http://apidocjs.com/" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>apiDoc</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装NodeJs</title>
    <url>/article/c1a4/</url>
    <content><![CDATA[<ul>
<li><p>方法一 (推荐)</p>
<ol>
<li><p><code>sudo vim /etc/apt/sources.list.d/nodesource.list</code></p>
<blockquote>
<p>deb <a href="https://deb.nodesource.com/node_6.x" target="_blank" rel="noopener">https://deb.nodesource.com/node_6.x</a> xenial main<br>deb-src <a href="https://deb.nodesource.com/node_6.x" target="_blank" rel="noopener">https://deb.nodesource.com/node_6.x</a> xenial main</p>
</blockquote>
</li>
<li><p><code>curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add -</code></p>
</li>
<li><p><code>sudo apt-get update</code></p>
</li>
<li><p><code>sudo apt-cache policy nodejs</code></p>
</li>
<li><p><code>sudo apt-get install nodejs</code></p>
</li>
<li><p><code>nodejs -v</code></p>
</li>
<li><p><code>npm -v</code></p>
</li>
</ol>
</li>
<li><p>方法二</p>
<p><code>sudo apt-get install -y nodejs-legacy npm</code></p>
</li>
<li><p>方法三</p>
<ol>
<li><p><code>sudo git clone https://github.com/nodejs/node.git</code></p>
</li>
<li><p><code>sudo chmod -R 755 node</code></p>
</li>
<li><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd node</span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>node --version</code></p>
</li>
</ol>
</li>
<li><p>方法四</p>
<ol>
<li><code>curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</code></li>
<li><code>sudo apt-get install -y nodejs</code></li>
<li><code>apt-get install -y build-essential</code></li>
</ol>
</li>
<li><p>升级Node</p>
<p><code>node -v</code></p>
<p><code>sudo npm install -g n</code></p>
<p><code>sudo n v8.0.0</code></p>
<p>切换node版本: <code>npm config delete prefix &amp;&amp; nvm use v8.0.0</code></p>
<p>安装node版本: <code>nvm install v8.0.0</code></p>
</li>
</ul>
<p>遇到问题:</p>
<blockquote>
<p>W: 仓库 “<a href="http://ppa.launchpad.net/chris-lea/node.js/ubuntu" target="_blank" rel="noopener">http://ppa.launchpad.net/chris-lea/node.js/ubuntu</a> xenial Release” 没有 Release 文件。<br>N: 无法认证来自该源的数据，所以使用它会带来潜在风险。<br>N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。<br>E: 无法下载 <a href="http://ppa.launchpad.net/chris-lea/node.js/ubuntu/dists/xenial/main/binary-amd64/Packages" target="_blank" rel="noopener">http://ppa.launchpad.net/chris-lea/node.js/ubuntu/dists/xenial/main/binary-amd64/Packages</a>  404  Not Found</p>
</blockquote>
<p>解决方法:</p>
<p><code>vim /etc/apt/sources.list.d/chris-lea-ubuntu-node_js-xenial.list</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">deb http://ppa.launchpad.net/chris-lea/node.js/ubuntu trusty main</span><br><span class="line">deb-src http://ppa.launchpad.net/chris-lea/node.js/ubuntu trusty main</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>常用IDE快捷键</title>
    <url>/article/c2c1/</url>
    <content><![CDATA[<h4><span id="pycharm-块选择">Pycharm 块选择</span></h4><blockquote>
<p>Alt + Shift + Insert</p>
</blockquote>
<h4><span id="sublime-text-块选择">Sublime-Text 块选择</span></h4><blockquote>
<p>shift + 鼠标右键</p>
</blockquote>
<h4><span id="datagrip查看uml图">DataGrip查看UML图</span></h4><blockquote>
<p>DataBase 选中数据库，点击右键，选择Diagrams =&gt; Show Visualisation</p>
</blockquote>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>DataGrip</tag>
        <tag>PyCharm</tag>
        <tag>Sublime-Text</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL Jsonb类型操作符</title>
    <url>/article/ed71/</url>
    <content><![CDATA[<ol>
<li>::双冒号表示类型转换</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 1::INTEGER;</span><br><span class="line">SELECT 1::VARCHAR;</span><br><span class="line">SELECT &apos;1&apos;::INTEGER;</span><br><span class="line">SELECT &apos;1&apos;::VARCHAR;</span><br><span class="line">SELECT &apos;a&apos;::INTEGER;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Right Operand Type</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@&gt;</code></td>
<td><code>jsonb</code></td>
<td>Does the left JSON value contain within it the right value?</td>
<td><code>&#39;{&quot;a&quot;:1, &quot;b&quot;:2}&#39;::jsonb @&gt; &#39;{&quot;b&quot;:2}&#39;::jsonb</code></td>
</tr>
<tr>
<td><code>&lt;@</code></td>
<td><code>jsonb</code></td>
<td>Is the left JSON value contained within the right value?</td>
<td><code>&#39;{&quot;b&quot;:2}&#39;::jsonb &lt;@ &#39;{&quot;a&quot;:1, &quot;b&quot;:2}&#39;::jsonb</code></td>
</tr>
<tr>
<td><code>?</code></td>
<td><code>text</code></td>
<td>Does the key/element string exist within the JSON value?</td>
<td><code>&#39;{&quot;a&quot;:1, &quot;b&quot;:2}&#39;::jsonb ? &#39;b&#39;</code></td>
</tr>
<tr>
<td>`?</td>
<td>`</td>
<td><code>text[]</code></td>
<td>Do any of these key/element strings exist?</td>
<td>`’{“a”:1, “b”:2, “c”:3}’::jsonb ?</td>
<td>array[‘b’, ‘c’]`</td>
</tr>
<tr>
<td><code>?&amp;</code></td>
<td><code>text[]</code></td>
<td>Do all of these key/element strings exist?</td>
<td><code>&#39;[&quot;a&quot;, &quot;b&quot;]&#39;::jsonb ?&amp; array[&#39;a&#39;, &#39;b&#39;]</code></td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;, &quot;道具&quot;], &quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::jsonb-&gt;&apos;模型分类&apos; @&gt; &apos;[&quot;人物&quot;,&quot;道具&quot;]&apos;;</span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;, &quot;道具&quot;], &quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::jsonb-&gt;&apos;模型分类&apos; @&gt; &apos;[&quot;道具&quot;,&quot;人物&quot;]&apos;;</span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;, &quot;道具&quot;], &quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::jsonb-&gt;&apos;模型分类&apos; @&gt; &apos;[&quot;人物&quot;]&apos;;</span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;, &quot;道具&quot;], &quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::jsonb-&gt;&apos;模型分类&apos; @&gt; &apos;[&quot;道具&quot;]&apos;;</span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;, &quot;道具&quot;], &quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::jsonb-&gt;&apos;模型分类&apos; @&gt; &apos;[&quot;道具&quot;, &quot;不存在&quot;]&apos;;</span><br><span class="line"></span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;, &quot;道具&quot;], &quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::jsonb-&gt;&apos;模型分类&apos; &lt;@ &apos;[&quot;人物&quot;,&quot;道具&quot;]&apos;;</span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;, &quot;道具&quot;], &quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::jsonb-&gt;&apos;模型分类&apos; &lt;@ &apos;[&quot;道具&quot;,&quot;人物&quot;]&apos;;</span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;, &quot;道具&quot;], &quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::jsonb-&gt;&apos;模型分类&apos; &lt;@ &apos;[&quot;人物&quot;]&apos;;</span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;, &quot;道具&quot;], &quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::jsonb-&gt;&apos;模型分类&apos; &lt;@ &apos;[&quot;道具&quot;]&apos;;</span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;, &quot;道具&quot;], &quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::jsonb-&gt;&apos;模型分类&apos; &lt;@ &apos;[&quot;道具&quot;, &quot;不存在&quot;]&apos;;</span><br><span class="line"></span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;,&quot;道具&quot;],&quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::JSONB-&gt;&apos;模型分类&apos; ?| ARRAY[&apos;道具&apos;,&apos;不存在&apos;];</span><br><span class="line">SELECT &apos;&#123;&quot;模型分类&quot;: [&quot;人物&quot;,&quot;道具&quot;],&quot;模型面数&quot;: [&quot;低模&quot;]&#125;&apos;::JSONB-&gt;&apos;模型分类&apos; ?&amp; ARRAY[&apos;道具&apos;,&apos;不存在&apos;];</span><br><span class="line"></span><br><span class="line">SELECT ARRAY[&apos;a&apos;, &apos;b&apos;] @&gt; ARRAY[&apos;a&apos;];</span><br><span class="line">SELECT ARRAY[&apos;a&apos;, &apos;b&apos;] @&gt; ARRAY[&apos;b&apos;];</span><br><span class="line">SELECT ARRAY[&apos;a&apos;, &apos;b&apos;] @&gt; ARRAY[&apos;b&apos;,&apos;c&apos;];</span><br><span class="line"></span><br><span class="line">SELECT ARRAY[&apos;a&apos;, &apos;b&apos;] &lt;@ ARRAY[&apos;a&apos;];</span><br><span class="line">SELECT ARRAY[&apos;a&apos;, &apos;b&apos;] &lt;@ ARRAY[&apos;b&apos;];</span><br><span class="line">SELECT ARRAY[&apos;a&apos;, &apos;b&apos;] &lt;@ ARRAY[&apos;b&apos;,&apos;c&apos;];</span><br><span class="line"></span><br><span class="line">SELECT ARRAY[&apos;a&apos;, &apos;b&apos;] &amp;&amp; ARRAY[&apos;a&apos;];</span><br><span class="line">SELECT ARRAY[&apos;a&apos;, &apos;b&apos;] &amp;&amp; ARRAY[&apos;b&apos;];</span><br><span class="line">SELECT ARRAY[&apos;a&apos;, &apos;b&apos;] &amp;&amp; ARRAY[&apos;b&apos;,&apos;c&apos;];</span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="https://www.postgresql.org/docs/9.4/static/functions-json.html#FUNCTIONS-JSONB-OP-TABLE" target="_blank" rel="noopener">9.15. JSON Functions and Operators</a><br><a href="https://www.postgresql.org/docs/9.5/static/functions-json.html" target="_blank" rel="noopener">JSON Functions and Operators</a><br><a href="https://www.postgresql.org/docs/9.4/static/datatype-json.html" target="_blank" rel="noopener">8.14. JSON Types</a><br><a href="http://schinckel.net/2014/05/25/querying-json-in-postgres/" target="_blank" rel="noopener">Querying JSON in Postgres</a><br><a href="http://www.postgres.cn/docs/9.4/index.html" target="_blank" rel="noopener">PostgreSQL 9.4.4 中文手册</a><br><a href="http://www.postgres.cn/docs/9.4/datatype-json.html#JSON-CONTAINMENT" target="_blank" rel="noopener">PostgreSQL 9.4.4 中文手册 章 8. 数据类型</a><br><a href="https://www.postgresql.org/docs/9.1/static/functions-array.html" target="_blank" rel="noopener">Array Functions and Operators</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Jsonb</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 函数的使用</title>
    <url>/article/3d7a/</url>
    <content><![CDATA[<h3><span id="创建修改函数">创建修改函数</span></h3><p><strong>参数类型不同为不同函数</strong></p>
<h4><span id="返回值为数字类型">返回值为数字类型</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE FUNCTION cal_avg_time(IN starttime TIMESTAMP, IN endtime TIMESTAMP)</span><br><span class="line">  RETURNS NUMERIC</span><br><span class="line">AS $$</span><br><span class="line">SELECT avg(costtime) avgtime</span><br><span class="line">FROM data_statistics</span><br><span class="line">WHERE f_starttime BETWEEN starttime AND endtime</span><br><span class="line">$$ LANGUAGE SQL;</span><br></pre></td></tr></table></figure>
<h4><span id="返回值为table类型">返回值为table类型</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE FUNCTION total_sucfail(IN starttime TIMESTAMP, IN endtime TIMESTAMP)</span><br><span class="line">  RETURNS TABLE(solutions TEXT, sucnum BIGINT, failnum BIGINT)</span><br><span class="line">AS $$</span><br><span class="line">SELECT</span><br><span class="line">  solutions,</span><br><span class="line">  SUM(CASE WHEN f_status = 100</span><br><span class="line">    THEN 1</span><br><span class="line">      ELSE 0 END)  sucnum,</span><br><span class="line">  SUM(CASE WHEN f_status = 100</span><br><span class="line">    THEN 0</span><br><span class="line">      ELSE 1 END)  failnum</span><br><span class="line">FROM data_statistics</span><br><span class="line">WHERE f_starttime BETWEEN starttime AND endtime</span><br><span class="line">  AND f_finishtime BETWEEN starttime AND endtime</span><br><span class="line">GROUP BY solutions</span><br><span class="line">$$ LANGUAGE SQL;</span><br></pre></td></tr></table></figure>
<h3><span id="查看函数">查看函数</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbname=# \df</span><br><span class="line"> Schema |     Name      |                   Result data type                   |                            Argument data types                             |  Type  </span><br><span class="line">--------+---------------+------------------------------------------------------+----------------------------------------------------------------------------+--------</span><br><span class="line"> public | cal_avg_time  | numeric                                              | starttime timestamp without time zone, endtime timestamp without time zone | normal</span><br><span class="line"> public | total_sucfail | TABLE(solutions text, sucnum bigint, failnum bigint) | starttime timestamp without time zone, endtime timestamp without time zone | normal</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure>
<h3><span id="调用函数">调用函数</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT cal_avg_time(&apos;2018-04-01 00:00&apos;, &apos;2018-04-02 00:00&apos;);</span><br><span class="line">SELECT total_sucfail(&apos;2018-04-01 00:00&apos;, &apos;2018-04-02 00:00&apos;);</span><br></pre></td></tr></table></figure>
<p><em>当参数类型为Date时，传入<code>YYYY-MM-DD HH:MM:SS</code>格式字符串不会报错，但是只有<code>YYYY-MM-DD</code>生效</em></p>
<h3><span id="删除函数">删除函数</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbname=# DROP FUNCTION cal_avg_time(timestamp,timestamp);</span><br><span class="line">dbname=# DROP FUNCTION total_sucfail(timestamp,timestamp);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>参考资料:<br><a href="https://www.postgresql.org/docs/9.5/static/sql-createfunction.html" target="_blank" rel="noopener">官方手册</a><br><a href="http://www.jasongj.com/2015/12/27/SQL4_%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B_Store%20Procedure/" target="_blank" rel="noopener">SQL优化（四） PostgreSQL存储过程</a><br><a href="https://my.oschina.net/sucre/blog/410254" target="_blank" rel="noopener">Postgresql中存储过程(函数)调用存储过程(函数)时应用注意的问题</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL ltree扩展</title>
    <url>/article/b6c8/</url>
    <content><![CDATA[<ol>
<li><p>查看是否已安装</p>
<p><code>select * from pg_extension;</code></p>
</li>
<li><p>安装</p>
<p><code>create extension ltree;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Ltree</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL Sequence相关</title>
    <url>/article/d303/</url>
    <content><![CDATA[<ol>
<li><p>创建sequence</p>
<p><code>CREATE SEQUENCE production_id_seq START 547 OWNED BY production.f_id;</code></p>
</li>
<li><p>修改sequence</p>
<p><code>ALTER SEQUENCE production_id_seq OWNED BY production.f_id;</code></p>
</li>
<li><p>设置字段所使用的sequence</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbname=# alter table production alter column f_id set default nextval(&apos;production_id_seq&apos;::regclass);</span><br></pre></td></tr></table></figure>
</li>
<li><p>重置序列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbname=# \d production_id_seq </span><br><span class="line">         Sequence &quot;public.production_id_seq&quot;</span><br><span class="line">    Column     |  Type   |        Value        </span><br><span class="line">---------------+---------+---------------------</span><br><span class="line"> sequence_name | name    | production_id_seq</span><br><span class="line"> last_value    | bigint  | 748</span><br><span class="line"> start_value   | bigint  | 1</span><br><span class="line"> increment_by  | bigint  | 1</span><br><span class="line"> max_value     | bigint  | 9223372036854775807</span><br><span class="line"> min_value     | bigint  | 1</span><br><span class="line"> cache_value   | bigint  | 1</span><br><span class="line"> log_cnt       | bigint  | 0</span><br><span class="line"> is_cycled     | boolean | f</span><br><span class="line"> is_called     | boolean | t</span><br><span class="line">Owned by: public.production.f_id</span><br><span class="line"></span><br><span class="line">dbname=# alter sequence production_id_seq restart with 302;</span><br><span class="line">dbname=# \d production_id_seq</span><br><span class="line">         Sequence &quot;public.production_id_seq&quot;</span><br><span class="line">    Column     |  Type   |        Value        </span><br><span class="line">---------------+---------+---------------------</span><br><span class="line"> sequence_name | name    | production_id_seq</span><br><span class="line"> last_value    | bigint  | 302</span><br><span class="line"> start_value   | bigint  | 1</span><br><span class="line"> increment_by  | bigint  | 1</span><br><span class="line"> max_value     | bigint  | 9223372036854775807</span><br><span class="line"> min_value     | bigint  | 1</span><br><span class="line"> cache_value   | bigint  | 1</span><br><span class="line"> log_cnt       | bigint  | 0</span><br><span class="line"> is_cycled     | boolean | f</span><br><span class="line"> is_called     | boolean | t</span><br><span class="line">Owned by: public.production.f_id</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>参考资料:<br><a href="https://www.zybuluo.com/shanyy/note/822800" target="_blank" rel="noopener">在Postgres里用Sequence</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Sequence</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 删除重导数据库</title>
    <url>/article/5ed8/</url>
    <content><![CDATA[<ol>
<li><p>强制kill数据库活动连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbname=# select pg_terminate_backend(pid) from pg_stat_activity where datname = &apos;dbname&apos; and pid &lt;&gt;pg_backend_pid();</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbname=# drop database dbname;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbname=# create database dbname;</span><br></pre></td></tr></table></figure>
</li>
<li><p>授权给用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbname=# grant all privileges on database dbname to dbuser;</span><br></pre></td></tr></table></figure>
</li>
<li><p>shell命令行删除数据库</p>
<p><code>$ dropdb -h localhost -p 5432 -U postgres dbname</code></p>
</li>
<li><p>shell命令行导入数据库</p>
<p><code>$ psql -h host -U postgres -d dbname &lt; database_export.sql</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL select into from和insert into from</title>
    <url>/article/ee2a/</url>
    <content><![CDATA[<p><code>语句形式为：Insert into Table2(field1,field2,…) select value1,value2,… from Table1</code></p>
<p><code>要求目标表Table2必须存在，由于目标表Table2已经存在，所以我们除了插入源表Table1的字段外，还可以插入常量</code></p>
<p><code>语句形式为：SELECT vale1, value2 into Table2 from Table1</code></p>
<p><code>要求目标表Table2不存在，因为在插入时会自动创建表Table2，并将Table1中指定字段数据复制到Table2中</code></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql 常用SQL</title>
    <url>/article/9bf9/</url>
    <content><![CDATA[<h2><span id="ddl">DDL</span></h2><ol>
<li><p>修改表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table1 RENAME TO table2;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table1 ADD COLUMN f_uid VARCHAR;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table1 DROP COLUMN f_uid;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="dml">DML</span></h2><ol>
<li><p>关联更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE table1</span><br><span class="line">SET content_id = b.f_id</span><br><span class="line">FROM table1 a</span><br><span class="line">  INNER JOIN table2 b ON a.content_id = b.f_content_id</span><br><span class="line">WHERE table1.id = a.id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新<code>Jsonb</code>字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &apos;&#123;&quot;diffuse&quot;: [0.5, 0.5, 0.5, 1], &quot;opacity&quot;: 1, &quot;emissive&quot;: [0, 0, 0, 1]&#125;&apos;::json AS f_phong;</span><br><span class="line">SELECT * FROM table_name WHERE f_phong -&gt;&gt; &apos;diffuse&apos; = &apos;[0.5, 0.5, 0.5, 1]&apos;;</span><br><span class="line"></span><br><span class="line">-- PostgreSQL 9.5</span><br><span class="line">UPDATE table_name SET f_phong = (jsonb_set(to_jsonb(f_phong), &apos;&#123;diffuse&#125;&apos;, &apos;[0, 0, 0, 1]&apos;, false))::json WHERE f_phong-&gt;&gt;&apos;diffuse&apos; = &apos;[0.5, 0.5, 0.5, 1]&apos;;</span><br><span class="line"></span><br><span class="line">-- PostgreSQL 9.5 &amp;&amp; PostgreSQL 9.4</span><br><span class="line">UPDATE table_name</span><br><span class="line">SET f_phong = (replace(f_phong :: TEXT, &apos;&quot;diffuse&quot;: [0.5, 0.5, 0.5, 1]&apos;, &apos;&quot;diffuse&quot;: [0, 0, 0, 1]&apos;)) :: JSON</span><br><span class="line">WHERE f_phong -&gt;&gt; &apos;diffuse&apos; = &apos;[0.5, 0.5, 0.5, 1]&apos;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2><span id="dql">DQL</span></h2><p><em>待更新</em></p>
<h2><span id="dcl">DCL</span></h2><p><em>待更新</em></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 常用命令</title>
    <url>/article/53e0/</url>
    <content><![CDATA[<ol>
<li><p>查看数据库版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> psql -V</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> psql --version</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbname=# select version();</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行查询结果输出到文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbname=# \o filename</span><br><span class="line">dbname=# \o select * from table;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导出tabname表数据的insert语句sql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pg_dump -h localhost -U username -d dbname --table tabname --data-only --column-inserts &gt; tabname_insert.sql</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行常用命令</p>
<blockquote>
<p>\l     show database</p>
<p>\dt    show tables</p>
<p>\di    show index</p>
<p>\du    show users</p>
<p>\df    show functions</p>
<p>\c db_name    use database</p>
<p>\c db_name username serverIP port</p>
<p>\d tablename    show table info</p>
<p>select pg_database_size(‘db_name’);    查看数据库大小</p>
<p>select pg_relation_size(‘table_name’);    查看表大小</p>
<p>select pg_size_pretty(pg_relation_size(‘table_name’));        以KB，MB，GB的方式来查看表大小</p>
<p>select pg_size_pretty(pg_total_relation_size(‘table_name’));        查看表的总大小，包括索引大小</p>
<p>select spcname from pg_tablespace;    查看所有表空间</p>
<p>select pg_size_pretty(pg_tablespace_size(‘pg_default’));    查看表空间大小</p>
<p>\q    quit</p>
</blockquote>
</li>
<li><p>备份数据库</p>
<p><code>$ pg_dump -h host -U username -f ./backup.sql dbname</code></p>
</li>
<li><p>仅备份结构</p>
<p><code>$ pg_dump -h host -U username -f ./backup.sql -s dbname</code></p>
</li>
<li><p>删除数据库</p>
<p><code>$ dropdb -h localhost -p 5432 -U postgres dbname</code></p>
<p><code>dbname=# drop database dbname;</code></p>
</li>
<li><p>删除活动连接</p>
<p><code>dbname=# select pg_terminate_backend(pid) from pg_stat_activity where datname = &#39;dbname&#39; and pid &lt;&gt;pg_backend_pid()</code></p>
</li>
<li><p>创建数据库</p>
<p><code>dbname=# create database dbname owner username;</code></p>
</li>
<li><p>修改数据库</p>
<p><code>dbname=# alter database dbname owner to new_user;</code></p>
</li>
<li><p>分配权限</p>
<p><code>dbname=# grant all privileges on database dbname to user;</code></p>
</li>
<li><p>恢复数据库</p>
<p><code>$ psql -h localhost -U postgres -d dbname &lt; backup.sql</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL 显示/隐式提交</title>
    <url>/article/51ba/</url>
    <content><![CDATA[<ol>
<li><p>查看当前是否自动提交</p>
<p><code>\echo :AUTOCOMMIT</code></p>
</li>
<li><p>关闭/开启自动提交</p>
<p><code>\set AUTOCOMMIT off/on</code></p>
</li>
<li><p>手动处理事务</p>
<p><code>begin;</code></p>
<p><code>do dml...</code></p>
<p><code>rollback;</code></p>
<p><code>end;</code> or <code>commit;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Ltree</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql 集合处理</title>
    <url>/article/cdfa/</url>
    <content><![CDATA[<ul>
<li>union 并集</li>
<li>intersect 交集</li>
<li>except 差集</li>
</ul>
<p><a href="http://blog.csdn.net/luojinbai/article/details/44618433" target="_blank" rel="noopener">PostgreSQL UNION[ALL],INTERSECT [ALL],EXCEPT [ALL]</a></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python SFTP上传本地目录到远程服务器</title>
    <url>/article/ce0d/</url>
    <content><![CDATA[<p>最近有个需求，需要将本地目录上传到远程服务器，保持目录层级关系不变。</p>
<p>马上想到用过的<code>Paramiko</code>模块，但发现<code>Paramiko</code>只支持文件上传，而不支持目录上传。</p>
<blockquote>
<p><code>Paramiko</code>是一个用Python语言写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。</p>
<p><code>Paramiko</code>支持Linux、Solaris、BSD、MacOS X、Windows等平台通过SSH从一个平台连接到另外一个平台。利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输。</p>
</blockquote>
<p>一番尝试实现后，在此记录下，代码如下:</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">REMOTE_HOST = <span class="string">"remote_host"</span></span><br><span class="line">REMOTE_USERNAME = <span class="string">"remote_username"</span></span><br><span class="line">REMOTE_PASSWORD = <span class="string">"remote_password"</span></span><br><span class="line">LOCAL_FOLDER = <span class="string">"local_folder_path"</span></span><br><span class="line">REMOTE_FOLDER = <span class="string">"remote_folder_path"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sftp_upload_whole_folder</span><span class="params">(client, local_folder, remote_folder)</span>:</span></span><br><span class="line">    sftp = client.open_sftp()</span><br><span class="line">    root_path = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">for</span> path, dirs, files <span class="keyword">in</span> os.walk(local_folder):</span><br><span class="line">        root_path = path <span class="keyword">if</span> root_path <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> root_path</span><br><span class="line">        remote_path = path.replace(root_path, remote_folder)</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sftp.listdir(os.path.join(remote_path, d))</span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                sftp.mkdir(os.path.join(remote_path, d))</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            sftp.put(os.path.join(path, f), os.path.join(remote_path, f))</span><br><span class="line">    sftp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = paramiko.SSHClient()</span><br><span class="line">client.load_host_keys(os.path.expanduser(os.path.join(<span class="string">"~"</span>, <span class="string">".ssh"</span>, <span class="string">"known_hosts"</span>)))</span><br><span class="line">client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">client.connect(hostname=REMOTE_HOST, username=REMOTE_USERNAME, password=REMOTE_PASSWORD)</span><br><span class="line">client.exec_command(<span class="string">"mkdir -p &#123;&#125;"</span>.format(REMOTE_FOLDER))</span><br><span class="line">sftp_upload_whole_folder(client, LOCAL_FOLDER, REMOTE_FOLDER)</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ol>
<li><p><code>REMOTE_HOST</code>如果设置为<code>localhost</code>，需要将本机公钥写入<code>authorized_keys</code></p>
<p><code>$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></p>
<p>否则会出现<code>paramiko.ssh_exception.BadAuthenticationType: (&#39;Bad authentication type&#39;, [&#39;publickey&#39;]) (allowed_types=[&#39;publickey&#39;])</code>错误，可通过<code>$ ssh -v host</code>查找具体原因。</p>
</li>
<li><p><code>LOCAL_FOLDER</code>、<code>REMOTE_FOLDER</code>路径结尾不需要斜杠<code>/</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>SFTP</tag>
        <tag>Paramiko</tag>
      </tags>
  </entry>
  <entry>
    <title>Python logging模块</title>
    <url>/article/1e72/</url>
    <content><![CDATA[<h3><span id="logging-format">logging format</span></h3><table>
<thead>
<tr>
<th>%(name)s</th>
<th>Logger的名字</th>
</tr>
</thead>
<tbody>
<tr>
<td>%(levelno)s</td>
<td>数字形式的日志级别</td>
</tr>
<tr>
<td>%(levelname)s</td>
<td>文本形式的日志级别</td>
</tr>
<tr>
<td>%(pathname)s</td>
<td>调用日志输出函数的模块的完整路径名，可能没有</td>
</tr>
<tr>
<td>%(filename)s</td>
<td>调用日志输出函数的模块的文件名</td>
</tr>
<tr>
<td>%(module)s</td>
<td>调用日志输出函数的模块名</td>
</tr>
<tr>
<td>%(funcName)s</td>
<td>调用日志输出函数的函数名</td>
</tr>
<tr>
<td>%(lineno)d</td>
<td>调用日志输出函数的语句所在的代码行</td>
</tr>
<tr>
<td>%(created)f</td>
<td>当前时间，用UNIX标准的表示时间的浮点数表示</td>
</tr>
<tr>
<td>%(relativeCreated)d</td>
<td>输出日志信息时的，自Logger创建以来的毫秒数</td>
</tr>
<tr>
<td>%(asctime)s</td>
<td>字符串形式的当前时间。默认格式是“2003-07-08 16:49:45,896”。逗号后面的是毫秒</td>
</tr>
<tr>
<td>%(thread)d</td>
<td>线程ID。可能没有</td>
</tr>
<tr>
<td>%(threadName)s</td>
<td>线程名。可能没有</td>
</tr>
<tr>
<td>%(process)d</td>
<td>进程ID。可能没有</td>
</tr>
<tr>
<td>%(message)s</td>
<td>用户输出的消息</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>logging</tag>
      </tags>
  </entry>
  <entry>
    <title>Python pip命令介绍</title>
    <url>/article/bf2e/</url>
    <content><![CDATA[<h3><span id="pip-介绍">pip 介绍</span></h3><p><code>pip</code>是一个<code>Python</code>语言开发的命令行程序，用来安装、管理<code>Python Package</code>。</p>
<h3><span id="pip-安装">pip 安装</span></h3><p><code>$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</code></p>
<p><code>$ python get-pip.py</code></p>
<blockquote>
<p>–no-setuptools  不安装<code>setuptools</code></p>
<p>–no-wheel  不安装<code>wheel</code></p>
</blockquote>
<h4><span id="ubuntu-安装pip3">ubuntu 安装pip3</span></h4><p><code>$ sudo apt-get install python3-pip</code></p>
<a id="more"></a>
<h4><span id="升级pip">升级pip</span></h4><p><code>$ pip install --upgrade/U pip</code></p>
<p>更多安装参数配置可参考<a href="https://pip.pypa.io/en/stable/installing/#" target="_blank" rel="noopener">pip Installation</a></p>
<h3><span id="pip-用法">pip 用法</span></h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pip [options] &lt;requirement specifier&gt; [package-index-options] ...</span><br><span class="line">pip [options] -r &lt;requirements file&gt; [package-index-options] ...</span><br><span class="line">pip [options] [-e] &lt;vcs project url&gt; ...</span><br><span class="line">pip [options] [-e] &lt;local project path&gt; ...</span><br><span class="line">pip [options] &lt;archive url/path&gt; ...</span><br></pre></td></tr></table></figure>
<h4><span id="显示已安装package列表">显示已安装<code>Package</code>列表</span></h4><p><code>$ pip list</code></p>
<h4><span id="显示哪些package需要更新">显示哪些<code>Package</code>需要更新</span></h4><p><code>$ pip list --outdated</code></p>
<h4><span id="仅下载package">仅下载<code>Package</code></span></h4><p><code>$ pip download package_name</code></p>
<h4><span id="查看package信息">查看<code>Package</code>信息</span></h4><p><code>$ pip show package_name</code></p>
<h4><span id="查看安装package时安装了哪些文件">查看安装<code>Package</code>时安装了哪些文件</span></h4><p><code>$ pip show --file package_name</code></p>
<h4><span id="搜索package">搜索<code>Package</code></span></h4><p><code>$ pip search package_name</code></p>
<h4><span id="检查package依赖">检查<code>Package</code>依赖</span></h4><p><code>$ pip check package_name</code></p>
<h4><span id="安装指定package">安装指定<code>Package</code></span></h4><h5><span id="最新版本默认">最新版本(默认)</span></h5><p><code>$ pip install package_name</code></p>
<h5><span id="指定版本">指定版本</span></h5><p><code>$ pip install package_name==3.2.0</code></p>
<h5><span id="不低于某个版本">不低于某个版本</span></h5><p><code>$ pip install &#39;package_name&gt;=3.0.0&#39;</code></p>
<h4><span id="升级package">升级<code>Package</code></span></h4><p><code>$ pip install --upgrade/U package_name</code></p>
<h4><span id="批量安装package">批量安装<code>Package</code></span></h4><p><code>$ pip install -r requirements.txt</code></p>
<h4><span id="安装package到指定用户目录">安装<code>Package</code>到指定用户目录</span></h4><p><code>$ pip install --user package_name</code></p>
<h4><span id="从vcs安装包">从VCS安装包</span></h4><p>VCS即版本控制系统(Version Control Systems)，如Git、Svn等。</p>
<p><code>$ pip install git+https://github.com/Wayde2014/sphere2cube.git@master</code></p>
<p>更多用法<a href="https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support" target="_blank" rel="noopener">请点击</a></p>
<h4><span id="导出已安装包到requirements文件">导出已安装包到requirements文件</span></h4><p><code>$ pip freeze &gt; requirements.txt</code></p>
<h4><span id="使用第三方源">使用第三方源</span></h4><p>第三方源:</p>
<blockquote>
<p><a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a><br><a href="http://pypi.v2ex.com/simple" target="_blank" rel="noopener">http://pypi.v2ex.com/simple</a><br><a href="http://mirrors.tuna.tsinghua.edu.cn/pypi/simple" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/pypi/simple</a><br><a href="http://pypi.hustunique.com/" target="_blank" rel="noopener">http://pypi.hustunique.com/</a><br><a href="http://pypi.sdutlinux.org/" target="_blank" rel="noopener">http://pypi.sdutlinux.org/</a><br><a href="http://pypi.mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/</a></p>
</blockquote>
<h5><span id="命令行">命令行</span></h5><p><code>$ pip install -i http://pypi.douban.com/simple</code></p>
<h5><span id="配置文件">配置文件</span></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir <span class="variable">$HOME</span>/.pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; <span class="variable">$HOME</span>/.pip/pip.conf &lt;&lt; EOF</span></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.douban.com/simple</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h4><span id="pip设置自动补全">pip设置自动补全</span></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip completion --zsh &gt;&gt; ~/.zshrc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.zshrc</span></span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="https://pip.pypa.io/en/stable/reference/pip_install/" target="_blank" rel="noopener">pip官方参考指南</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
        <tag>pip3</tag>
      </tags>
  </entry>
  <entry>
    <title>创建pyenv virtualenv项目环境</title>
    <url>/article/d65b/</url>
    <content><![CDATA[<blockquote>
<p>pyenv : Python版本管理器</p>
<p>virtualenv : Python虚拟环境</p>
</blockquote>
<ol>
<li><p>安装python</p>
<p><code>pyenv install 3.5.3 -v</code></p>
<p><code>pyenv rehash</code></p>
</li>
<li><p>创建虚拟环境</p>
<p><code>pyenv virtualenv 3.5.3 env_box_server_py3</code></p>
</li>
<li><p>设置环境</p>
<p><code>pyenv local env_box_server_py3</code></p>
</li>
<li><p>安装python依赖包</p>
<p><code>pip3 install -r requirements.txt</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 判断字符串是否数字</title>
    <url>/article/ac2a/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="string">"1"</span>  <span class="comment">#unicode</span></span><br><span class="line">num.isdigit()   <span class="comment"># True</span></span><br><span class="line">num.isdecimal() <span class="comment"># True</span></span><br><span class="line">num.isnumeric() <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">num = <span class="string">"1"</span> <span class="comment"># 全角</span></span><br><span class="line">num.isdigit()   <span class="comment"># True</span></span><br><span class="line">num.isdecimal() <span class="comment"># True</span></span><br><span class="line">num.isnumeric() <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">num = <span class="string">b"1"</span> <span class="comment"># byte</span></span><br><span class="line">num.isdigit()   <span class="comment"># True</span></span><br><span class="line">num.isdecimal() <span class="comment"># AttributeError 'bytes' object has no attribute 'isdecimal'</span></span><br><span class="line">num.isnumeric() <span class="comment"># AttributeError 'bytes' object has no attribute 'isnumeric'</span></span><br><span class="line"></span><br><span class="line">num = <span class="string">"IV"</span> <span class="comment"># 罗马数字</span></span><br><span class="line">num.isdigit()   <span class="comment"># True</span></span><br><span class="line">num.isdecimal() <span class="comment"># False</span></span><br><span class="line">num.isnumeric() <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">num = <span class="string">"四"</span> <span class="comment"># 汉字</span></span><br><span class="line">num.isdigit()   <span class="comment"># False</span></span><br><span class="line">num.isdecimal() <span class="comment"># False</span></span><br><span class="line">num.isnumeric() <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">===================</span><br><span class="line">isdigit()</span><br><span class="line"><span class="keyword">True</span>: Unicode数字，byte数字（单字节），全角数字（双字节），罗马数字</span><br><span class="line"><span class="keyword">False</span>: 汉字数字</span><br><span class="line">Error: 无</span><br><span class="line"></span><br><span class="line">isdecimal()</span><br><span class="line"><span class="keyword">True</span>: Unicode数字，，全角数字（双字节）</span><br><span class="line"><span class="keyword">False</span>: 罗马数字，汉字数字</span><br><span class="line">Error: byte数字（单字节）</span><br><span class="line"></span><br><span class="line">isnumeric()</span><br><span class="line"><span class="keyword">True</span>: Unicode数字，全角数字（双字节），罗马数字，汉字数字</span><br><span class="line"><span class="keyword">False</span>: 无</span><br><span class="line">Error: byte数字（单字节）</span><br><span class="line"></span><br><span class="line">================</span><br><span class="line"><span class="keyword">import</span> unicodedata</span><br><span class="line"></span><br><span class="line">unicodedata.digit(<span class="string">"2"</span>)   <span class="comment"># 2</span></span><br><span class="line">unicodedata.decimal(<span class="string">"2"</span>) <span class="comment"># 2</span></span><br><span class="line">unicodedata.numeric(<span class="string">"2"</span>) <span class="comment"># 2.0</span></span><br><span class="line"></span><br><span class="line">unicodedata.digit(<span class="string">"2"</span>)   <span class="comment"># 2</span></span><br><span class="line">unicodedata.decimal(<span class="string">"2"</span>) <span class="comment"># 2</span></span><br><span class="line">unicodedata.numeric(<span class="string">"2"</span>) <span class="comment"># 2.0</span></span><br><span class="line"></span><br><span class="line">unicodedata.digit(<span class="string">b"3"</span>)   <span class="comment"># TypeError: must be str, not bytes</span></span><br><span class="line">unicodedata.decimal(<span class="string">b"3"</span>) <span class="comment"># TypeError: must be str, not bytes</span></span><br><span class="line">unicodedata.numeric(<span class="string">b"3"</span>) <span class="comment"># TypeError: must be str, not bytes</span></span><br><span class="line"></span><br><span class="line">unicodedata.digit(<span class="string">"Ⅷ"</span>)   <span class="comment"># ValueError: not a digit</span></span><br><span class="line">unicodedata.decimal(<span class="string">"Ⅷ"</span>) <span class="comment"># ValueError: not a decimal</span></span><br><span class="line">unicodedata.numeric(<span class="string">"Ⅷ"</span>) <span class="comment"># 8.0</span></span><br><span class="line"></span><br><span class="line">unicodedata.digit(<span class="string">"四"</span>)   <span class="comment"># ValueError: not a digit</span></span><br><span class="line">unicodedata.decimal(<span class="string">"四"</span>) <span class="comment"># ValueError: not a decimal</span></span><br><span class="line">unicodedata.numeric(<span class="string">"四"</span>) <span class="comment"># 4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#"〇","零","一","壱","二","弐","三","参","四","五","六","七","八","九","十","廿","卅","卌","百","千","万","万","亿"</span></span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="http://www.cnblogs.com/jebeljebel/p/4006433.html" target="_blank" rel="noopener">python中str函数isdigit、isdecimal、isnumeric的区别</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 匿名函数、内置高阶函数、偏函数</title>
    <url>/article/c07/</url>
    <content><![CDATA[<h3><span id="匿名函数-lambda">匿名函数 lambda</span></h3><p>维基百科定义:</p>
<blockquote>
<p>在计算机编程中，<strong>匿名函数</strong>(英语：anonymous function)是指一类无需定义标识符(函数名)的函数或子程序，普遍存在于多种编程语言中。</p>
</blockquote>
<p><code>Python</code>中的匿名函数就是<code>lambda</code>，这个名称来源于数学中的λ演算。<strong>Lambda</strong>(大写Λ，小写λ，中文音译：<strong>兰布达</strong>，是第十一个希腊字母)。</p>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>func = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>上面的func定义等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>lambda</code>函数用法很简单，大部分情况下都不会像上面示例定义<code>func</code>，而是直接把匿名函数当参数使用。</p>
<p>下面分享点<code>lambda</code>的特殊用法:</p>
<p><code>lambda</code>定义的函数大部分情况都是需要参数的，如果不需要参数要怎么写呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>func = <span class="keyword">lambda</span>: <span class="string">'No parameter'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func()</span><br><span class="line"><span class="string">'No parameter'</span></span><br></pre></td></tr></table></figure>
<p>如果你想在<code>lambda</code>函数里面抛异常，要怎么实现呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>func = <span class="keyword">lambda</span>: (_ <span class="keyword">for</span> _ <span class="keyword">in</span> ()).throw(Exception(<span class="string">'error'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="keyword">lambda</span>&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;genexpr&gt;</span><br><span class="line">Exception: error</span><br></pre></td></tr></table></figure>
<h3><span id="内置高阶函数-map-reduce-filter-sorted">内置高阶函数 map reduce filter sorted</span></h3><p>维基百科定义:</p>
<blockquote>
<p>在数学和计算机科学中，<strong>高阶函数</strong>是至少满足下列一个条件的函数：</p>
<ul>
<li>接受一个或多个函数作为输入</li>
<li>输出一个函数</li>
</ul>
</blockquote>
<h4><span id="map-函数">map 函数</span></h4><blockquote>
<p>map(function, iterable, …)</p>
</blockquote>
<p>函数作用: 对可迭代对象iterable中的item依次执行function，将执行结果组成一个List返回。</p>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x: x+x, range(<span class="number">1</span>,<span class="number">4</span>)) <span class="comment"># function单个参数</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x,y: x+y, range(<span class="number">1</span>,<span class="number">4</span>), range(<span class="number">3</span>,<span class="number">0</span>,<span class="number">-1</span>)) <span class="comment"># function多个参数</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x,y: (x,y), range(<span class="number">1</span>,<span class="number">4</span>), range(<span class="number">3</span>,<span class="number">0</span>,<span class="number">-1</span>)) <span class="comment"># function返回值为tuple</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure>
<p><strong>在Python 3中，<code>map</code>函数返回值不再是List，而是iterator。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x: x+x, range(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line">&lt;map object at <span class="number">0x7fe223d405c0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> x: x+x, range(<span class="number">1</span>,<span class="number">4</span>)))</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[*map(<span class="keyword">lambda</span> x: x+x, range(<span class="number">1</span>,<span class="number">4</span>))]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<h4><span id="reduce-函数">reduce 函数</span></h4><blockquote>
<p>reduce(function, iterable[, initializer])</p>
</blockquote>
<p>函数作用: 对可迭代对象iterable中的item顺序迭代执行调用function，返回accum_value。如果有initializer，则将initializer作为accum_value的初始值。</p>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y: x+y, range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y: x+y, range(<span class="number">1</span>,<span class="number">10</span>), <span class="number">100</span>)</span><br><span class="line"><span class="number">145</span></span><br></pre></td></tr></table></figure>
<h4><span id="filter-函数">filter 函数</span></h4><blockquote>
<p>filter(function, iterable)</p>
</blockquote>
<p>函数作用: 对可迭代对象iterable中的item依次执行function，将执行结果为True的item组成一个List/String/Tuple(取决于iterable的类型)返回。</p>
<p>当<code>function</code>不为None时，等价于下面的表达式:</p>
<p><code>[item for item in iterable if function(item)]</code></p>
<p>当<code>function</code>为None时，等价于下面的表达式:</p>
<p><code>[item for item in iterable if item]</code></p>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>filter(<span class="keyword">lambda</span> x: x%<span class="number">3</span>==<span class="number">1</span>, range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="number">0</span>, <span class="number">23</span>, <span class="number">232</span>, <span class="number">88</span>, <span class="keyword">None</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>filter(<span class="keyword">None</span>, L)</span><br><span class="line">[<span class="number">23</span>, <span class="number">232</span>, <span class="number">88</span>, <span class="number">26</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[i <span class="keyword">for</span> i <span class="keyword">in</span> L <span class="keyword">if</span> i <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">23</span>, <span class="number">232</span>, <span class="number">88</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> is_not</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>filter(partial(is_not, <span class="keyword">None</span>), L)</span><br><span class="line">[<span class="number">0</span>, <span class="number">23</span>, <span class="number">232</span>, <span class="number">88</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>
<h4><span id="sorted-函数">sorted 函数</span></h4><p><code>sorted</code>函数之前的博文<a href="/article/bcbc/">Python 排序方法list.sort()和sorted()</a>有介绍过，在此就不再赘述了。</p>
<h4><span id="zip-函数">zip 函数</span></h4><p><code>zip</code>函数其实不算是高阶函数，但也比较常用，在此一并介绍了。</p>
<blockquote>
<p>zip([iterable, …])</p>
</blockquote>
<p>函数作用: 将可迭代对象iterable作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。</p>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(a,b)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(a,c)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(*zip(a,b)) <span class="comment"># 与zip相反，可理解为解压，返回二维矩阵式</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br></pre></td></tr></table></figure>
<h3><span id="偏函数-functoolspartial">偏函数 functools.partial</span></h3><blockquote>
<p>functools.partial(func[,<em>args][, *</em>keywords])</p>
</blockquote>
<p>偏函数是从Python2.5引入的一个概念，通过functools模块被用户调用。</p>
<p>偏函数是将所要承载的函数作为<code>partial()</code>函数的第一个参数，原函数的各个参数依次作为<code>partial()</code>函数后续的参数。</p>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin2dec = partial(int, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin2dec(<span class="string">'0b1001'</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin2dec(<span class="string">'1001'</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex2dec = partial(int, base=<span class="number">16</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex2dec(<span class="string">'0x32'</span>)</span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex2dec(<span class="string">'32'</span>)</span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure>
<p>下面这种情况，<code>map</code>函数和<code>partial</code>函数配合使用更Pythonic。</p>
<blockquote>
<p>有一个iterable需要用<code>function(x, y)</code>批量处理，iterable中的item作为参数y，参数x此处需要传入变量var</p>
</blockquote>
<p>如果不用<code>partial</code>，实现代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>var = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x,y: pow(x,y), [var]*<span class="number">3</span>, range(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<p>用<code>partial</code>实现代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>var = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(partial(<span class="keyword">lambda</span> x,y: pow(x,y), var), range(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>zip</tag>
        <tag>Python</tag>
        <tag>lambda</tag>
        <tag>map</tag>
        <tag>reduce</tag>
        <tag>filter</tag>
        <tag>functools.partial</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Python报错</title>
    <url>/article/e1f7/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BUILD FAILED (Ubuntu 16.04 using python-build 20160602)</span><br><span class="line"></span><br><span class="line">Inspect or clean up the working tree at /tmp/python-build.20180326120047.16929</span><br><span class="line">Results logged to /tmp/python-build.20180326120047.16929.log</span><br><span class="line"></span><br><span class="line">Last 10 log lines:</span><br><span class="line">  File "/tmp/python-build.20180326120047.16929/Python-3.5.2/Lib/ensurepip/__init__.py", line 116, in bootstrap</span><br><span class="line">    _run_pip(args + [p[0] for p in _PROJECTS], additional_paths)</span><br><span class="line">  File "/tmp/python-build.20180326120047.16929/Python-3.5.2/Lib/ensurepip/__init__.py", line 41, in _run_pip</span><br><span class="line">    pip.main(args)</span><br><span class="line">  File "/tmp/tmpn7rno8qm/pip-8.1.1-py2.py3-none-any.whl/pip/__init__.py", line 215, in main</span><br><span class="line">  File "/tmp/python-build.20180326120047.16929/Python-3.5.2/Lib/locale.py", line 594, in setlocale</span><br><span class="line">    return _setlocale(category, locale)</span><br><span class="line">locale.Error: unsupported locale setting</span><br><span class="line">Makefile:1060: recipe for target 'install' failed</span><br><span class="line">make: *** [install] Error 1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>解决办法:</p>
<ol>
<li><code>sudo apt-get install language-pack-id</code></li>
<li><code>sudo dpkg-reconfigure locales</code></li>
<li>选中<code>zh_CN.UTF-8</code></li>
<li>重新安装</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 常用进制转换</title>
    <url>/article/4292/</url>
    <content><![CDATA[<p>常用进制: 二进制(Binary)、八进制(Octal)、十进制(Decimal)、十六进制(Hexadecimal)。</p>
<p>进制之间关系图:</p>
<p><img src="../../resource/images/python-bin-hex.png" alt=""></p>
<a id="more"></a>
<h4><span id="二进制-八进制-十六进制转十进制">二进制、八进制、十六进制转十进制</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0b11010'</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0o32'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'0x1a'</span>,<span class="number">16</span>)</span><br><span class="line"><span class="number">26</span></span><br></pre></td></tr></table></figure>
<h4><span id="八进制-十进制-十六进制转二进制">八进制、十进制、十六进制转二进制</span></h4><p>八进制、十六进制不能直接转成二进制，需要先转十进制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">26</span>)</span><br><span class="line"><span class="string">'0b11010'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(int(<span class="string">'0o32'</span>,<span class="number">8</span>))</span><br><span class="line"><span class="string">'0b11010'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(int(<span class="string">'0x1a'</span>,<span class="number">16</span>))</span><br><span class="line"><span class="string">'0b11010'</span></span><br></pre></td></tr></table></figure>
<h4><span id="二进制-十进制-十六进制转八进制">二进制、十进制、十六进制转八进制</span></h4><p>同样，二进制、十六进制不能直接转成八进制，需要先转十进制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct(<span class="number">26</span>)</span><br><span class="line"><span class="string">'0o32'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct(int(<span class="string">'0b11010'</span>,<span class="number">2</span>))</span><br><span class="line"><span class="string">'0o32'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct(int(<span class="string">'0x1a'</span>,<span class="number">16</span>))</span><br><span class="line"><span class="string">'0o32'</span></span><br></pre></td></tr></table></figure>
<h4><span id="二进制-十进制-八进制转十六进制">二进制、十进制、八进制转十六进制</span></h4><p>同样，二进制、八进制不能直接转成十六进制，需要先转十进制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">26</span>)</span><br><span class="line"><span class="string">'0x1a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(int(<span class="string">'0b11010'</span>,<span class="number">2</span>))</span><br><span class="line"><span class="string">'0x1a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(int(<span class="string">'0o32'</span>,<span class="number">8</span>))</span><br><span class="line"><span class="string">'0x1a'</span></span><br></pre></td></tr></table></figure>
<h4><span id="延伸问题">延伸问题</span></h4><ol>
<li><p>判断一个数是否是2的幂次方，若是，并判断出来是多少次方?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calPowerOf2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> num &amp; num<span class="number">-1</span> == <span class="number">0</span>, <span class="string">"This number is not power of 2"</span></span><br><span class="line">    <span class="keyword">return</span> math.log(num, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(calPowerOf2(<span class="number">1024</span>)) <span class="comment"># echo 10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>给定一个数n，求大于等于n的2的最小次幂?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextPowerOf2</span><span class="params">(n)</span>:</span></span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">and</span> <span class="keyword">not</span> (n &amp; (n - <span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>):</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; count</span><br><span class="line"></span><br><span class="line">print(nextPowerOf2(<span class="number">100</span>)) <span class="comment"># echo 128</span></span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>bin</tag>
        <tag>oct</tag>
        <tag>int</tag>
        <tag>hex</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 排序方法list.sort()和sorted()</title>
    <url>/article/bcbc/</url>
    <content><![CDATA[<h4><span id="listsort">list.sort()</span></h4><blockquote>
<p>List的成员函数，所以仅适用list排序，原址排序</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort(...)</span><br><span class="line">    L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;</span><br><span class="line">    cmp(x, y) -&gt; -1, 0, 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> cmp -- 比较函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回值：None</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注: Python3开始取消cmp参数</span></span><br></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_a = [<span class="number">26</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">8</span>]</span><br><span class="line">list_a.sort()</span><br><span class="line">print(list_a)</span><br><span class="line"><span class="comment">#[2, 8, 10, 11, 20, 26]</span></span><br><span class="line"></span><br><span class="line">list_b = [<span class="string">'Way-26'</span>,<span class="string">'Way-2'</span>,<span class="string">'Way-10'</span>,<span class="string">'Way-20'</span>,<span class="string">'Way-11'</span>,<span class="string">'Way-8'</span>]</span><br><span class="line">list_b.sort(key=<span class="keyword">lambda</span> x : int(x[<span class="number">4</span>:]))</span><br><span class="line">print(list_b)</span><br><span class="line"><span class="comment">#['Way-2', 'Way-8', 'Way-10', 'Way-11', 'Way-20', 'Way-26']</span></span><br><span class="line"></span><br><span class="line">list_c = [<span class="string">'Way-26'</span>,<span class="string">'Way-2'</span>,<span class="string">'Way-10'</span>,<span class="string">'Way-20'</span>,<span class="string">'Way-11'</span>,<span class="string">'Way-8'</span>]</span><br><span class="line">list_c.sort(cmp=<span class="keyword">lambda</span> x,y : int(x[<span class="number">4</span>:])-int(y[<span class="number">4</span>:]))</span><br><span class="line">print(list_c)</span><br><span class="line"><span class="comment">#['Way-2', 'Way-8', 'Way-10', 'Way-11', 'Way-20', 'Way-26']</span></span><br><span class="line"></span><br><span class="line">list_d = [<span class="string">'Way-26'</span>,<span class="string">'Way-2'</span>,<span class="string">'Way-10'</span>,<span class="string">'Way-20'</span>,<span class="string">'Way-11'</span>,<span class="string">'Way-8'</span>]</span><br><span class="line">list_d.sort(cmp=<span class="keyword">lambda</span> x,y : y-x, key=<span class="keyword">lambda</span> x : int(x[<span class="number">4</span>:]))</span><br><span class="line">print(list_d)</span><br><span class="line"><span class="comment">#['Way-26', 'Way-20', 'Way-11', 'Way-10', 'Way-8', 'Way-2']</span></span><br></pre></td></tr></table></figure>
<h4><span id="sorted">sorted()</span></h4><blockquote>
<p>内建函数，适用于任何可迭代对象，返回排序后的对象</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sorted(...)</span><br><span class="line">    sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list</span><br><span class="line"><span class="meta">#</span><span class="bash"> iterable -- 可迭代对象。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cmp -- 比较函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代 对象中的一个元素来进行排序。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回值：排序后的对象</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注: Python3开始取消cmp参数</span></span><br></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iter_a = [dict(num=<span class="number">26</span>),dict(num=<span class="number">2</span>),dict(num=<span class="number">10</span>),dict(num=<span class="number">20</span>),dict(num=<span class="number">11</span>),dict(num=<span class="number">8</span>)]</span><br><span class="line">result = sorted(iter_a, key=<span class="keyword">lambda</span> x: x[<span class="string">'num'</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">#[&#123;'num': 26&#125;, &#123;'num': 20&#125;, &#123;'num': 11&#125;, &#123;'num': 10&#125;, &#123;'num': 8&#125;, &#123;'num': 2&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用operator.itemgetter模块排序元组</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">iter_b = [</span><br><span class="line">    (<span class="string">'Wayde'</span>, <span class="number">28</span>, <span class="number">90</span>),</span><br><span class="line">    (<span class="string">'Peter'</span>, <span class="number">23</span>, <span class="number">80</span>),</span><br><span class="line">    (<span class="string">'Bob'</span>, <span class="number">32</span>, <span class="number">100</span>),</span><br><span class="line">]</span><br><span class="line">result = sorted(iter_b, key=itemgetter(<span class="number">2</span>))</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">#[('Peter', 23, 80), ('Wayde', 28, 90), ('Bob', 32, 100)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用operator.attrgetter模块排序元组</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> attrgetter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.name = kwargs[<span class="string">'name'</span>]</span><br><span class="line">        self.age = kwargs[<span class="string">'age'</span>]</span><br><span class="line">        self.score = kwargs[<span class="string">'score'</span>]</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> repr(self.name)</span><br><span class="line">        </span><br><span class="line">iter_c = [</span><br><span class="line">    Student(name=<span class="string">'Wayde'</span>, age=<span class="number">28</span>, score=<span class="number">90</span>),</span><br><span class="line">    Student(name=<span class="string">'Peter'</span>, age=<span class="number">23</span>, score=<span class="number">80</span>),</span><br><span class="line">    Student(name=<span class="string">'Bob'</span>, age=<span class="number">32</span>, score=<span class="number">100</span>),</span><br><span class="line">    Student(name=<span class="string">'Jack'</span>, age=<span class="number">28</span>, score=<span class="number">95</span>),</span><br><span class="line">    Student(name=<span class="string">'Aaron'</span>, age=<span class="number">35</span>, score=<span class="number">90</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">result = sorted(iter_c, key=attrgetter(<span class="string">'age'</span>))</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">#['Peter', 'Aaron', 'Wayde', 'Jack', 'Bob']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多级排序</span></span><br><span class="line">result = sorted(iter_c, key=attrgetter(<span class="string">'score'</span>,<span class="string">'age'</span>))</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment">#['Peter', 'Wayde', 'Aaron', 'Jack', 'Bob']</span></span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="http://www.cnblogs.com/sysu-blackbear/p/3283993.html" target="_blank" rel="noopener">Python中sorted函数的用法</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>list.sort</tag>
        <tag>sorted</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 枚举类Enum</title>
    <url>/article/23f8/</url>
    <content><![CDATA[<p>首先定义枚举类如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LibraryType</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    PERSONAL = <span class="number">100</span></span><br><span class="line">    PUBLIC = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_value</span><span class="params">(cls, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> any(value == item.value <span class="keyword">for</span> item <span class="keyword">in</span> cls)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li><p>常规用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(LibraryType.PERSONAL.name)</span><br><span class="line"><span class="comment"># echo PERSONAL</span></span><br><span class="line"></span><br><span class="line">print(LibraryType.PERSONAL.value)</span><br><span class="line"><span class="comment"># echo 100</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>判断值是否存在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(LibraryType.has_value(<span class="number">100</span>))</span><br><span class="line"><span class="comment"># echo True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过值获取属性名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(LibraryType(<span class="number">100</span>).name)</span><br><span class="line"><span class="comment"># echo PERSONAL</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过属性名称获取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(LibraryType[<span class="string">'PUBLIC'</span>].value)</span><br><span class="line"><span class="comment"># echo 200</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>参考资料:<br><a href="https://docs.python.org/3/library/enum.html#module-enum" target="_blank" rel="noopener">enum-Support for enumerations</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 运算符及优先级</title>
    <url>/article/daad/</url>
    <content><![CDATA[<p>本文主要总结下Python的运算符，以及运算符的优先级。</p>
<h3><span id="算术运算符">算术运算符</span></h3><p>算术运算符有: <code>+(加)</code>、<code>-(减)</code>、<code>*(乘)</code>、<code>/(除)</code>、<code>%(取模)</code>、<code>**(幂)</code>、<code>//(取整除)</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> + <span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">6</span> - <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> * <span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> / <span class="number">2</span>	<span class="comment"># Py2中，整数相除，结果只保留整数。</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> / <span class="number">2.0</span>	<span class="comment"># Py2中，被除数or除数有一个浮点型，结果为浮点型。</span></span><br><span class="line"><span class="number">1.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> % <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> // <span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> // <span class="number">2.0</span></span><br><span class="line"><span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3><span id="比较关系运算符">比较(关系)运算符</span></h3><p>比较运算符有: <code>=(等于)</code>、<code>!=(不等于)</code>、<code>&lt;&gt;(不等于)</code>、<code>&gt;(大于)</code>、<code>&lt;(小于)</code>、<code>&gt;=(大于等于)</code>、<code>&lt;=(小于等于)</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> == <span class="number">2</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> != <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &lt;&gt; <span class="number">2</span>	<span class="comment"># Py3中，已废弃&lt;&gt;运算符</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &lt; <span class="number">2</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &gt;= <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &lt;= <span class="number">2</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<h3><span id="赋值运算符">赋值运算符</span></h3><p>赋值运算符只有<code>=</code>，其它类似<code>+=</code>、<code>*=</code>实际是赋值表达式，如 <code>a += 1</code>等价于<code>a = a + 1</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x += <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x -= <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x *= <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x /= <span class="number">2.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x %= <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x **= <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x //= <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">0.0</span></span><br></pre></td></tr></table></figure>
<h3><span id="逻辑运算符">逻辑运算符</span></h3><p>逻辑运算符有: <code>and(与)</code>、<code>or(或)</code>、<code>not(非)</code>。</p>
<blockquote>
<p>x and y : 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。<br>x or y :  如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。<br>not x: 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">and</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">and</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">or</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">or</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure>
<h3><span id="位运算符">位运算符</span></h3><p>位运算符有: <code>&amp;(按位与)</code>、<code>|(按位或)</code>、<code>^(按位异或)</code>、<code>~(按位取反)</code>、<code>&lt;&lt;(按位左移)</code>、<code>&gt;&gt;(按位右移)</code>。</p>
<p><em>位运算符是把数字看作二进制来进行计算的</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y = <span class="number">21</span>,<span class="number">26</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(x)</span><br><span class="line"><span class="string">'0b10101'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(y)</span><br><span class="line"><span class="string">'0b11010'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(x &amp; y)</span><br><span class="line"><span class="string">'0b10000'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(x | y)</span><br><span class="line"><span class="string">'0b11111'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x ^ y</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(x ^ y)</span><br><span class="line"><span class="string">'0b1111'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>~x</span><br><span class="line"><span class="number">-22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(~x)</span><br><span class="line"><span class="string">'-0b10110'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &lt;&lt; <span class="number">2</span></span><br><span class="line"><span class="number">84</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(x &lt;&lt; <span class="number">2</span>)</span><br><span class="line"><span class="string">'0b1010100'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y &gt;&gt; <span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(y &gt;&gt; <span class="number">2</span>)</span><br><span class="line"><span class="string">'0b110'</span></span><br></pre></td></tr></table></figure>
<h3><span id="成员运算符">成员运算符</span></h3><p>成员运算符有: <code>in</code>、<code>not in</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">in</span> (<span class="number">20</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">in</span> (<span class="number">20</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">20</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">20</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<h3><span id="身份运算符">身份运算符</span></h3><p>成员运算符有: <code>is</code>、<code>is not</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y = <span class="number">3</span>,<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(x)</span><br><span class="line"><span class="number">43553064</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(y)</span><br><span class="line"><span class="number">43553088</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="keyword">is</span> y</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="keyword">is</span> <span class="keyword">not</span> y</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(z)</span><br><span class="line"><span class="number">43553064</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="keyword">is</span> z</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y <span class="keyword">is</span> z</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<h3><span id="运算符优先级">运算符优先级</span></h3><p>以下表格列出了从最高到最低优先级的所有运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>**</td>
<td>指数 (最高优先级)</td>
</tr>
<tr>
<td>~ + -</td>
<td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td>* / % //</td>
<td>乘，除，取模和取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法减法</td>
</tr>
<tr>
<td>&gt;&gt; &lt;&lt;</td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td>&amp;</td>
<td>按位与</td>
</tr>
<tr>
<td>^  &#124;</td>
<td>按位异或、按位或</td>
</tr>
<tr>
<td>&lt;= &lt; &gt; &gt;=</td>
<td>比较运算符</td>
</tr>
<tr>
<td>&lt;&gt; == !=</td>
<td>等于运算符</td>
</tr>
<tr>
<td>= %= /= //= -= += <em>= *</em>=</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>is is not</td>
<td>身份运算符</td>
</tr>
<tr>
<td>in not in</td>
<td>成员运算符</td>
</tr>
<tr>
<td>not or and</td>
<td>逻辑运算符</td>
</tr>
</tbody>
</table>
<p>参考资料:<br><a href="http://www.runoob.com/python/python-operators.html" target="_blank" rel="noopener">运算符及优先级</a><br><a href="https://www.cnblogs.com/russellluo/p/3292985.html" target="_blank" rel="noopener">Python基础：数值（布尔型、整型、长整型、浮点型、复数）</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>运算符</tag>
        <tag>运算符优先级</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 配置文件解析之configparser模块</title>
    <url>/article/eb41/</url>
    <content><![CDATA[<p><code>configparser</code>内置在Python标准库中，用来处理类似Windows ini格式的配置文件。</p>
<blockquote>
<p>Py2中该模块名为ConfigParser，Py3中更名为configparser</p>
</blockquote>
<h4><span id="配置文件语法">配置文件语法</span></h4><p>配置文件语法如下:</p>
<ol>
<li>分隔符支持<code>:</code>和<code>=</code>，如<code>key:value</code>或<code>key=value</code></li>
<li>注释支持<code>;</code>和<code>#</code></li>
<li>*value支持多行</li>
<li>*可以只有key，没有value</li>
<li>*value支持引用</li>
</ol>
<h4><span id="读取配置文件方法">读取配置文件方法</span></h4><p>读取配置文件有4种方法:</p>
<ol>
<li><p>read方法，参数为文件名或包含文件名的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf = configparser.ConfigParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.read(<span class="string">'config_01.ini'</span>) <span class="comment">#读取单个配置文件</span></span><br><span class="line">[<span class="string">'config_01.ini'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config_files = [<span class="string">'config_01.ini'</span>, <span class="string">'config_02.ini'</span>, <span class="string">'config_03.ini'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.read(config_files) <span class="comment">#读取多个配置文件</span></span><br><span class="line">[<span class="string">'config_01.ini'</span>, <span class="string">'config_02.ini'</span>, <span class="string">'config_03.ini'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.sections()</span><br><span class="line">[<span class="string">'config_01.section'</span>, <span class="string">'config_02.section'</span>, <span class="string">'config_03.section'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>read_dict方法，参数为字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf = configparser.ConfigParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.read_dict(dict(</span><br><span class="line"><span class="meta">... </span>    section1=dict(k11=<span class="string">'v11'</span>, k12=<span class="string">'v12'</span>),</span><br><span class="line"><span class="meta">... </span>    section2=dict(k21=<span class="string">'v21'</span>, k22=<span class="string">'v22'</span>),</span><br><span class="line"><span class="meta">... </span>    section3=dict(k31=<span class="string">'v31'</span>, k32=<span class="string">'v32'</span>),</span><br><span class="line"><span class="meta">... </span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.sections()</span><br><span class="line">[<span class="string">'section1'</span>, <span class="string">'section2'</span>, <span class="string">'section3'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>read_file方法，参数为文件句柄</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf = configparser.ConfigParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.read_file(open(<span class="string">'config_01.ini'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.sections()</span><br><span class="line">[<span class="string">'db.account'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>read_string方法，参数为字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.read_string(<span class="string">'''[db.account])</span></span><br><span class="line"><span class="string"><span class="meta">... </span>host = 127.0.0.1</span></span><br><span class="line"><span class="string"><span class="meta">... </span>port = 5432</span></span><br><span class="line"><span class="string"><span class="meta">... </span>user = user</span></span><br><span class="line"><span class="string"><span class="meta">... </span>password = 123456</span></span><br><span class="line"><span class="string"><span class="meta">... </span>database = account'''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.sections()</span><br><span class="line">[<span class="string">'db.account'</span>]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<h4><span id="configparser常用方法">configparser常用方法</span></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取不存在的配置文件</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.read(<span class="string">'not_exists.ini'</span>)</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取存在的配置文件</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.read_string(<span class="string">'''[db.account]</span></span><br><span class="line"><span class="string">host = 127.0.0.1</span></span><br><span class="line"><span class="string">port = 5432</span></span><br><span class="line"><span class="string">user = user</span></span><br><span class="line"><span class="string">auto_commit = off</span></span><br><span class="line"><span class="string">password : 123456</span></span><br><span class="line"><span class="string">database : account'''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出全部section</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.sections()</span><br><span class="line">[<span class="string">'db.account'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定section</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf[<span class="string">'db.account'</span>]</span><br><span class="line">&lt;Section: db.account&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 判断section是否存在</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.has_section(<span class="string">'db.account'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出指定section全部key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.options(<span class="string">'db.account'</span>)</span><br><span class="line">[<span class="string">'host'</span>, <span class="string">'port'</span>, <span class="string">'user'</span>, <span class="string">'password'</span>, <span class="string">'database'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定section.key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf[<span class="string">'db.account'</span>][<span class="string">'host'</span>]</span><br><span class="line"><span class="string">'127.0.0.1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断指定section是否存在key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.has_option(<span class="string">'db.account'</span>,<span class="string">'user'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定section.key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.get(<span class="string">'db.account'</span>,<span class="string">'port'</span>)</span><br><span class="line"><span class="string">'5432'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定key不存在时返回值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.get(<span class="string">'db.account'</span>, <span class="string">'username'</span>, fallback=<span class="string">'username不存在'</span>)</span><br><span class="line"><span class="string">'username不存在'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将value转为int</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.getint(<span class="string">'db.account'</span>,<span class="string">'port'</span>)</span><br><span class="line"><span class="number">5432</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将value转为float</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.getfloat(<span class="string">'db.account'</span>,<span class="string">'port'</span>)</span><br><span class="line"><span class="number">5432.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将value转为boolean</span></span><br><span class="line"><span class="comment"># '1', 'yes', 'true', 'on'将返回True</span></span><br><span class="line"><span class="comment"># '0', 'no', 'false', 'off'将返回False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.getboolean(<span class="string">'db.account'</span>,<span class="string">'auto_commit'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定key不存在时返回值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.getboolean(<span class="string">'db.account'</span>,<span class="string">'internal'</span>, fallback=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出指定section全部key和value</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.items(<span class="string">'db.account'</span>)</span><br><span class="line">[(<span class="string">'host'</span>, <span class="string">'127.0.0.1'</span>), (<span class="string">'port'</span>, <span class="string">'5432'</span>), (<span class="string">'user'</span>, <span class="string">'user'</span>), (<span class="string">'auto_commit'</span>, <span class="string">'off'</span>), (<span class="string">'password'</span>, <span class="string">'123456'</span>), (<span class="string">'database'</span>, <span class="string">'account'</span>)]</span><br></pre></td></tr></table></figure>
<h4><span id="configparser配置引用">configparser配置引用</span></h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config.ini</span></span><br><span class="line"><span class="section">[project]</span></span><br><span class="line"><span class="attr">home_path</span> = /home/deploy/account-server</span><br><span class="line"><span class="attr">log_path</span> = <span class="variable">$&#123;home_path&#125;</span>/log</span><br><span class="line"> </span><br><span class="line"><span class="section">[logging]</span></span><br><span class="line"><span class="attr">level</span> = DEBUG</span><br><span class="line"><span class="attr">filename</span> = <span class="variable">$&#123;project:log_path&#125;</span>/log/app.user-center.log</span><br><span class="line"><span class="attr">rotate_type</span> = DATE</span><br><span class="line"><span class="attr">when</span> = midnight</span><br><span class="line"><span class="attr">internal</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">multiprocess</span> = <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf = configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.read(<span class="string">'config.ini'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.sections()</span><br><span class="line">[<span class="string">'project'</span>, <span class="string">'logging'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.items(<span class="string">'project'</span>)</span><br><span class="line">[(<span class="string">'home_path'</span>, <span class="string">'/home/deploy/account-server'</span>), (<span class="string">'log_path'</span>, <span class="string">'/home/deploy/account-server/log'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.items(<span class="string">'logging'</span>)</span><br><span class="line">[(<span class="string">'level'</span>, <span class="string">'DEBUG'</span>), (<span class="string">'filename'</span>, <span class="string">'/home/deploy/account-server/log/log/app.user-center.log'</span>), (<span class="string">'rotate_type'</span>, <span class="string">'DATE'</span>), (<span class="string">'when'</span>, <span class="string">'midnight'</span>), (<span class="string">'internal'</span>, <span class="string">'1'</span>), (<span class="string">'multiprocess'</span>, <span class="string">'True'</span>)]</span><br></pre></td></tr></table></figure>
<h4><span id="configparser多行配置-空配置等">configparser多行配置、空配置等</span></h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config.ini</span></span><br><span class="line"><span class="section">[feature]</span></span><br><span class="line"><span class="attr">multiline_value</span> = 我是谁, 我从哪里来</span><br><span class="line">                  我要到哪里去</span><br><span class="line">key_without_value</span><br><span class="line">empty string value here =</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf = configparser.ConfigParser(allow_no_value=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.read(<span class="string">'config.ini'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.sections()</span><br><span class="line">[<span class="string">'feature'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.items(<span class="string">'feature'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.items(<span class="string">'feature'</span>)</span><br><span class="line">[(<span class="string">'multiline_value'</span>, <span class="string">'我是谁, 我从哪里来\n我要到哪里去'</span>), (<span class="string">'key_without_value'</span>, <span class="string">''</span>), (<span class="string">'empty string value here'</span>, <span class="string">''</span>)]</span><br></pre></td></tr></table></figure>
<h4><span id="configparser写配置文件">configparser写配置文件</span></h4><p><code>configparser</code>不仅可以用来读取配置文件，还可以写配置文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf = configparser.ConfigParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.add_section(<span class="string">'section1'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.set(<span class="string">'section1'</span>, <span class="string">'name'</span>, <span class="string">'Wayde'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.set(<span class="string">'section1'</span>, <span class="string">'password'</span>, <span class="string">'123456'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.add_section(<span class="string">'section2'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.set(<span class="string">'section2'</span>, <span class="string">'name'</span>, <span class="string">'Peter'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.set(<span class="string">'section2'</span>, <span class="string">'password'</span>, <span class="string">'654321'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.write(open(<span class="string">'config.ini'</span>,<span class="string">'w+'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.remove_option(<span class="string">'section1'</span>, <span class="string">'password'</span>)	<span class="comment"># 移除key</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.remove_section(<span class="string">'section2'</span>)	<span class="comment"># 移除section</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf.clear() <span class="comment"># 删除全部项</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat config.ini </span></span><br><span class="line">[section1]</span><br><span class="line">name = Wayde</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">[section2]</span><br><span class="line">name = Peter</span><br><span class="line">password = 654321</span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="https://blog.csdn.net/shortwall/article/details/78615368" target="_blank" rel="noopener">Python3 中 configparser 模块解析配置的用法详解</a><br><a href="https://docs.python.org/3/library/configparser.html" target="_blank" rel="noopener">configparser官方文档</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>configparser</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLAlchemy ORM</title>
    <url>/article/5ece/</url>
    <content><![CDATA[<ul>
<li>session.commit() vs session.flush()</li>
</ul>
<ul>
<li><p>default vs server_default</p>
<p>orm默认值 vs 数据库默认值</p>
</li>
<li><p>onupdate vs server_onupdate</p>
<p>orm自动更新 vs 数据库自动更新</p>
</li>
<li><p>db.engine.execute vs db.session.execute</p>
</li>
<li><p>engine vs session vs connection</p>
</li>
<li><p>db.DateTime vs db.TIMESTAMP</p>
</li>
<li><p>表字段默认值default必须传方法名，不带()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">addtime = db.Column(<span class="string">'f_addtime'</span>, db.TIMESTAMP, default=datetime.now)</span><br><span class="line">lasttime = db.Column(<span class="string">'f_lasttime'</span>, db.TIMESTAMP, onupdate=datetime.now)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>参考资料:<br><a href="http://docs.sqlalchemy.org/en/latest/contents.html" target="_blank" rel="noopener">SQLAlchemy docs</a><br><a href="https://stackoverflow.com/questions/34322471/sqlalchemy-engine-connection-and-session-difference" target="_blank" rel="noopener">SQLAlchemy: engine, connection and session difference</a><br><a href="http://blog.csdn.net/qq_34146899/article/details/52559747" target="_blank" rel="noopener">flask-sqlalchemy中 backref lazy的参数实例解释和选择</a><br><a href="http://blog.csdn.net/bestallen/article/details/52601457" target="_blank" rel="noopener">SQLalchemy relationship之lazy属性 学习笔记</a><br><a href="http://www.cnblogs.com/sysnap/p/6484226.html" target="_blank" rel="noopener">ORM SQLAlchemy - 建立一个关系 relationship</a></p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>SQLAlchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLAlchemy 监听事件</title>
    <url>/article/9a29/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@event.listens_for(db.Model, 'before_update', propagate=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_lasttime</span><span class="params">(mapper, connection, target)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> hasattr(target, <span class="string">'lasttime'</span>):</span><br><span class="line">        target.lasttime = datetime.now()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>SQLAlchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 单引号、双引号、不加引号区别</title>
    <url>/article/c8ee/</url>
    <content><![CDATA[<ul>
<li><p>单引号</p>
<blockquote>
<p>可以说是所见即所得：即将单引号内的内容原样输出，或者描述为单引号里面看到的是什么就会输出什么。单引号’’是全引用，被单引号括起的内容不管是常量还是变量者不会发生替换。 </p>
</blockquote>
</li>
<li><p>双引号</p>
<blockquote>
<p>把双引号内的内容输出出来；如果内容中有命令、变量等，会先把变量、命令解析出结果，然后在输出最终内容来。双引号””是部分引用，被双引号括起的内容常量还是常量，变量则会发生替换，替换成变量内容。</p>
</blockquote>
</li>
<li><p>不加引号</p>
<blockquote>
<p>不会将含有空格的字符串视为一个整体输出, 如果内容中有命令、变量等，会先把变量、命令解析出结果，然后在输出最终内容来，如果字符串中带有空格等特殊字符，则不能完整的输出，需要改加双引号，一般连续的字符串，数字，路径等可以用。 </p>
</blockquote>
</li>
</ul>
<p>使用规则:</p>
<p>一般常量用单引号’’括起，如果含有变量则用双引号””括起。</p>
<p>参考资料:<br> <a href="http://blog.csdn.net/wejfoasdbsdg/article/details/51675174" target="_blank" rel="noopener">grep 后加单引号、双引号和不加引号的区别</a></p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>grep正则表达式</title>
    <url>/article/16d/</url>
    <content><![CDATA[<p>grep正则表达式元字符集：</p>
<blockquote>
<p>^ 锚定行的开始 如：’^grep’匹配所有以grep开头的行。 </p>
<p>\$ 锚定行的结束 如：’grep$’匹配所有以grep结尾的行。 </p>
<p>. 匹配一个非换行符的字符 如：’gr.p’匹配gr后接一个任意字符，然后是p。 </p>
<p>* 匹配零个或多个先前字符 如：’<em>grep’匹配所有一个或多个空格后紧跟grep的行。 .</em>一起用代表任意字符。</p>
<p>[] 匹配一个指定范围内的字符，如’[Gg]rep’匹配Grep和grep。 </p>
<p>[^] 匹配一个不在指定范围内的字符，如：’[^A-FH-Z]rep’匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。 </p>
<p>\(..\) 标记匹配字符，如’(love)‘，love被标记为1。 </p>
<p>\ 锚定单词的开始，如:’\匹配包含以grep开头的单词的行。 </p>
<p>\&gt; 锚定单词的结束，如’grep>‘匹配包含以grep结尾的单词的行。 </p>
<p>x{m} 重复字符x，m次，如：’0{5}‘匹配包含5个o的行。 </p>
<p>x{m,} 重复字符x,至少m次，如：’o{5,}‘匹配至少有5个o的行。 </p>
<p>x{m,n}重复字符x，至少m次，不多于n次，如：’o{5,10}‘匹配5–10个o的行。</p>
<p> \w 匹配文字和数字字符，也就是[A-Za-z0-9]，如：’G\w*p’匹配以G后跟零个或多个文字或数字字符，然后是p。</p>
<p> \b 单词锁定符，如: ‘\bgrep\b’只匹配grep。</p>
</blockquote>
<p>常用的 grep 选项有:</p>
<blockquote>
<p> -c 只输出匹配行的个数。<br> -i 不区分大小写（只适用于单字符）。<br> -h 查询多文件时不显示文件名。<br> -l 查询多文件时只输出包含匹配字符的文件名。<br> -n 显示匹配行及行号。<br> -s 不显示不存在或无匹配文本的错误信息。<br> -v 显示不包含匹配文本的所有行。<br> -V 显示软件版本信息<br> 使用grep匹配时最好用双引号引起来，防止被系统误认为参数或者特殊命令，也可以匹配多个单词。</p>
</blockquote>
<p>匹配实例:</p>
<blockquote>
<p> grep -c “48” test.txt 统计所有以“48”字符开头的行有多少<br> grep -i “May” test.txt 不区分大小写查找“May”所有的行）<br> grep -n “48” test.txt 显示行号；显示匹配字符“48”的行及行号，相同于 nl test.txt |grep 48）<br> grep -v “48” test.txt 显示输出没有字符“48”所有的行）<br> grep “471” test.txt 显示输出字符“471”所在的行）<br> grep “48;” test.txt 显示输出以字符“48”开头，并在字符“48”后是一个tab键所在的行<br> grep “48[34]” test.txt 显示输出以字符“48”开头，第三个字符是“3”或是“4”的所有的行）<br> grep “^[\^48]” test.txt 显示输出行首不是字符“48”的行）<br> grep “[Mm]ay” test.txt 设置大小写查找：显示输出第一个字符以“M”或“m”开头，以字符“ay”结束的行）<br> grep “K…D” test.txt 显示输出第一个字符是“K”，第二、三、四是任意字符，第五个字符是“D”所在的行）<br> grep “[A-Z][9]D” test.txt 显示输出第一个字符的范围是“A-D”，第二个字符是“9”，第三个字符的是“D”的所有的行<br> grep “[35]..1998” test.txt 显示第一个字符是3或5，第二三个字符是任意，以1998结尾的所有行<br> grep “4\{2,\}” test.txt 模式出现几率查找：显示输出字符“4”至少重复出现两次的所有行<br> grep “9\{3,\}” test.txt 模式出现几率查找：显示输出字符“9”至少重复出现三次的所有行<br> grep “9\{2,3\}” test.txt 模式出现几率查找：显示输出字符“9”重复出现的次数在一定范围内，重复出现2次或3次所有行<br> grep -n “^$” test.txt 显示输出空行的行号<br> ls -l |grep “^d” 如果要查询目录列表中的目录 同：ls -d *<br> ls -l |grep “^d[d]” 在一个目录中查询不包含目录的所有文件<br> ls -l |grpe “^d…..x..x” 查询其他用户和用户组成员有可执行权限的目录集合</p>
</blockquote>
<p>参考资料:<br><a href="http://www.cnblogs.com/xiaouisme/archive/2012/11/09/2762543.html" target="_blank" rel="noopener">linux grep 正则表达式</a></p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title>批量管理Git项目脚本</title>
    <url>/article/f65a/</url>
    <content><![CDATA[<blockquote>
<p>应用场景: 本地clone有多个git项目，日常维护需要经常修改，又不想每次切换目录，然后pull、push代码…</p>
</blockquote>
<p>使用方法:</p>
<ol>
<li><p>创建shell脚本<code>gghelp.sh</code></p>
</li>
<li><p>添加alias </p>
<p><code>echo &quot;alias gg=&#39;~/gghelp.sh&#39;&quot; &gt;&gt; ~/.bashrc</code></p>
</li>
<li><p>防止误删除 </p>
<p><code>sudo chattr +ae gghelp.sh</code></p>
</li>
<li><p>用法说明执行<code>gg -x</code>即可查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gg -x</span></span><br><span class="line">    Usage: gghelp.sh [-a --add] [-c --commit] [-d --diff]</span><br><span class="line">                     [-e --epush] [-p --pull] [-s --status]</span><br><span class="line"></span><br><span class="line">    Options:</span><br><span class="line">        -a|--add    execute git add --all</span><br><span class="line">        -c|--commit execute git commit</span><br><span class="line">        -d|--diff   execute git diff</span><br><span class="line">        -e|--epush  execute git push</span><br><span class="line">        -p|--pull   execute git pull</span><br><span class="line">        -s|--add    execute git status (default option)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<p>以下为<code>gghelp.sh</code>内容:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Git project list</span></span><br><span class="line">path_list[0]="$HOME/work/repository-01"</span><br><span class="line">path_list[0]="$HOME/work/repository-02"</span><br><span class="line">path_list[0]="$HOME/work/repository-03"</span><br><span class="line">path_list[0]="$HOME/work/repository-04"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> define usage</span></span><br><span class="line">usage() &#123;</span><br><span class="line">    cat &lt;&lt;EOM</span><br><span class="line">    Usage: $(basename $0) [-a --add] [-c --commit] [-d --diff]</span><br><span class="line">                     [-e --epush] [-p --pull] [-s --status]</span><br><span class="line"></span><br><span class="line">    Options:</span><br><span class="line">        -a|--add    execute git add --all</span><br><span class="line">        -c|--commit execute git commit</span><br><span class="line">        -d|--diff   execute git diff</span><br><span class="line">        -e|--epush  execute git push</span><br><span class="line">        -p|--pull   execute git pull</span><br><span class="line">        -s|--add    execute git status (default option)</span><br><span class="line">EOM</span><br><span class="line">    exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> get parameters</span></span><br><span class="line">parmas=`getopt -q -a -o spdace -l status,pull,diff,add,commit,epush -- "$@"`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Display usage when parameter is abnormal</span></span><br><span class="line">[ $? -ne 0 ] &amp;&amp; usage</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Parameter processing</span></span><br><span class="line">eval set -- "$&#123;parmas&#125;"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default execution [-s]</span></span><br><span class="line">if [ "$#" -le 1 ]; then</span><br><span class="line">    parmas="-s --"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Directory listing loop</span></span><br><span class="line">for path in $&#123;path_list[@]&#125;;</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">  echo -e "\033[33m \nProject path: $path \n\033[0m"</span><br><span class="line"></span><br><span class="line">  for val in $&#123;parmas[*]&#125;; do</span><br><span class="line">    case "$val" in</span><br><span class="line">      -s|--status )</span><br><span class="line">        cd $path</span><br><span class="line">        git status</span><br><span class="line">        shift</span><br><span class="line">        ;;</span><br><span class="line">      -p|--pull )</span><br><span class="line">        cd $path</span><br><span class="line">        git pull</span><br><span class="line">        shift</span><br><span class="line">        ;;</span><br><span class="line">      -d|--diff )</span><br><span class="line">        cd $path</span><br><span class="line">        git diff --exit-code</span><br><span class="line">        shift</span><br><span class="line">        ;;</span><br><span class="line">      -a|--add )</span><br><span class="line">        cd $path</span><br><span class="line">        git add --all</span><br><span class="line">        shift</span><br><span class="line">        ;;</span><br><span class="line">      -c|--commit )</span><br><span class="line">        cd $path</span><br><span class="line">        if [ -n "$(git status --porcelain --untracked-files=no)" ]; then</span><br><span class="line">            read -t 60 -p "Please input commit message: "</span><br><span class="line">            git commit -m "$REPLY"</span><br><span class="line">        fi</span><br><span class="line">        shift</span><br><span class="line">        ;;</span><br><span class="line">      -e|--epush )</span><br><span class="line">        cd $path</span><br><span class="line">        if [ -n "$(git diff origin/master --exit-code)" ]; then</span><br><span class="line">            git push</span><br><span class="line">        else</span><br><span class="line">            echo "Everything up-to-date"</span><br><span class="line">        fi</span><br><span class="line">        shift</span><br><span class="line">        ;;</span><br><span class="line">      -- )</span><br><span class="line">        shift</span><br><span class="line">        break</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">  done</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="http://www.cnblogs.com/lr-ting/archive/2013/02/28/2936792.html" target="_blank" rel="noopener">shell脚本中echo显示内容带颜色</a><br><a href="https://blog.csdn.net/buster2014/article/details/46344951" target="_blank" rel="noopener">Shell读取用户输入</a><br><a href="http://www.cnblogs.com/FrankTan/archive/2010/03/01/1634516.html" target="_blank" rel="noopener">Bash Shell中命令行选项/参数处理</a><br><a href="http://wiki.bash-hackers.org/howto/getopts_tutorial" target="_blank" rel="noopener">getopts-tutorial</a><br><a href="http://www.cnblogs.com/fuly550871915/p/4961903.html" target="_blank" rel="noopener">shell基础之脚本执行，命令别名以及快捷键等</a></p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 获取当前脚本路径</title>
    <url>/article/5385/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $(cd `dirname $0`;pwd)</span><br><span class="line">project_path=`dirname $(cd \`dirname $0\`;pwd)`;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 常用快捷键</title>
    <url>/article/bf32/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Alt + F4</td>
<td style="text-align:left">关闭当前窗口</td>
</tr>
<tr>
<td style="text-align:center">Alt + F2</td>
<td style="text-align:left">弹出命令行窗口</td>
</tr>
<tr>
<td style="text-align:center">Alt + Tab</td>
<td style="text-align:left">在窗口之间快速切换。(按住<code>Shift</code>可反向排序。)</td>
</tr>
<tr>
<td style="text-align:center">Alt + `</td>
<td style="text-align:left">在同一个应用程序的不同窗口或Alt+Tab后选中的程序间切换</td>
</tr>
<tr>
<td style="text-align:center">Super + S</td>
<td style="text-align:left">激活工作区切换器。缩小所有工作区。</td>
</tr>
<tr>
<td style="text-align:center">Super + W</td>
<td style="text-align:left">激活“Expo”模式。显示当前工作区的所有窗口。</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Alt + 方向键</td>
<td style="text-align:left">在工作区之间切换</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Alt + Shift + 方向键</td>
<td style="text-align:left">将当前窗口移至其他工作区</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Alt + Delete</td>
<td style="text-align:left">注销</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Super +D</td>
<td style="text-align:left">隐藏所有窗口并显示桌面。再次按下按钮可以恢复窗口。</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Alt + L</td>
<td style="text-align:left">锁定屏幕</td>
</tr>
<tr>
<td style="text-align:center">Print Screen</td>
<td style="text-align:left">获取屏幕截图</td>
</tr>
<tr>
<td style="text-align:center">Alt + Print Screen</td>
<td style="text-align:left">获取窗口的截图</td>
</tr>
<tr>
<td style="text-align:center">Shift + Print Screen</td>
<td style="text-align:left">获取屏幕上某个区域的截图。光标变为十字。点击并拖动选择区域</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Super + ↑</td>
<td style="text-align:left">最大化窗口</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Super + ↓</td>
<td style="text-align:left">将最大化的窗口恢复到初始尺寸</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Super + ←</td>
<td style="text-align:left">在屏幕左半边纵向最大化窗口</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Super + →</td>
<td style="text-align:left">在屏幕右半边纵向最大化窗口</td>
</tr>
<tr>
<td style="text-align:center">Alt + Space</td>
<td style="text-align:left">弹出窗口菜单， 就像在标题栏上右键单击一样</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Alt + F1~F6</td>
<td style="text-align:left">打开虚拟终端<code>tty1~6</code></td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Alt + F7~12</td>
<td style="text-align:left">打开第1~6个GUI终端(由于系统一般只运行一个Unity，所有只有F7生效)</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Shift</td>
<td style="text-align:left">切换输入法</td>
</tr>
</tbody>
</table>
<p>参考资料:<br><a href="https://askubuntu.com/questions/277517/what-does-ctrl-alt-f12-do" target="_blank" rel="noopener">What does “Ctrl + Alt + F12” do?</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 查看配置</title>
    <url>/article/5f7b/</url>
    <content><![CDATA[<ol>
<li><p>内存 <code>free -m</code></p>
</li>
<li><p>系统版本 <code>cat /proc/version</code></p>
</li>
<li><p>查看系统版本 <code>lsb_release -a</code></p>
<blockquote>
<p>LSB Version:    core-9.20160110ubuntu0.2-amd64:core-9.20160110ubuntu0.2-noarch:security-9.20160110ubuntu0.2-amd64:security-9.20160110ubuntu0.2-noarch<br>Distributor ID:    Ubuntu<br>Description:    Ubuntu 16.04.2 LTS<br>Release:    16.04<br>Codename:    xenial</p>
</blockquote>
</li>
<li><p>32位or64位 <code>sudo uname --m</code></p>
<blockquote>
<p>sudo uname –s  显示内核名字<br>sudo uname –r 显示内核版本<br>sudo uname –n 显示网络主机名<br>sudo uname –p 显示cpu</p>
</blockquote>
</li>
<li><p>查看操作系统版本 <code>cat /etc/issue</code></p>
</li>
<li><p>查看系统类型，其中lsb表示(Linux Standard Base) <code>lsb_release -cs</code></p>
</li>
</ol>
<p>参考资料:<br><a href="http://www.cnblogs.com/mafeng/p/6558941.html" target="_blank" rel="noopener">Ubuntu – 下如何查看CPU信息, 包括位数和多核信息</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu apt-get和apt-key</title>
    <url>/article/a7e8/</url>
    <content><![CDATA[<p><strong>APT</strong>为Advanced Packaging Tools的缩写，是Debian及其派生发行版的软件包管理器。</p>
<p><strong>APT</strong>可以自动下载，配置，安装二进制或者源代码格式的软件包，因此简化了Unix系统上管理软件的过程。</p>
<p><strong>APT</strong>最早被设计成<em>dpkg</em>的前端，用来处理deb格式的软件包，现在经过APT-RPM组织修改，APT已经可以安装在支持RPM的系统管理RPM包。</p>
<a id="more"></a>
<blockquote>
<p>APT是一个客户/服务器系统。在服务器上先复制所有DEB包(DEB是Debian软件包格式的文件扩展名)，然后用APT的分析工具(genbasedir)根据每个DEB 包的包头(Header)信息对所有的DEB包进行分析，并将该分析结果记录在一个文件中，这个文件称为DEB 索引清单，APT服务器的DEB索引清单置于base文件夹内。一旦APT 服务器内的DEB有所变动，一定要使用genbasedir产生新的DEB索引清单。客户端在进行安装或升级时先要查询DEB索引清单，从而可以获知所有具有依赖关系的软件包，并一同下载到客户端以便安装。当客户端需要安装、升级或删除某个软件包时，客户端计算机取得DEB索引清单压缩文件后，会将其解压置放于<code>/var/state/apt/lists/</code>，而客户端使用<code>apt-get install</code>或<code>apt-get upgrade</code>命令的时候，就会将这个文件夹内的数据和客户端计算机内的DEB数据库比对，知道哪些DEB已安装、未安装或是可以升级的。</p>
</blockquote>
<h3><span id="apt-get">apt-get</span></h3><p><em>apt-get</em> 是一个下载安装软件包的简单命令行接口，最常用的命令是update(更新)和install(安装)。</p>
<p>用法：</p>
<p>apt-get [选项] 命令 </p>
<p>apt-get [选项] install|remove pkg1 [pkg2 …] </p>
<p>apt-get [选项] source pkg1 [pkg2 …] </p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">update</td>
<td style="text-align:left">重新获取软件包列表</td>
</tr>
<tr>
<td style="text-align:center">upgrade</td>
<td style="text-align:left">进行更新</td>
</tr>
<tr>
<td style="text-align:center">install</td>
<td style="text-align:left">安装新的软件包</td>
</tr>
<tr>
<td style="text-align:center">remove</td>
<td style="text-align:left">移除软件包</td>
</tr>
<tr>
<td style="text-align:center">autoremove</td>
<td style="text-align:left">自动移除全部不使用的软件包</td>
</tr>
<tr>
<td style="text-align:center">purge</td>
<td style="text-align:left">移除软件包和配置文件</td>
</tr>
<tr>
<td style="text-align:center">source</td>
<td style="text-align:left">下载源码档案</td>
</tr>
<tr>
<td style="text-align:center">build-dep</td>
<td style="text-align:left">为源码包配置编译依赖</td>
</tr>
<tr>
<td style="text-align:center">dist-upgrade</td>
<td style="text-align:left">发行版升级,</td>
</tr>
<tr>
<td style="text-align:center">dselect-upgrade</td>
<td style="text-align:left">依照</td>
</tr>
<tr>
<td style="text-align:center">clean</td>
<td style="text-align:left">清除下载的归档文件</td>
</tr>
<tr>
<td style="text-align:center">autoclean</td>
<td style="text-align:left">清除旧的的已下载的归档文件</td>
</tr>
<tr>
<td style="text-align:center">check</td>
<td style="text-align:left">检验是否有损坏的依赖</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-h</td>
<td style="text-align:left">本帮助文件</td>
</tr>
<tr>
<td style="text-align:center">-q</td>
<td style="text-align:left">输出到日志，无进展指示</td>
</tr>
<tr>
<td style="text-align:center">-qq</td>
<td style="text-align:left">不输出信息，错误除外</td>
</tr>
<tr>
<td style="text-align:center">-d</td>
<td style="text-align:left">仅下载，不安装或解压归档文件</td>
</tr>
<tr>
<td style="text-align:center">-s</td>
<td style="text-align:left">不实际安装。模拟执行命令</td>
</tr>
<tr>
<td style="text-align:center">-y</td>
<td style="text-align:left">假定对所有的询问选是，不提示</td>
</tr>
<tr>
<td style="text-align:center">-f</td>
<td style="text-align:left">尝试修正系统依赖损坏处</td>
</tr>
<tr>
<td style="text-align:center">-m</td>
<td style="text-align:left">如果归档无法定位，尝试继续</td>
</tr>
<tr>
<td style="text-align:center">-u</td>
<td style="text-align:left">同时显示更新软件包的列表</td>
</tr>
<tr>
<td style="text-align:center">-b</td>
<td style="text-align:left">获取源码包后编译</td>
</tr>
<tr>
<td style="text-align:center">-V</td>
<td style="text-align:left">显示详细的版本号</td>
</tr>
<tr>
<td style="text-align:center">-c=?</td>
<td style="text-align:left">阅读此配置文件</td>
</tr>
<tr>
<td style="text-align:center">-o=?</td>
<td style="text-align:left">设置自定的配置选项，如 -o dir::cache=/tmp</td>
</tr>
</tbody>
</table>
<p>例子:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索包</span></span><br><span class="line">apt-cache search firefox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取包的相关信息，如说明、大小、版本等</span></span><br><span class="line">apt-cache show firefox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装包</span></span><br><span class="line">apt-get install firefox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新安装包</span></span><br><span class="line">apt-get install firefox --reinstall</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修复安装<span class="string">"-f = --fix-missing"</span></span></span><br><span class="line">apt-get -f install firefox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除包</span></span><br><span class="line">apt-get remove firefox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除包，包括删除配置文件等</span></span><br><span class="line">apt-get remove firefox --purge</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新源</span></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新已安装的包</span></span><br><span class="line">apt-get upgrade </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级系统</span></span><br><span class="line">apt-get dist-upgrade </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 dselect 升级</span></span><br><span class="line">apt-get dselect-upgrade</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 了解使用依赖</span></span><br><span class="line">apt-cache depends firefox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看该包被哪些包依赖</span></span><br><span class="line">apt-cache rdepends firefox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装相关的编译环境</span></span><br><span class="line">apt-get build-dep firefox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载该包的源代码</span></span><br><span class="line">apt-get source firefox</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将已经删除了的软件包的.deb安装文件从硬盘中删除掉</span></span><br><span class="line">apt-get autoclean</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 类似上面的命令，但它删除包缓存中的所有包</span></span><br><span class="line">apt-get clean</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查是否有损坏的依赖</span></span><br><span class="line">apt-get check</span><br></pre></td></tr></table></figure>
<h3><span id="apt-key">apt-key</span></h3><p><em>apt-key</em>是Debian软件包的安全管理工具。每个发布的deb包，都是通过密钥认证的，apt-key用来管理密钥。</p>
<p>用法：apt-key [–keyring file][command][arguments]</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">apt-key add <file></file></td>
<td style="text-align:left">把下载的key添加到本地trusted数据库中</td>
</tr>
<tr>
<td style="text-align:left">apt-key del <keyid></keyid></td>
<td style="text-align:left">通过keyid删除key</td>
</tr>
<tr>
<td style="text-align:left">apt-key export <keyid></keyid></td>
<td style="text-align:left">通过keyid导出key</td>
</tr>
<tr>
<td style="text-align:left">apt-key exportall</td>
<td style="text-align:left">导出本地trusted数据库中的所有key</td>
</tr>
<tr>
<td style="text-align:left">apt-key update</td>
<td style="text-align:left">通过key包来更新key</td>
</tr>
<tr>
<td style="text-align:left">apt-key net-update</td>
<td style="text-align:left">通过网络更新key</td>
</tr>
<tr>
<td style="text-align:left">apt-key list</td>
<td style="text-align:left">列出所有的key</td>
</tr>
<tr>
<td style="text-align:left">apt-key finger</td>
<td style="text-align:left">列出所有验证指纹</td>
</tr>
<tr>
<td style="text-align:left">apt-key adv</td>
<td style="text-align:left">设置key的高级配置</td>
</tr>
</tbody>
</table>
<p>参考资料:<br><a href="http://linux.51yip.com/search/apt-get" target="_blank" rel="noopener">apt-get</a><br><a href="http://linux.51yip.com/search/apt-key" target="_blank" rel="noopener">apt-key</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu apt-get 应用socks5代理</title>
    <url>/article/b95e/</url>
    <content><![CDATA[<ol>
<li>直接代理<ul>
<li><code>sudo apt-get -o Acquire::socks::proxy=&quot;socks://127.0.0.1:8399/&quot; update</code></li>
<li><code>sudo apt-get -o Acquire::http::proxy=&quot;http://127.0.0.1:8000/&quot; update</code></li>
</ul>
</li>
<li>配置文件<ul>
<li><code>Acquire::http::proxy &quot;http://127.0.0.1:8000/&quot;;</code></li>
<li><code>cp /etc/apt/apt.conf ~/apt_proxy.conf</code></li>
<li><code>Acquire::ftp::proxy &quot;ftp://127.0.0.1:8000/&quot;;</code></li>
<li><code>Acquire::https::proxy &quot;https://127.0.0.1:8000/&quot;;</code></li>
<li><code>sudo apt-get -c ~/apt_proxy.conf update</code></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 修改hostname导致sudo无法使用</title>
    <url>/article/ead8/</url>
    <content><![CDATA[<p>修改/etc/hostname时，需要同步修改/etc/hosts =&gt; 127.0.1.1对应名称(如有)，否则sudo命令无法使用</p>
<p>解决方法:</p>
<p>指定host切换root</p>
<p><code>sudo -h localhost su -</code></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>sudo</tag>
        <tag>hostname</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 卸载软件</title>
    <url>/article/873d/</url>
    <content><![CDATA[<ol>
<li><p><code>apt-get autoclean</code></p>
<p>将已经删除了的软件包的.deb安装文件从硬盘中删除掉</p>
</li>
<li><p><code>apt-get clean</code><br>类似上面的命令，但它删除包缓存中的所有包</p>
</li>
<li><p><code>apt-get autoremove</code></p>
<p>删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包</p>
</li>
<li><p><code>apt-get remove package_name</code></p>
<p>删除已安装的软件包(保留配置文件)</p>
</li>
<li><p><code>apt-get --purge remove package_name</code></p>
<p>删除已安装包(不保留配置文件)</p>
</li>
<li><p><code>apt-cache search package_name</code></p>
<p>查找一个软件包</p>
</li>
<li><p><code>apt-cache show package_name</code></p>
<p>查看软件包信息</p>
</li>
<li><p><code>apt-cache depends package_name</code></p>
<p>查看软件包的依赖关系</p>
</li>
<li><p><code>apt-cache dump</code></p>
<p>查看每个软件包的简要信息</p>
</li>
<li><p><code>apt list --installed</code></p>
<p>列出全部已安装软件包</p>
</li>
<li><p><code>dpkg -l</code></p>
<p>列出全部已安装软件包</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 域名服务器</title>
    <url>/article/4767/</url>
    <content><![CDATA[<p>参考资料:<br><a href="http://wiki.ubuntu.org.cn/Bind9%E5%AE%89%E8%A3%85%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">Bind9安装设置指南</a><br><a href="http://www.cnblogs.com/cobbliu/archive/2013/03/19/2970311.html" target="_blank" rel="noopener">DNS开源服务器BIND最小配置详解</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Bind9</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装Markdown编辑器--Typora</title>
    <url>/article/526b/</url>
    <content><![CDATA[<p><strong><a href="https://typora.io/" target="_blank" rel="noopener">Typora</a></strong> 是一款免费的轻量级Markdown编辑器，非常的简洁，支持Html、PDF、Word等多种格式导出，适用于<em>OS X</em>、<em>Windows</em>、<em>Linux</em>三种操作系统。</p>
<p>与其他Markdown编辑器不同的是，Typora没有采用源代码与预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了实时预览的功能，但也可以切换至源代码编辑模式。</p>
<p><strong>Typora Markdown格式参考请看<a href="http://support.typora.io/Markdown-Reference/" target="_blank" rel="noopener">Markdown Reference</a></strong></p>
<p><em>按<code>Enter</code>创建新段落，按<code>Shift + Enter</code>创建换行符</em></p>
<p>安装步骤:</p>
<ol>
<li><p>设置密钥</p>
<p><code>$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</code></p>
</li>
<li><p>添加第三方软件源</p>
<p><code>$ sudo add-apt-repository &#39;deb https://typora.io ./linux/&#39;</code></p>
</li>
<li><p>更新软件源中的所有软件列表</p>
<p><code>$ sudo apt-get update</code></p>
</li>
<li><p>安装Typora</p>
<p><code>$ sudo apt-get install typora</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Markdown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装微信</title>
    <url>/article/55f7/</url>
    <content><![CDATA[<blockquote>
<p>sudo apt install snapd snapd-xdg-open<br>sudo snap install electronic-wechat<br><strong>uninstall</strong> sudo snap remove electronic-wechat</p>
</blockquote>
<ul>
<li>or use Franz</li>
</ul>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装系统监视器</title>
    <url>/article/127d/</url>
    <content><![CDATA[<ol>
<li><p>添加第三方软件源</p>
<p><code>$ sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor</code></p>
</li>
<li><p>更新软件源中的所有软件列表</p>
<p><code>$ sudo apt-get update</code></p>
</li>
<li><p>安装indicator-sysmonitor</p>
<p><code>$ sudo apt-get install indicator-sysmonitor</code></p>
</li>
<li><p>启动</p>
<p><code>$ indicator-sysmonitor</code></p>
</li>
</ol>
<p>效果图如下:</p>
<p><img src="../../resource/images/ubuntu-sysmonitor-04.png" alt=""></p>
<p><img src="../../resource/images/ubuntu-sysmonitor-01.png" alt=""></p>
<p><img src="../../resource/images/ubuntu-sysmonitor-02.png" alt=""></p>
<p><img src="../../resource/images/ubuntu-sysmonitor-03.png" alt=""></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>indicator-sysmonitor</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04 搭建Samba服务</title>
    <url>/article/f12a/</url>
    <content><![CDATA[<h3><span id="samba介绍">Samba介绍</span></h3><p><strong>Samba</strong>，是种用来让UNIX系列的操作系统与Windows操作系统的SMB/CIFS(Server Message Block/Common Internet File System)网络协议做链接的(自由软件)。第三版不仅可访问及分享SMB的文件夹及打印机，本身还可以集成入Windows Server的网域，扮演为网域控制站(Domain Controller)以及加入Active Directory成员。简而言之，此软件在Windows与UNIX系列操作系统之间搭起一座桥梁，让两者的资源可互通有无。</p>
<p>Samba能够为选定的Unix目录(包括所有子目录)创建网络共享。该功能使得Windows用户可以像访问普通Windows下的文件夹那样来通过网络访问这些Unix目录。</p>
<a id="more"></a>
<h3><span id="安装配置samba">安装配置Samba</span></h3><ol>
<li><p><code>sudo apt-get install samba</code></p>
</li>
<li><p><code>sudo mkdir /data/share</code></p>
</li>
<li><p><code>sudo chmod 777 /data/share</code></p>
</li>
<li><p><code>sudo touch /etc/samba/smbpasswd</code></p>
</li>
<li><p><code>sudo smbpasswd -a wayde</code></p>
</li>
<li><p><code>sudo vim /etc/samba/smb.conf</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[share]</span></span><br><span class="line"><span class="attr">path</span>=/data</span><br><span class="line"><span class="attr">available</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">browseable</span>=<span class="literal">yes</span></span><br><span class="line">valid users=wayde</span><br><span class="line"><span class="attr">public</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">writable</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>sudo /etc/init.d/samba restart</code></p>
</li>
</ol>
<h3><span id="如何访问samba搭建的共享目录">如何访问Samba搭建的共享目录</span></h3><h4><span id="ubuntu-1604">Ubuntu 16.04</span></h4><blockquote>
<p>文件 - 连接到服务器，输入smb://192.168.0.21/</p>
<p>或者安装smbclient:</p>
<p>sudo apt-get install smbclient</p>
<p>查看列表: smbclient -L 192.168.0.21 -U wayde</p>
<p>连接共享目录: smbclient //192.168.0.21/share -U wayde</p>
<p>挂载共享目录:</p>
<p>sudo mount -t cifs -o username=wayde,password=123456 //192.168.0.21/share local_path</p>
</blockquote>
<h4><span id="windows-10">Windows 10</span></h4><blockquote>
<p>右键此电脑-映射网络驱动，然后输入: \\192.168.0.21\share</p>
</blockquote>
<h4><span id="mac-os">Mac Os</span></h4><blockquote>
<p>打开 Finder，按command+K组合键，输入地址: smb://192.168.0.21</p>
</blockquote>
<p>遇到问题:</p>
<p><code>Failed to add entry for user wayde.</code></p>
<blockquote>
<p>这是因为没有加相应的系统账号，所以会提示Failed to add entry for user的错误，只需增加相应的系统账号wayde就可以了</p>
</blockquote>
<p>参考资料:<br><a href="http://www.cnblogs.com/xycoin/p/6095688.html" target="_blank" rel="noopener">Debian下配置Samba服务器</a><br><a href="http://blog.csdn.net/vincentlmeng/article/details/72623013" target="_blank" rel="noopener">linux下共享文件夹（window可访问，linux也可以访问）</a><br><a href="http://blog.csdn.net/zcf1002797280/article/details/49805603" target="_blank" rel="noopener">Ubuntu终端访问samba服务器</a><br><a href="https://wiki.archlinux.org/index.php/Samba_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">Samba (简体中文)</a>)</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Samba</tag>
        <tag>共享目录</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 添加DNS服务器</title>
    <url>/article/fcb8/</url>
    <content><![CDATA[<p><code>sudo vim /etc/resolv.conf</code></p>
<p>添加:  <code>nameserver 10.17.1.11</code></p>
<p>清除dns缓存(重启网卡): <code>sudo /etc/init.d/networking restart</code></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 添加开机启动脚本</title>
    <url>/article/ab9e/</url>
    <content><![CDATA[<ol>
<li><p>rc.local脚本</p>
<p><code>sudo vim /etc/rc.local</code></p>
<p>在exit 0之前添加命令或者shell脚本</p>
</li>
<li><p>update-rc.d增加开机启动服务</p>
<p><code>touch /etc/init.d/wayde_service</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## BEGIN INIT INFO</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides:          wayde</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Start:    <span class="variable">$network</span> <span class="variable">$local_fs</span> <span class="variable">$remote_fs</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Stop:     <span class="variable">$network</span> <span class="variable">$local_fs</span> <span class="variable">$remote_fs</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Stop:      0 1 6</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Short-Description: Custom startup items <span class="keyword">for</span> wayde</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description:       Rt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## END INIT INFO</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> openvpn</span></span><br><span class="line">/usr/sbin/openvpn --config /etc/openvpn/config/server.conf --daemon</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<p><code>chmod +x wayde_service</code></p>
</li>
<li><p>添加到启动脚本</p>
<p><code>update-rc.d wayde_service defaults 90</code></p>
</li>
<li><p>移除启动脚本</p>
<p><code>update-rc.d -f wayde_service remove</code></p>
</li>
<li><p>通过service命令管理脚本</p>
<p><code>sudo service wayde_service status</code><br>​<code>sudo service wayde_service start</code><br>​<code>sudo service wayde_service stop</code><br>​<code>sudo service wayde_service restart</code></p>
</li>
<li><p><code>在/etc/init.d/下新建启动脚本，在 /etc/rc2.d/ 下用软链接，链接此脚本即可。</code></p>
<blockquote>
<p>/etc  下有 rc0.d  – rc6.d</p>
<p>分别代表不同的级别：</p>
<p>0: 关闭计算机<br>1: 单用户模式<br>2: 无网络多用户模式<br>3: 有网络多用户模式<br>4: 保留作自定义，否则同运行级 3<br>5: 同运行级 4，一般用于图形界面(GUI)登录(如 X的 xdm 或 KDE的 kdm)<br>6: 重启动计算机</p>
</blockquote>
</li>
</ol>
<p>参考资料:<br><a href="http://www.linuxidc.com/Linux/2017-09/147166.htm" target="_blank" rel="noopener">Ubuntu 16.04设置rc.local开机启动命令/脚本的方法</a><br><a href="http://laowafang.blog.51cto.com/251518/963534/" target="_blank" rel="noopener">什么是 LSB</a><br><a href="http://blog.csdn.net/wei_xiaox126/article/details/42420857" target="_blank" rel="noopener">linux （debian） 设置开机自启动</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>开机启动</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 输出声音</title>
    <url>/article/af19/</url>
    <content><![CDATA[<p>参考资料:<br> <a href="http://blog.csdn.net/liufunan/article/details/52090116" target="_blank" rel="noopener">Ubuntu 14.04 没有声音解决</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移配置bind9-dns服务器</title>
    <url>/article/3e4d/</url>
    <content><![CDATA[<ol>
<li><p>服务器</p>
<p><code>apt-get install -y bind9</code></p>
</li>
<li><p>测试工具</p>
<p><code>apt-get install bind9-host dnsutils</code></p>
</li>
<li><p>文档</p>
<p><code>apt-get install bind9-doc</code></p>
</li>
<li><p>拷贝配置文件</p>
<p><code>scp /etc/bind/* root@10.17.1.11:/etc/bind</code></p>
</li>
<li><p>检查dns服务器状态</p>
<p><code>host $record localhost</code> or <code>dig $record @localhost</code></p>
</li>
<li><p>客户端检查dns</p>
<p><code>nslookup wiki.pandll.org</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Server:		127.0.1.1</span><br><span class="line">Address:	127.0.1.1#53</span><br><span class="line"></span><br><span class="line">Name:	wiki.pandll.org</span><br><span class="line">Address: 10.17.1.99​</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Bind9</tag>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 重启搜狗输入法</title>
    <url>/article/2867/</url>
    <content><![CDATA[<ol>
<li><p>强制kill进程</p>
<p><code>ps -ef | grep &#39;sogou-qimpanel&#39; | awk &#39;{print $2}&#39; | xargs kill -9</code></p>
</li>
<li><p>启动服务</p>
<p><code>fcitx</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>sogou输入法</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim进阶</title>
    <url>/article/72bb/</url>
    <content><![CDATA[<p>参考资料:<br><a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="noopener">简明 VIM 练级攻略</a><br><a href="https://coolshell.cn/articles/4990.html" target="_blank" rel="noopener">程序员技术练级攻略</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 复制内容粘贴vim外部</title>
    <url>/article/2eaf/</url>
    <content><![CDATA[<blockquote>
<p>vim “+y</p>
</blockquote>
<p>参考资料:<br><a href="http://blog.csdn.net/dongfengkuayue/article/details/41257247" target="_blank" rel="noopener">ubuntu下vim中内容复制到浏览器</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim设置tab键为4个空格</title>
    <url>/article/4a81/</url>
    <content><![CDATA[<p><code>vim /etc/vim/vimrc</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">set ts=4</span><br><span class="line">set expandtab</span><br><span class="line">set autoindent</span><br></pre></td></tr></table></figure>
<ol>
<li><p>TAB替换为空格</p>
<blockquote>
<p>:set ts=4<br>:set expandtab<br>:%retab!</p>
</blockquote>
</li>
<li><p>空格替换为TAB</p>
<blockquote>
<p>:set ts=4</p>
<p>:set noexpandtab</p>
<p>:%retab!</p>
<p>加!是用于处理非空白字符之后的TAB，即所有的TAB，若不加!，则只处理行首的TAB。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSM介绍</title>
    <url>/article/4689/</url>
    <content><![CDATA[<h3><span id="nssm介绍">NSSM介绍</span></h3><p><strong><a href="https://nssm.cc/" target="_blank" rel="noopener">NSSM</a></strong>(the Non-Sucking Service Manager)是Windows环境下一款<strong>免安装</strong>的服务管理软件，它可以将应用封装成服务，使之像windows服务可以设置自动启动等。并且可以监控程序运行状态，程序异常中断后自动启动，实现守护进程的功能。不仅支持图形界面操作，也完全支持命令行设置。</p>
<h3><span id="nssm用法">NSSM用法</span></h3><p>打开<a href="https://nssm.cc/download" target="_blank" rel="noopener">下载页面</a>，下载最新版(当前为2.24)，下载完成后解压到某个路径，然后将win64/win32文件夹路径(<code>D:\download\nssm-2.24\nssm-2.24\win64</code>)添加到环境变量Path即可。</p>
<a id="more"></a>
<h3><span id="nssm命令">NSSM命令</span></h3><p>图形界面操作很简单，基本看了就会，在此不再赘述，下面主要介绍命令行用法</p>
<ol>
<li><p>安装服务<br><code>nssm install &lt;servicename&gt; &lt;app&gt; [&lt;args&gt;...]</code></p>
<p>示例:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nssm install celery-demo-worker <span class="string">"c:\Program Files\Python35\Scripts\celery.exe"</span></span><br><span class="line">nssm <span class="built_in">set</span> celery-demo-worker AppDirectory d:\celery-demo</span><br><span class="line">nssm <span class="built_in">set</span> celery-demo-worker AppParameters -A run worker --loglevel=debug -c 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务<br><code>nssm start &lt;servicename&gt;</code></p>
</li>
<li><p>停止服务<br><code>nssm stop &lt;servicename&gt;</code></p>
</li>
<li><p>重启服务<br><code>nssm restart &lt;servicename&gt;</code></p>
</li>
<li><p>查看服务状态<br><code>nssm status &lt;servicename&gt;</code></p>
</li>
<li><p>手动轮转日志文件<br><code>nssm rotate &lt;servicename&gt;</code></p>
</li>
<li><p>删除服务<br><code>nssm remove &lt;servicename&gt; [confirm]</code></p>
<p><em>加confirm后不会弹确认窗口</em> </p>
</li>
<li><p>获取某项配置信息<br><code>nssm get &lt;servicename&gt; &lt;parameter&gt; [subparameter]</code></p>
</li>
<li><p>单独设置某项配置<br><code>nssm set &lt;servicename&gt; &lt;parameter&gt; [subparameter] value</code></p>
</li>
<li><p>重置某项配置<br><code>nssm reset &lt;servicename&gt; &lt;parameter&gt; [subparameter]</code></p>
</li>
<li><p>暂停/继续服务<br><code>nssm pause &lt;servicename&gt;</code><br><code>nssm continue &lt;servicename&gt;</code></p>
</li>
</ol>
<p>参考资料:<br><a href="http://www.cnblogs.com/TianFang/p/7912648.html" target="_blank" rel="noopener">使用NSSM将exe封装为服务</a><br><a href="https://lz5z.com/nssm%E5%B0%86%E5%BA%94%E7%94%A8%E5%86%99%E5%85%A5Windows%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">nssm 将应用写入 Windows 服务</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>NSSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows系统下SSH的客户端与服务端</title>
    <url>/article/f1e/</url>
    <content><![CDATA[<h3><span id="openssh-for-windows介绍">OpenSSH For Windows介绍</span></h3><p><strong>OpenSSH For Windows</strong>实际上是Cygwin系列安装包中的OpenSSH安装包，它在无需安装整个Cygwin安装包的情况下安装OpenSSH所需的最小工具集。</p>
<p><strong>Cygwin</strong>是许多自由软件的集合，最初由Cygnus Solutions开发，用于各种版本的Microsoft Windows上，运行类UNIX系统。<br>Cygwin的主要目的是通过重新编译，将POSIX系统(例如Linux、BSD，以及其他Unix系统)上的软件移植到Windows上。<br>Cygwin移植工作在Windows NT上比较好，在Windows 95和Windows 98上，相对差劲一些。目前Cygwin由Red Hat等负责维护。</p>
<p><strong>OpenSSH For Windows</strong>安装包含客户端和服务端，安装时可自由选择。</p>
<p>软件下载地址: <a href="http://sshwindows.sourceforge.net/download/" target="_blank" rel="noopener">http://sshwindows.sourceforge.net/download/</a></p>
<a id="more"></a>
<h4><span id="服务端">服务端</span></h4><p>安装完成后，运行cmd</p>
<ol>
<li>进入OpenSSH安装目录的bin目录</li>
<li>运行<code>mkgroup -l &gt;&gt; ../etc/group</code>命令</li>
<li>运行<code>mkpasswd -l -u username &gt;&gt; ../etc/passwd</code></li>
<li>运行<code>net start opensshd</code>，启动ssh server</li>
</ol>
<p>启动成功后，其它机器即可通过ssh 命令连接此电脑了。输入用户名密码后，就和本机打开cmd命令行一样了。</p>
<h3><span id="系统原生ssh">系统原生SSH</span></h3><p>Windows 10 引入了OpenSSH，笔者的Windows机器，系统版本如下:</p>
<p><img src="../../resource/images/windows-10-ssh-02.png" alt="Windows10 Version"></p>
<p><em>查看OS系统版本信息，cmd命令行输入<code>winver</code>回车即可。</em></p>
<p>Windows 10 SSH相关的功能包有以下3个</p>
<p><img src="../../resource/images/windows-10-ssh-04.png" alt=""></p>
<h4><span id="客户端">客户端</span></h4><p>依次进入Windows设置=&gt;系统=&gt;应用与功能=&gt;管理可选功能=&gt;添加功能，选中<code>OpenSSH Client(Beta)</code>安装，安装成功后，在计算机管理=&gt;服务和应用程序=&gt;服务里面启动<code>ssh-agent</code>。</p>
<p>启动成功后，cmd命令行即可直接ssh连接其它Linux机器，如下图所示</p>
<p><img src="../../resource/images/windows-10-ssh-03.png" alt=""></p>
<h4><span id="服务端">服务端</span></h4><p>Windows提供有两种途径使用SSH SERVER，分别是<code>OpenSSH Server(Beta)</code>和<code>Windows 开发人员模式</code>。</p>
<p>如果是Windows 10，且OS内部版本号在14352之后，则可以使用如下方法开启<code>ssh server</code></p>
<p><strong>开启方法:</strong></p>
<p>进入<strong>针对开发人员</strong>设置，先将<strong>开发人员模式</strong>开启，再将<strong>设备发现</strong>–&gt;<strong>允许USB连接和本地网络发现你的设备</strong>开启。</p>
<p><em>也可以手动开启，依次进入Windows设置=&gt;系统=&gt;应用与功能=&gt;管理可选功能=&gt;添加功能，选中Windows 开发人员模式安装，然后在计算机管理=&gt;服务和应用程序=&gt;服务里面启动<code>SSH Server Broker</code>和<code>SSH Server Proxy</code></em></p>
<p><img src="../../resource/images/windows-10-ssh-01.png" alt="开启ssh server"></p>
<p>开启成功后，其它机器即可通过ssh命令连接此电脑了。输入用户名密码后，就和本机打开cmd命令行一样了。</p>
<p>参考资料:<br><a href="https://blog.csdn.net/james05y/article/details/1785242" target="_blank" rel="noopener">两款在windows上运行的SSH服务器-OpenSSH for Windows和Copssh</a><br><a href="https://blog.csdn.net/zhouminghong/article/details/1626097" target="_blank" rel="noopener">在windows下使用OpenSSH（上）</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 KMS激活</title>
    <url>/article/5222/</url>
    <content><![CDATA[<h4><span id="kms介绍">KMS介绍</span></h4><p><strong>大量授权密钥</strong>(Volume License Key，简称VLK)是软件公司使用的一个词汇，用户购买批量授权，便会获得一产品密钥，该密钥可安装于多部电脑。换言之，企业可于多台电脑使用同一产品密钥，而不需为每台电脑输入不同的密钥。这种授权方式通常只给商业机构、政府和教育机构，价格会因购买数量、类型和使用条款而不同。</p>
<p>从Windows Vista开始，Microsoft使用MAK(Multiple Activation Keys)和<strong>KMS(Key Management Server)</strong>取代旧的大量授权密钥。<strong>客户端需要每180天连回KMS</strong>。</p>
<a id="more"></a>
<h4><span id="激活步骤">激活步骤</span></h4><ol>
<li><p>以管理员身份运行<code>cmd</code></p>
</li>
<li><p>卸载当前产品密钥</p>
<p><code>slmgr.vbs /upk</code></p>
</li>
<li><p>安装产品密钥</p>
<p><code>slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43</code></p>
</li>
<li><p>设置KMS服务器地址</p>
<p><em>设置前，先<code>ping</code>下kms服务器<code>zh.us.to</code>是否可用</em></p>
<p><code>slmgr /skms zh.us.to</code></p>
<p>备选地址:<br><code>kms.xspace.in</code><br><code>kms.shuax.com</code><br><code>skms.ddns.net</code><br><code>xykz.f3322.org</code><br><code>kms.chinancce.com</code><br><code>kms.lotro.cc</code><br><code>ss.yechiu.xin</code>  </p>
</li>
<li><p>连接KMS服务器激活Windows</p>
<p><code>slmgr /ato</code></p>
<p>耐心等待片刻，会有弹窗提示成功激活。</p>
<p>如果激活失败，可换个产品密钥再试。</p>
</li>
</ol>
<h4><span id="查看过期时间">查看过期时间</span></h4><p><code>slmgr.vbs -xpr</code></p>
<h4><span id="查看详细激活信息">查看详细激活信息</span></h4><p><code>slmgr.vbs -dlv</code></p>
<p>参考资料:<br><a href="http://blog.sina.com.cn/s/blog_9cdc3ed40102wn9a.html" target="_blank" rel="noopener">win10的kms激活命令</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows10</tag>
        <tag>KMS</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10 支持多用户同时登陆</title>
    <url>/article/f1e/</url>
    <content><![CDATA[<p><code>Windows 10</code>虽然是多用户多任务操作系统，但是微软对个人版做了限制，同时只允许一个用户登陆，后者登陆会将前者踢出。支持多用户同时登陆，需要进行破解。</p>
<p>破解步骤:</p>
<ol>
<li>下载最新<a href="https://github.com/stascorp/rdpwrap/releases" target="_blank" rel="noopener">RDP Wrapper</a>的zip安装包，并解压</li>
<li>以管理员身份运行<code>install.bat</code></li>
<li>以管理员身份运行<code>RDPCheck.exe</code>，如果全绿则破解成功</li>
<li>如果出现<code>Listening [not supported]</code>，则还需以管理员身份运行<code>update.bat</code></li>
</ol>
<p>参考资料:<br><a href="https://github.com/stascorp/rdpwrap" target="_blank" rel="noopener">RDP Wrapper Library</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>修改iTunes备份目录路径释放C盘空间</title>
    <url>/article/6ede/</url>
    <content><![CDATA[<p>iTunes默认的备份路径就在C盘，而且不可设置</p>
<p><code>iTunes</code>默认的备份路径就在C盘，而且不可设置。</p>
<p>修改步骤:</p>
<ol>
<li>建立实际存储文件目录(E:\Apple Computer\iTunes\MobileSync)</li>
<li>下载Junction并解压(E:\Soft Download\Junction)</li>
<li>管理员身份运行cmd</li>
<li><code>junction64.exe &quot;c:\Users\zhangw\AppData\Roaming\Apple Computer\MobileSync&quot; &quot;e:\Apple Computer\iTunes\MobileSync&quot;</code></li>
</ol>
<a id="more"></a>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Microsoft Windows [版本 6.1.7601]</span><br><span class="line"></span><br><span class="line">版权所有 (c) 2009 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;e:</span><br><span class="line"></span><br><span class="line">E:&gt;cd "e:\Soft Download\Junction"</span><br><span class="line"></span><br><span class="line">E:\Soft Download\Junction&gt;</span><br><span class="line"></span><br><span class="line">E:\Soft Download\Junction&gt;junction64.exe "c:\Users\zhangw\AppData\Roaming\Apple</span><br><span class="line"></span><br><span class="line">Computer\MobileSync" "e:\Apple Computer\iTunes\MobileSync"</span><br><span class="line"></span><br><span class="line">Junction v1.07 - Creates and lists directory links</span><br><span class="line"></span><br><span class="line">Copyright (C) 2005-2016 Mark Russinovich</span><br><span class="line"></span><br><span class="line">Sysinternals - www.sysinternals.com</span><br><span class="line"></span><br><span class="line">Created: c:\Users\zhangw\AppData\Roaming\Apple Computer\MobileSync</span><br><span class="line"></span><br><span class="line">Targetted at: e:\Apple Computer\iTunes\MobileSync</span><br></pre></td></tr></table></figure>
<p>参考链接:<br><a href="https://jingyan.baidu.com/article/b907e627ab1bad46e7891cb1.html" target="_blank" rel="noopener">怎样修改iTunes备份目录路径释放C盘空间</a><br><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/junction" target="_blank" rel="noopener">junction下载链接</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 通过Putty+SSH代理</title>
    <url>/article/7f21/</url>
    <content><![CDATA[<ol>
<li><p>下载putty</p>
</li>
<li><p>配置putty：Connection-&gt;SSH-&gt;Tunnels</p>
<blockquote>
<p>在Putty的登录设置中配置tunnel，目标设置为Dynamic，添加一个端口7070，点击Add，一个动态转发端口就实现了。</p>
<p>然后用相应帐号SHH登录后：除了登录的终端窗口以外，本地的7070连服务器的22端口之间就有了一个SSH加密的转发通道了。</p>
</blockquote>
</li>
<li><p>Chrome插件 <a href="chrome-extension://padekgcemlokbadohgkifijomclgjgif/options.html#!/about" target="_blank" rel="noopener">SwitchyOmega</a></p>
</li>
</ol>
<p>参考资料:<br><a href="http://sosuny.iteye.com/blog/608034" target="_blank" rel="noopener"><a href="http://sosuny.iteye.com/blog/608034" target="_blank" rel="noopener">利用PuTTY+SSH端口转发实现加密代理上网</a></a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>ssh</tag>
        <tag>putty</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 移动端自动适配</title>
    <url>/article/4206/</url>
    <content><![CDATA[<p>为更好提升移动端的用户体验，一般都会单独的开发一个专门给移动端用户访问的站点(如m.baidu.com)。当用户用移动终端访问站点时，自动跳转到m站点。</p>
<p>跳转规则既可以放在前端，由JS控制，也可以通过配置nginx，实现自动跳转。nginx方式减少了网络请求，更快。</p>
<p>那Nginx要如何配置呢？</p>
<p>常见的方案是，通过<code>User-Agent</code>判断是否移动设备，如果是则跳转到m站点。可是移动终端类型那么多，要全部自己写也是挺麻烦的。还好有个检测移动浏览器的开源项目<a href="http://detectmobilebrowsers.com/" target="_blank" rel="noopener">Detect Mobile Browsers</a>，直接拿过来用就好了。</p>
<a id="more"></a>
<h4><span id="整站适配">整站适配</span></h4><p>如果是移动设备访问<code>blog.pandll.com</code>，则自动跳转至<code>m.pandll.com</code>。</p>
<p>Nginx配置如下:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  blog.pandll.com;</span><br><span class="line">  	<span class="attribute">root</span> 		/home/www/blog.pandll.com/public;</span><br><span class="line">  	<span class="attribute">index</span> 		index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$mobile_rewrite</span> do_not_perform;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* "(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge</span> |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(<span class="number">4</span>|<span class="number">6</span>)<span class="number">0</span>|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$mobile_rewrite</span> perform;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (<span class="variable">$http_user_agent</span> ~* "</span>^(<span class="number">1207</span>|<span class="number">6310</span>|<span class="number">6590</span>|3gso|4thp|<span class="number">50</span>[<span class="number">1</span>-<span class="number">6</span>]i|<span class="number">770s</span>|<span class="number">802s</span>|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(<span class="number">12</span>|\-d)|el(<span class="number">49</span>|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([<span class="number">4</span>-<span class="number">7</span>]<span class="number">0</span>|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-<span class="number">5</span>|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(<span class="number">20</span>|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(<span class="literal">no</span>|xi)|lg( g|\/(k|l|u)|<span class="number">50</span>|<span class="number">54</span>|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(<span class="number">01</span>|<span class="number">21</span>|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(<span class="number">01</span>|<span class="number">02</span>|bi|de|do|t(\-| |o|v)|zz)|mt(<span class="number">50</span>|p1|v )|mwbp|mywa|n10[<span class="number">0</span>-<span class="number">2</span>]|n20[<span class="number">2</span>-<span class="number">3</span>]|n30(<span class="number">0</span>|<span class="number">2</span>)|n50(<span class="number">0</span>|<span class="number">2</span>|<span class="number">5</span>)|n7(<span class="number">0</span>(<span class="number">0</span>|<span class="number">1</span>)|<span class="number">10</span>)|ne((c|m)\-|<span class="literal">on</span>|tf|wf|wg|wt)|nok(<span class="number">6</span>|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(<span class="number">13</span>|\-([<span class="number">1</span>-<span class="number">8</span>]|c))|phil|pire|pl(ay|uc)|pn\-<span class="number">2</span>|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(<span class="number">07</span>|<span class="number">12</span>|<span class="number">21</span>|<span class="number">32</span>|<span class="number">60</span>|\-[<span class="number">2</span>-<span class="number">7</span>]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(<span class="number">01</span>|h\-|oo|p\-)|sdk\/|se(c(\-|<span class="number">0</span>|<span class="number">1</span>)|<span class="number">47</span>|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-<span class="number">0</span>|sl(<span class="number">45</span>|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(<span class="number">01</span>|h\-|v\-|v )|sy(<span class="number">01</span>|mb)|t2(<span class="number">18</span>|<span class="number">50</span>)|t6(<span class="number">00</span>|<span class="number">10</span>|<span class="number">18</span>)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(<span class="number">70</span>|m\-|m3|m5)|tx\-<span class="number">9</span>|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(<span class="number">40</span>|<span class="number">5</span>[<span class="number">0</span>-<span class="number">3</span>]|\-v)|vm40|voda|vulc|vx(<span class="number">52</span>|<span class="number">53</span>|<span class="number">60</span>|<span class="number">61</span>|<span class="number">70</span>|<span class="number">80</span>|<span class="number">81</span>|<span class="number">83</span>|<span class="number">85</span>|<span class="number">98</span>)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$mobile_rewrite</span> perform;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (<span class="variable">$mobile_rewrite</span> = perform) &#123;</span></span><br><span class="line"><span class="string">        rewrite ^ http://m.pandll.com<span class="variable">$uri</span> redirect;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure>
<p>设置完成后，可通过下面的<code>curl</code>命令测试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 正常访问</span></span><br><span class="line">curl -vL your_website_url</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 模拟移动端访问</span></span><br><span class="line">curl -vL --user-agent "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1" your_website_url</span><br></pre></td></tr></table></figure>
<h4><span id="部分页面适配">部分页面适配</span></h4><p>如果你的PC站点页面比较多，而你只是部分页面有做移动端适配的话。上面的配置就不能满足需求了。</p>
<p>下面假定只需要适配production和article页面，即移动设备只有访问<code>blog.pandll.com/production/...</code>和<code>blog.pandll.com/article/...</code>页面，才分别跳转至<code>m.pandll.com/production/...</code>和<code>m.pandll.com/article/...</code>，其他页面还是访问PC站点的页面。</p>
<p>Nginx配置如下:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  blog.pandll.com;</span><br><span class="line">  	<span class="attribute">root</span> 		/home/www/blog.pandll.com/public;</span><br><span class="line">  	<span class="attribute">index</span> 		index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$mobile_rewrite</span> do_not_perform;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* "(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge</span> |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(<span class="number">4</span>|<span class="number">6</span>)<span class="number">0</span>|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$mobile_rewrite</span> perform;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (<span class="variable">$http_user_agent</span> ~* "</span>^(<span class="number">1207</span>|<span class="number">6310</span>|<span class="number">6590</span>|3gso|4thp|<span class="number">50</span>[<span class="number">1</span>-<span class="number">6</span>]i|<span class="number">770s</span>|<span class="number">802s</span>|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(<span class="number">12</span>|\-d)|el(<span class="number">49</span>|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([<span class="number">4</span>-<span class="number">7</span>]<span class="number">0</span>|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-<span class="number">5</span>|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(<span class="number">20</span>|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(<span class="literal">no</span>|xi)|lg( g|\/(k|l|u)|<span class="number">50</span>|<span class="number">54</span>|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(<span class="number">01</span>|<span class="number">21</span>|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(<span class="number">01</span>|<span class="number">02</span>|bi|de|do|t(\-| |o|v)|zz)|mt(<span class="number">50</span>|p1|v )|mwbp|mywa|n10[<span class="number">0</span>-<span class="number">2</span>]|n20[<span class="number">2</span>-<span class="number">3</span>]|n30(<span class="number">0</span>|<span class="number">2</span>)|n50(<span class="number">0</span>|<span class="number">2</span>|<span class="number">5</span>)|n7(<span class="number">0</span>(<span class="number">0</span>|<span class="number">1</span>)|<span class="number">10</span>)|ne((c|m)\-|<span class="literal">on</span>|tf|wf|wg|wt)|nok(<span class="number">6</span>|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(<span class="number">13</span>|\-([<span class="number">1</span>-<span class="number">8</span>]|c))|phil|pire|pl(ay|uc)|pn\-<span class="number">2</span>|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(<span class="number">07</span>|<span class="number">12</span>|<span class="number">21</span>|<span class="number">32</span>|<span class="number">60</span>|\-[<span class="number">2</span>-<span class="number">7</span>]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(<span class="number">01</span>|h\-|oo|p\-)|sdk\/|se(c(\-|<span class="number">0</span>|<span class="number">1</span>)|<span class="number">47</span>|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-<span class="number">0</span>|sl(<span class="number">45</span>|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(<span class="number">01</span>|h\-|v\-|v )|sy(<span class="number">01</span>|mb)|t2(<span class="number">18</span>|<span class="number">50</span>)|t6(<span class="number">00</span>|<span class="number">10</span>|<span class="number">18</span>)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(<span class="number">70</span>|m\-|m3|m5)|tx\-<span class="number">9</span>|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(<span class="number">40</span>|<span class="number">5</span>[<span class="number">0</span>-<span class="number">3</span>]|\-v)|vm40|voda|vulc|vx(<span class="number">52</span>|<span class="number">53</span>|<span class="number">60</span>|<span class="number">61</span>|<span class="number">70</span>|<span class="number">80</span>|<span class="number">81</span>|<span class="number">83</span>|<span class="number">85</span>|<span class="number">98</span>)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$mobile_rewrite</span> perform;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  	# 上面配置一样，主要是下面新加判断</span></span><br><span class="line"><span class="string">    set <span class="variable">$allow_mobile</span> false;</span></span><br><span class="line"><span class="string">    if (<span class="variable">$mobile_rewrite</span> = perform) &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$allow_mobile</span> true;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (<span class="variable">$uri</span> !~* "</span>^/(production|article)/.*$<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$allow_mobile</span> false;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    if (<span class="variable">$allow_mobile</span> = true)&#123;</span></span><br><span class="line"><span class="string">      	rewrite ^ http://m.pandll.com<span class="variable">$uri</span> redirect;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure>
<h4><span id="部分页面适配但某个页面例外">部分页面适配(但某个页面例外)</span></h4><p>假如你的需求更复杂，在<code>blog.pandll.com/article/...</code>路径下，你有子路径页面<code>blog.pandll.com/article/nginx/...</code>不想跳转到m站点。</p>
<p>Nginx配置如下:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  blog.pandll.com;</span><br><span class="line">  	<span class="attribute">root</span> 		/home/www/blog.pandll.com/public;</span><br><span class="line">  	<span class="attribute">index</span> 		index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$mobile_rewrite</span> do_not_perform;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* "(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge</span> |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(<span class="number">4</span>|<span class="number">6</span>)<span class="number">0</span>|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$mobile_rewrite</span> perform;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (<span class="variable">$http_user_agent</span> ~* "</span>^(<span class="number">1207</span>|<span class="number">6310</span>|<span class="number">6590</span>|3gso|4thp|<span class="number">50</span>[<span class="number">1</span>-<span class="number">6</span>]i|<span class="number">770s</span>|<span class="number">802s</span>|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(<span class="number">12</span>|\-d)|el(<span class="number">49</span>|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([<span class="number">4</span>-<span class="number">7</span>]<span class="number">0</span>|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-<span class="number">5</span>|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(<span class="number">20</span>|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(<span class="literal">no</span>|xi)|lg( g|\/(k|l|u)|<span class="number">50</span>|<span class="number">54</span>|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(<span class="number">01</span>|<span class="number">21</span>|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(<span class="number">01</span>|<span class="number">02</span>|bi|de|do|t(\-| |o|v)|zz)|mt(<span class="number">50</span>|p1|v )|mwbp|mywa|n10[<span class="number">0</span>-<span class="number">2</span>]|n20[<span class="number">2</span>-<span class="number">3</span>]|n30(<span class="number">0</span>|<span class="number">2</span>)|n50(<span class="number">0</span>|<span class="number">2</span>|<span class="number">5</span>)|n7(<span class="number">0</span>(<span class="number">0</span>|<span class="number">1</span>)|<span class="number">10</span>)|ne((c|m)\-|<span class="literal">on</span>|tf|wf|wg|wt)|nok(<span class="number">6</span>|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(<span class="number">13</span>|\-([<span class="number">1</span>-<span class="number">8</span>]|c))|phil|pire|pl(ay|uc)|pn\-<span class="number">2</span>|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(<span class="number">07</span>|<span class="number">12</span>|<span class="number">21</span>|<span class="number">32</span>|<span class="number">60</span>|\-[<span class="number">2</span>-<span class="number">7</span>]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(<span class="number">01</span>|h\-|oo|p\-)|sdk\/|se(c(\-|<span class="number">0</span>|<span class="number">1</span>)|<span class="number">47</span>|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-<span class="number">0</span>|sl(<span class="number">45</span>|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(<span class="number">01</span>|h\-|v\-|v )|sy(<span class="number">01</span>|mb)|t2(<span class="number">18</span>|<span class="number">50</span>)|t6(<span class="number">00</span>|<span class="number">10</span>|<span class="number">18</span>)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(<span class="number">70</span>|m\-|m3|m5)|tx\-<span class="number">9</span>|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(<span class="number">40</span>|<span class="number">5</span>[<span class="number">0</span>-<span class="number">3</span>]|\-v)|vm40|voda|vulc|vx(<span class="number">52</span>|<span class="number">53</span>|<span class="number">60</span>|<span class="number">61</span>|<span class="number">70</span>|<span class="number">80</span>|<span class="number">81</span>|<span class="number">83</span>|<span class="number">85</span>|<span class="number">98</span>)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$mobile_rewrite</span> perform;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    set <span class="variable">$allow_mobile</span> false;</span></span><br><span class="line"><span class="string">    if (<span class="variable">$mobile_rewrite</span> = perform) &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$allow_mobile</span> true;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if (<span class="variable">$uri</span> !~* "</span>^/(production|article)/.*$<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$allow_mobile</span> false;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  	# 上面配置一样，主要是下面新加判断 </span></span><br><span class="line"><span class="string">    if (<span class="variable">$uri</span> ~* "</span>^/article/nginx/?$<span class="string">") &#123;</span></span><br><span class="line"><span class="string">        set <span class="variable">$allow_mobile</span> false;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    if (<span class="variable">$allow_mobile</span> = true)&#123;</span></span><br><span class="line"><span class="string">      	rewrite ^ http://m.pandll.com<span class="variable">$uri</span> redirect;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Python工具 pip、pyenv、virtualenv、virtualenvwrapper等介绍</title>
    <url>/article/b874/</url>
    <content><![CDATA[<h3><span id="pip">pip</span></h3><p><code>pip</code>是一个<code>Python</code>语言开发的命令行程序，用来安装、管理<code>Python Package</code>。</p>
<p>常用命令有:</p>
<ol>
<li>显示已安装<code>Package</code>列表 <code>pip list</code></li>
<li>安装最新版本<code>Package</code> <code>pip install package_name</code></li>
<li>安装指定版本<code>Package</code> <code>pip install package_name==3.2.0</code></li>
<li>安装不低于某个版本的<code>Package</code>  <code>pip install &#39;package_name&gt;=3.0.0&#39;</code></li>
<li>批量安装<code>Package</code> <code>pip install -r requirements.txt</code></li>
<li>卸载<code>Package</code>  <code>pip uninstall package_name</code></li>
</ol>
<p>更多用法请参考<a href="/article/bf2e/">Python pip介绍</a>。</p>
<h3><span id="pypi">PyPI</span></h3><p><code>PyPI</code>全称为<code>Python Package Index</code>，是Python官方的第三方库的仓库，所有人都可以下载第三方库或上传自己开发的库到<code>PyPI</code>。<code>PyPI</code>推荐使用pip包管理器来下载第三方库。</p>
<a id="more"></a>
<h3><span id="pyenv">pyenv</span></h3><h4><span id="pyenv-介绍">pyenv 介绍</span></h4><p><a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener"><code>pyenv</code></a>是一款<code>UNIX</code>下的Python版本管理工具，不支持Windows。</p>
<p><code>pyenv</code>可以改变全局的 Python 版本，安装多个版本的 Python， 设置目录级别的 Python 版本，还能创建和管理Python虚拟环境。所有的设置都是用户级别的操作，不需要<code>sudo</code>权限。</p>
<p><code>pyenv</code>是通过修改系统环境变量<code>PATH</code>来实现的。系统环境变量<code>PATH</code>，大家都不陌生，里面包含了一串由冒号分隔的路径，例如<code>/usr/local/bin:/usr/bin:/bin</code>。每当在系统中执行一个命令时，例如<code>python</code>或<code>pip</code>，操作系统就会在<code>PATH</code>的所有路径中从左至右依次寻找对应的命令。因为是依次寻找，因此排在左边的路径具有更高的优先级。而<code>pyenv</code>做的，就是在<code>PATH</code>最前面插入一个<code>$(pyenv root)/shims</code>目录。这样，<code>pyenv</code>就可以通过控制<code>shims</code>目录中的Python版本号，来灵活地切换至我们所需的Python版本。</p>
<h4><span id="pyenv-安装">pyenv 安装</span></h4><h5><span id="脚本自动安装推荐">脚本自动安装(推荐)</span></h5><p>最简单的方式就是通过<code>pyenv-install</code>脚本自动安装，默认安装在用户目录<code>~/.pyenv</code>。</p>
<p><code>$ curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash</code></p>
<p>如果你用的<code>zsh</code>，则将末尾的<code>bash</code>替换成<code>zsh</code>即可。</p>
<p>通过此方式，除了安装<code>pyenv</code>以外，还包含如下插件:</p>
<ul>
<li><code>pyenv-doctor</code></li>
<li><code>pyenv-installer</code></li>
<li><code>pyenv-update</code></li>
<li><code>pyenv-virtualenv</code></li>
<li><code>pyenv-which-ext</code></li>
</ul>
<p>通过<code>pyenv update</code>命令可升级以上全部插件。</p>
<p>如果不确定<code>pyenv</code>的环境是否安装正常，可以通过<code>pyenv doctor</code>命令对环境进行检测。</p>
<p>如果你要卸载<code>pyenv</code>，执行<code>rm -rf $(pyenv root)</code>，然后删除<code>~/.bashrc</code>文件中的下列内容即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH="~/.pyenv/bin:$PATH"</span><br><span class="line">eval "$(pyenv init -)"</span><br><span class="line">eval "$(pyenv virtualenv-init -)"</span><br></pre></td></tr></table></figure>
<h5><span id="通过git手动安装">通过Git手动安装</span></h5><p>首先，clone项目到你想安装的路径</p>
<p><code>$ git clone https://github.com/pyenv/pyenv.git ~/.pyenv</code></p>
<p>定义环境变量，添加<code>pyenv init</code>到shell</p>
<p><code>$ echo &#39;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#39; &gt;&gt; ~/.bashrc</code><br><code>$ echo &#39;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc</code><br><code>$ echo -e &#39;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#39; &gt;&gt; ~/.bashrc</code></p>
<p>重启shell，使修改后的<code>Path</code>生效</p>
<p><code>$ exec &quot;$SHELL&quot;</code></p>
<p>升级<code>pyenv</code></p>
<p><code>cd $(pyenv root) &amp;&amp; git pull</code></p>
<h4><span id="pyenv-用法">pyenv 用法</span></h4><h5><span id="查看已安装-python-版本">查看已安装 Python 版本</span></h5><p><code>$ pyenv versions</code></p>
<h5><span id="查看可安装-python-版本">查看可安装 Python 版本</span></h5><p><code>$ pyenv install -l/--list</code></p>
<h5><span id="安装指定版本python">安装指定版本Python</span></h5><p><code>$ pyenv install 3.5.2</code></p>
<h5><span id="卸载指定版本python">卸载指定版本Python</span></h5><p><code>$ pyenv uninstall 3.5.2</code></p>
<h5><span id="查看当前激活的python版本及相关信息">查看当前激活的Python版本及相关信息</span></h5><p><code>$ pyenv version</code></p>
<h5><span id="列出包含给定命令的所有python版本">列出包含给定命令的所有Python版本</span></h5><p><code>$ pyenv whence [command]</code></p>
<p>如查看哪些版本安装了<code>supervisor</code></p>
<p><code>$ pyenv whence supervisorctl</code></p>
<h5><span id="查看当前激活python版本指定命令全路径">查看当前激活Python版本指定命令全路径</span></h5><p><code>$ pyenv which supervisorctl</code></p>
<h5><span id="重建shims">重建<code>shims</code></span></h5><p><code>$ pyenv rehash</code></p>
<p><em>每次安装|卸载Python版本或带有可执行文件的Package(如 pip、supervisor等)以后，都应该执行一次本命令</em></p>
<h5><span id="切换python版本">切换Python版本</span></h5><p><code>$ pyenv global|local|shell [python_version]</code></p>
<p><code>pyenv</code>可以从三个维度来管理<code>Python</code>环境，对应命令分别是: <code>global</code>(当前系统)、<code>local</code>(当前目录)、<code>shell</code>(当前shell)。这三个维度的优先级从左到右依次升高，即<code>global</code>的优先级最低、<code>shell</code>的优先级最高。对应<code>pyenv</code>的版本信息分别记录在<code>$(pyenv root)/version</code>、<code>当前目录.python-version</code>、当前shell session的环境变量<code>PYENV_VERSION</code>。</p>
<p><code>$ pyenv local|shell --unset</code>可分别取消<code>local</code>和<code>shell</code>级别的Python环境设置。</p>
<h3><span id="virtualenv">virtualenv</span></h3><h4><span id="virtualenv-介绍">virtualenv 介绍</span></h4><p><a href="https://github.com/pypa/virtualenv" target="_blank" rel="noopener"><code>virtualenv</code></a>是一款支持Python”虚拟”运行环境的工具，可以方便的管理Python Package版本，支持Windows。</p>
<blockquote>
<p>virtualenv is a tool to create isolated Python environments.</p>
</blockquote>
<p><code>virtualenv</code>通过创建独立Python开发环境，来解决依赖、版本以及间接权限问题。比如一个项目依赖<code>Celery 3.2.5</code>，而当前全局开发环境为<code>Celery 4.2.0</code>，版本跨度过大， 导致不兼容使项目无法正在运行， 使用<code>virtualenv</code>可以解决这些问题。</p>
<blockquote>
<p><code>virtualenv</code>创建一个拥有自己安装目录的环境, 这个环境不与其他虚拟环境共享库, 能够方便的管理Python版本和管理Python库。</p>
</blockquote>
<h4><span id="virtualenv-安装">virtualenv 安装</span></h4><h5><span id="pip命令安装">pip命令安装</span></h5><p><code>$ [sudo] pip install virtualenv</code><br>或者<br><code>$ [sudo] pip install https://github.com/pypa/virtualenv/tarball/master</code></p>
<h5><span id="源码安装">源码安装</span></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -O https://github.com/pypa/virtualenv/archive/16.0.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xvfz virtualenv-16.0.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> virtualenv-16.0.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> [sudo] python setup.py install</span></span><br></pre></td></tr></table></figure>
<h4><span id="virtualenv-用法">virtualenv 用法</span></h4><h5><span id="linux">Linux</span></h5><ul>
<li><p>创建虚拟环境</p>
<p><code>$ virtualenv [-p|--python /usr/bin/python3.5] env_test</code></p>
</li>
<li><p>激活虚拟环境</p>
<p><code>$ source env_test/bin/activate</code></p>
</li>
<li><p>取消激活</p>
<p><code>$ deactivate</code></p>
</li>
<li><p>删除虚拟环境</p>
<p><code>$ rm -rf env_test</code></p>
</li>
</ul>
<h5><span id="windows">Windows</span></h5><ul>
<li><p>创建虚拟环境</p>
<p><code>&gt; virtualenv [-p|--python &quot;c:\Python27\python.exe&quot;] env_test</code></p>
</li>
<li><p>激活虚拟环境</p>
<p><code>&gt; env_test\Scripts\activate</code></p>
</li>
<li><p>取消激活</p>
<p><code>&gt; env_test\Scripts\deactivate.bat</code></p>
</li>
<li><p>删除虚拟环境</p>
<p><code>&gt; rd /s /q env_test</code></p>
</li>
</ul>
<h4><span id="pyenv-virtualenv">pyenv-virtualenv</span></h4><p><code>pyenv</code>已内置了<code>pyenv-virtualenv</code>插件，无需另外安装。</p>
<ul>
<li><p>创建项目环境</p>
<p><code>$ pyenv virtualenv 3.5.2 env_test</code></p>
</li>
<li><p>项目环境设置</p>
<p><code>$ pyenv local env_test</code></p>
<p>设置后，只要<code>cd</code>进这个目录，就会启用对应环境。</p>
</li>
</ul>
<p>命令参考:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: pyenv virtualenv [-f|--force] [VIRTUALENV_OPTIONS] [version] &lt;virtualenv-name&gt;</span><br><span class="line">       pyenv virtualenv --version</span><br><span class="line">       pyenv virtualenv --help</span><br><span class="line"></span><br><span class="line">  -f/--force       Install even if the version appears to be installed already</span><br><span class="line"></span><br><span class="line">Usage: virtualenv [OPTIONS] DEST_DIR</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --version             show program's version number and exit</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -v, --verbose         Increase verbosity.</span><br><span class="line">  -q, --quiet           Decrease verbosity.</span><br><span class="line">  -p PYTHON_EXE, --python=PYTHON_EXE</span><br><span class="line">                        The Python interpreter to use, e.g.,</span><br><span class="line">                        --python=python2.5 will use the python2.5 interpreter</span><br><span class="line">                        to create the new environment.  The default is the</span><br><span class="line">                        interpreter that virtualenv was installed with</span><br><span class="line">                        (/usr/bin/python3)</span><br><span class="line">  --clear               Clear out the non-root install and start from scratch.</span><br><span class="line">  --no-site-packages    DEPRECATED. Retained only for backward compatibility.</span><br><span class="line">                        Not having access to global site-packages is now the</span><br><span class="line">                        default behavior.</span><br><span class="line">  --system-site-packages</span><br><span class="line">                        Give the virtual environment access to the global</span><br><span class="line">                        site-packages.</span><br><span class="line">  --always-copy         Always copy files rather than symlinking.</span><br><span class="line">  --unzip-setuptools    Unzip Setuptools when installing it.</span><br><span class="line">  --relocatable         Make an EXISTING virtualenv environment relocatable.</span><br><span class="line">                        This fixes up scripts and makes all .pth files</span><br><span class="line">                        relative.</span><br><span class="line">  --no-setuptools       Do not install setuptools in the new virtualenv.</span><br><span class="line">  --no-pip              Do not install pip in the new virtualenv.</span><br><span class="line">  --no-wheel            Do not install wheel in the new virtualenv.</span><br><span class="line">  --extra-search-dir=DIR</span><br><span class="line">                        Directory to look for setuptools/pip distributions in.</span><br><span class="line">                        This option can be used multiple times.</span><br><span class="line">  --download            Download preinstalled packages from PyPI.</span><br><span class="line">  --no-download, --never-download</span><br><span class="line">                        Do not download preinstalled packages from PyPI.</span><br><span class="line">  --prompt=PROMPT       Provides an alternative prompt prefix for this</span><br><span class="line">                        environment.</span><br><span class="line">  --setuptools          DEPRECATED. Retained only for backward compatibility.</span><br><span class="line">                        This option has no effect.</span><br><span class="line">  --distribute          DEPRECATED. Retained only for backward compatibility.</span><br><span class="line">                        This option has no effect.</span><br></pre></td></tr></table></figure>
<h3><span id="virtualenvwrapper">virtualenvwrapper</span></h3><h4><span id="virtualenvwrapper-介绍">virtualenvwrapper 介绍</span></h4><p><a href="https://pypi.org/project/virtualenvwrapper/" target="_blank" rel="noopener"><code>virtualenvwrapper</code></a>是<code>virtualenv</code>的扩展工具包，它将所有虚拟环境整合在一个目录下，并且对<code>virtualenv</code>命令进行了封装，可以很方便的创建、删除、复制虚拟环境。</p>
<p><code>virtualenvwrapper</code>不支持Windows，可用<code>virtualenvwrapper-win</code>替代，下文有介绍。</p>
<h4><span id="virtualenvwrapper-安装">virtualenvwrapper 安装</span></h4><p><code>virtualenvwrapper</code>依赖<code>virtualenv</code>，所以需要先安装<code>virtualenv</code>。</p>
<p><code>$ pip install --user virtualenvwrapper</code><br>或<br><code>$ sudo pip install virtualenvwrapper</code></p>
<p><em><code>--user</code>安装在用户目录，默认为<code>$HOME/.local/</code>，<code>sudo</code>安装在<code>/usr/local/</code>目录</em></p>
<p>配置工作目录和项目目录，在 <code>~/.zshrc</code> 中加入如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">export PROJECT_HOME=$HOME/PyEnvs</span><br><span class="line">source $HOME/.local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>
<p>然后执行<code>source ~/.zshrc</code>，即可生效。</p>
<p>如果使用的是 <code>bash</code>，则将<code>~/.zshrc</code>替换成 <code>~/.bashrc</code> 。</p>
<h4><span id="virtualenvwrapper-用法">virtualenvwrapper 用法</span></h4><h5><span id="创建新的虚拟环境">创建新的虚拟环境</span></h5><p><code>$ mkvirtualenv [envname]</code></p>
<p>该命令会帮我们创建一个新环境，默认情况下，环境的目录是 <code>~/.virtualenv/enname</code>，创建过程中它会自动帮我们安装 pip 等必要的软件，以后我们要安装新依赖时可直接使用 pip 命令。创建完之后，自动切换到该环境下工作，可看到提示符前边多了像<code>(envname)$</code>这样的字符。在这个环境下安装的依赖不会影响到其他的环境。</p>
<p>该命令有几个可选参数:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a project_path</span><br><span class="line">    与一个工程目录建立关联</span><br><span class="line">-i package</span><br><span class="line">    创建环境时安装相应的包.</span><br><span class="line">    如 -i Flask、-i Flask==0.11.1 或者安装多个包 -i Flask -i locustio</span><br><span class="line">-r requirements_file</span><br><span class="line">    同 pip install -r requirements_file 用法</span><br></pre></td></tr></table></figure>
<p>该命令还支持加入 virtualenv 的参数选项，例如指定环境的 python 版本为 3.5:</p>
<p><code>$ mkvirtualenv env_test --python=python3.5</code></p>
<p>如果出现<code>No module named virtualenvwrapper</code>，可将下列内容添加到<code>~/.zshrc</code>，重新执行<code>source ~/.zshrc</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python</span><br></pre></td></tr></table></figure>
<h5><span id="创建新项目">创建新项目</span></h5><p><code>$ mkdir $PROJECT_HOME</code></p>
<p><code>$ mkproject proname</code></p>
<p>该命令要求配置<code>PROJECT_HOME</code>目录，它在WORKON_HOME 目录下创建一个名为 proname 的虚拟环境，同时在 <code>PROJECT_HOME</code> 目录下创建名为 proname 的项目目录。创建完成后会自动激活虚拟环境，并进入 proname 目录。</p>
<h5><span id="创建临时运行环境">创建临时运行环境</span></h5><p><code>$ mktmpenv</code></p>
<h5><span id="切换虚拟环境">切换虚拟环境</span></h5><p><code>$ workon envname</code></p>
<h5><span id="退出虚拟环境">退出虚拟环境</span></h5><p><code>$ deactivate</code></p>
<h5><span id="列出所有环境">列出所有环境</span></h5><p><code>$ workon</code> 或 <code>$ lsvirtualenv</code></p>
<h5><span id="删除环境">删除环境</span></h5><p><code>$ rmvirtualenv [envname]</code></p>
<h5><span id="显示环境详情">显示环境详情</span></h5><p><code>$ showvirtualenv [envname]</code></p>
<h5><span id="复制环境">复制环境</span></h5><p><code>$ cpvirtualenv [source] [dest]</code></p>
<h5><span id="列出当前工作环境中安装的包">列出当前工作环境中安装的包</span></h5><p><code>$ lssitepackages</code></p>
<p>更多命令请参考<a href="https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html" target="_blank" rel="noopener">Command Reference</a></p>
<h3><span id="virtualenvwrapper-win">virtualenvwrapper-win</span></h3><h4><span id="virtualenvwrapper-win-介绍">virtualenvwrapper-win 介绍</span></h4><p><code>virtualenvwrapper-win</code>是<code>virtualenvwrapper</code>的Windows版本，功能和用法都类似。</p>
<h4><span id="virtualenvwrapper-win-安装">virtualenvwrapper-win 安装</span></h4><p><code>$ pip install virtualenvwrapper-win</code></p>
<h4><span id="virtualenvwrapper-win-用法">virtualenvwrapper-win 用法</span></h4><h5><span id="创建新的虚拟环境">创建新的虚拟环境</span></h5><p><code>&gt; mkvirtualenv -p &quot;c:\Python2712\python.exe&quot;  env-test</code></p>
<h5><span id="设置项目目录">设置项目目录</span></h5><p><code>&gt; setprojectdir d:\project-test</code></p>
<h5><span id="查看已安装虚拟环境">查看已安装虚拟环境</span></h5><p><code>&gt; lsvirtualenv</code></p>
<h5><span id="删除虚拟环境">删除虚拟环境</span></h5><p><code>&gt; rmvirtualenv env-test</code></p>
<h5><span id="切换虚拟环境">切换虚拟环境</span></h5><p><code>&gt; workon env-test</code></p>
<h5><span id="退出虚拟环境">退出虚拟环境</span></h5><p><code>&gt; deactivate</code> </p>
<p>更多命令请参考<a href="https://github.com/davidmarble/virtualenvwrapper-win#main-commands" target="_blank" rel="noopener">Main Commands</a></p>
<p>参考资料:<br><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md" target="_blank" rel="noopener">pyenv 命令参考文档</a><br><a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="noopener">virtualenv 官方文档</a><br><a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank" rel="noopener">virtualenvwrapper 官方文档</a><br><a href="https://pypi.org/project/virtualenvwrapper-win/" target="_blank" rel="noopener">virtualenvwrapper-win</a><br><a href="https://www.jianshu.com/p/4646dedaaff5" target="_blank" rel="noopener">Python安装与版本管理</a><br><a href="http://debugtalk.com/post/use-pyenv-manage-multiple-python-virtualenvs/" target="_blank" rel="noopener">使用pyenv管理多个Python版本依赖环境</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
        <tag>PyPi</tag>
        <tag>virtualenvwrapper</tag>
        <tag>virtualenvwrapper-win</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 线程模块thread和threading</title>
    <url>/article/fe62/</url>
    <content><![CDATA[<p><strong>线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。</strong></p>
<p>如果对进程、线程概念还不是很了解，建议看下<a href="/article/1d3c/">CPU、超线程与进程、线程</a>。</p>
<p>Python的标准库提供了两个模块：<code>thread</code>和<code>threading</code>，前者是低级模块，后者是高级模块。<code>threading</code>对<code>thread</code>进行了封装，绝大多数情况下，我们只需要使用<code>threading</code>就可以了，这也是Python官方推荐。</p>
<p><em>Python 3中，thread已经更名成_thread。</em></p>
<a id="more"></a>
<h3><span id="thread">thread</span></h3><p>总结几点:</p>
<ol>
<li>调用<code>start_new_thread</code>方法即启动线程，启动后<code>MainThread</code>必须等待，否则启动的子线程旋即退出。</li>
<li><code>thread.exit()</code>和<code>thread.interrupt_main()</code>都是通过raise异常实现的。</li>
<li><code>lock.acquire([waitflag])</code>方法，当<code>waitflag</code>等于0时，表示非阻塞获取锁，即获取失败也立即返回。所以下面的demo中，<code>worker</code>方法中的<code>lock.acquire(0)</code>改为<code>lock.acquire(1)</code>时，运行时间将比现在多10s。</li>
<li>锁的<code>release</code>与<code>acquire</code>可以不是同一个线程。</li>
<li>Py3获取锁的方法<code>lock.acquire</code>新增了<code>timeout</code>参数，并且设置的值不能大于<code>TIMEOUT_MAX</code>。</li>
</ol>
<p>以下demo在Python2.7和Python3.5测试通过。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Demo running on Py2 and Py3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> _thread <span class="keyword">as</span> thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(run_num=<span class="number">3</span>, internal=<span class="number">2</span>, max_num=<span class="number">11</span>, lock=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    干活的worker</span></span><br><span class="line"><span class="string">    :param run_num:</span></span><br><span class="line"><span class="string">    :param internal:</span></span><br><span class="line"><span class="string">    :param max_num:</span></span><br><span class="line"><span class="string">    :param lock:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isinstance(lock, thread.LockType):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            Py2</span></span><br><span class="line"><span class="string">            lock.acquire([waitflag])</span></span><br><span class="line"><span class="string">            无参数时, 无条件获取锁, 无法获取时, 会被阻塞,直到锁被释放</span></span><br><span class="line"><span class="string">            有参数时, waitflag = 0 时,表示只有在不需要等待的情况下才获取锁, 非零情况与上面相同</span></span><br><span class="line"><span class="string">            返回值 :　获得锁成功返回True, 获得锁失败返回False</span></span><br><span class="line"><span class="string">            Py3</span></span><br><span class="line"><span class="string">            lock.acquire(waitflag=1, timeout=-1)</span></span><br><span class="line"><span class="string">            waitflag=0时，可以设置阻塞等待锁的超时时间(设置的值不能超过_thread.TIMEOUT_MAX)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lock.acquire(<span class="number">0</span>):</span><br><span class="line">            print(</span><br><span class="line">                <span class="string">"Thread: &#123;0&#125; 获取锁失败!! 当前时间: &#123;1&#125;"</span>.format(</span><br><span class="line">                    thread.get_ident(), datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S.%f"</span>)</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(run_num):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= max_num:</span><br><span class="line">            print(<span class="string">"Thread &#123;0&#125; 运行次数已达上限(&#123;1&#125;),即将退出"</span>.format(thread.get_ident(), max_num))</span><br><span class="line">            thread.interrupt_main()  <span class="comment"># raise KeyboardInterrupt</span></span><br><span class="line">            thread.exit()  <span class="comment"># raise SystemExit</span></span><br><span class="line">        print(</span><br><span class="line">            <span class="string">"Thread: &#123;0&#125;, 当前时间: &#123;1&#125;"</span>.format(</span><br><span class="line">                thread.get_ident(), datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S.%f"</span>)</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        time.sleep(internal)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isinstance(lock, thread.LockType) <span class="keyword">and</span> lock.locked():</span><br><span class="line">        <span class="comment"># 如果锁的状态是unlock,调用lock.release()会抛RuntimeError异常</span></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_no_lock</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    未使用锁的demo</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    work1_ident = thread.start_new_thread(worker, ())</span><br><span class="line">    print(<span class="string">"Thread work1 identifier: &#123;0&#125;"</span>.format(work1_ident))</span><br><span class="line"></span><br><span class="line">    work2_ident = thread.start_new_thread(worker, (), dict(run_num=<span class="number">15</span>, internal=<span class="number">1</span>))</span><br><span class="line">    print(<span class="string">"Thread work2 identifier: &#123;0&#125;"</span>.format(work2_ident))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sleep时间必须足够长,等待子线程结束</span></span><br><span class="line">    time.sleep(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_lock</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    使用锁的demo</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取2个互斥锁</span></span><br><span class="line">    locks = map(<span class="keyword">lambda</span> _: thread.allocate_lock(), range(<span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 兼容py3,py3中map函数返回值为迭代器iterator</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(locks, list):</span><br><span class="line">        locks = [i <span class="keyword">for</span> i <span class="keyword">in</span> locks]</span><br><span class="line"></span><br><span class="line">    work1_ident = thread.start_new_thread(worker, (), dict(lock=locks[<span class="number">0</span>]))</span><br><span class="line">    print(<span class="string">"Thread work1 identifier: &#123;0&#125;"</span>.format(work1_ident))</span><br><span class="line"></span><br><span class="line">    work2_ident = thread.start_new_thread(</span><br><span class="line">        worker, (), dict(run_num=<span class="number">10</span>, internal=<span class="number">1</span>, lock=locks[<span class="number">1</span>])</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">"Thread work2 identifier: &#123;0&#125;"</span>.format(work2_ident))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># work3与work2共用一把锁,所以work3会等work2运行结束释放锁后才开始执行</span></span><br><span class="line">    work3_ident = thread.start_new_thread(</span><br><span class="line">        worker, (), dict(run_num=<span class="number">10</span>, internal=<span class="number">1</span>, lock=locks[<span class="number">1</span>])</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">"Thread work3 identifier: &#123;0&#125;"</span>.format(work3_ident))</span><br><span class="line"></span><br><span class="line">    wait = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">while</span> wait:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            lock.locked()</span></span><br><span class="line"><span class="string">            返回值 : 如果锁已经被某个线程获取,返回True, 否则为False</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> any(map(<span class="keyword">lambda</span> x: x.locked(), locks)):</span><br><span class="line">            print(<span class="string">"MainThread 还有线程未结束, 继续等待"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            wait = <span class="keyword">False</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    begin_time = time.time()</span><br><span class="line"></span><br><span class="line">    version = <span class="string">"unlock"</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        version = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 未加锁版本</span></span><br><span class="line">        <span class="keyword">if</span> version == <span class="string">"unlock"</span>:</span><br><span class="line">            demo_no_lock()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加锁版本</span></span><br><span class="line">        <span class="keyword">elif</span> version == <span class="string">"lock"</span>:</span><br><span class="line">            demo_lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="comment"># 处理thread.interrupt_main()抛出的异常</span></span><br><span class="line">        print(traceback.format_exc())</span><br><span class="line"></span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"MainThread 运行结束, 耗时: &#123;0&#125;(ms)"</span>.format(</span><br><span class="line">            round((time.time() - begin_time) * <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h3><span id="threading">threading</span></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Demo running on Py2</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(run_num=<span class="number">3</span>, internal=<span class="number">2</span>, max_num=<span class="number">11</span>, lock=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    干活的worker</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isinstance(lock, thread.LockType) <span class="keyword">or</span> isinstance(lock, threading._RLock):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lock.acquire(<span class="keyword">True</span>):</span><br><span class="line">            print(</span><br><span class="line">                <span class="string">"Thread: &#123;0&#125; 获取锁失败!! 当前时间: &#123;1&#125;"</span>.format(</span><br><span class="line">                    thread.get_ident(), datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S.%f"</span>)</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    current_thread = threading.current_thread()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(run_num):</span><br><span class="line">        print(</span><br><span class="line">            <span class="string">"Thread: &#123;0&#125;-&#123;1&#125;, 当前时间: &#123;2&#125;"</span>.format(</span><br><span class="line">                current_thread.name,</span><br><span class="line">                current_thread.ident,</span><br><span class="line">                datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S.%f"</span>),</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        time.sleep(internal)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isinstance(lock, thread.LockType) <span class="keyword">or</span> isinstance(lock, threading._RLock):</span><br><span class="line">        <span class="comment"># 如果锁的状态是unlock,调用lock.release()会抛RuntimeError异常</span></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_no_lock</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    未使用锁的demo</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    work1 = threading.Thread(target=worker, name=<span class="string">"work1"</span>, args=(<span class="number">5</span>, <span class="number">1</span>))</span><br><span class="line">    work1.setDaemon(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    work2 = threading.Thread(</span><br><span class="line">        target=worker, name=<span class="string">"work2"</span>, kwargs=dict(run_num=<span class="number">5</span>, internal=<span class="number">3</span>)</span><br><span class="line">    )</span><br><span class="line">    work2.setDaemon(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Thread work1 start running..."</span>)</span><br><span class="line">    work1.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Thread work2 start running..."</span>)</span><br><span class="line">    work2.start()</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    threading线程可以设置是否为守护线程</span></span><br><span class="line"><span class="string">    如果设置为守护线程,才需要sleep一段时间,等待子线程结束</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    time.sleep(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_lock</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    使用锁的demo</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 获取2个互斥锁</span></span><br><span class="line">    locks = map(<span class="keyword">lambda</span> _: threading.Lock(), range(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    work3 = threading.Thread(target=worker, name=<span class="string">"work3"</span>, kwargs=dict(lock=locks[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    work4 = threading.Thread(</span><br><span class="line">        target=worker, name=<span class="string">"work4"</span>, kwargs=dict(run_num=<span class="number">10</span>, internal=<span class="number">1</span>, lock=locks[<span class="number">1</span>])</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># work4与work5共用一把锁,所以work5会等work4运行结束释放锁后才开始执行</span></span><br><span class="line">    work5 = threading.Thread(</span><br><span class="line">        target=worker, name=<span class="string">"work5"</span>, kwargs=dict(run_num=<span class="number">10</span>, internal=<span class="number">1</span>, lock=locks[<span class="number">1</span>])</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Thread work3 start running..."</span>)</span><br><span class="line">    work3.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Thread work4 start running..."</span>)</span><br><span class="line">    work4.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Thread work5 start running..."</span>)</span><br><span class="line">    work5.start()</span><br><span class="line"></span><br><span class="line">    work3.join()</span><br><span class="line">    work4.join()</span><br><span class="line">    work5.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_monitor</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    work6 = threading.Thread(target=worker, name=<span class="string">"work6"</span>, kwargs=dict(run_num=<span class="number">5</span>))</span><br><span class="line">    work6.daemon = <span class="keyword">True</span></span><br><span class="line">    work6.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> work6.is_alive():</span><br><span class="line">        print(<span class="string">"Thread work6 is still running..."</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountDownThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.times = kwargs.pop(<span class="string">"times"</span>, <span class="number">10</span>)</span><br><span class="line">        super(CountDownThread, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.times &gt; <span class="number">0</span>:</span><br><span class="line">            print(</span><br><span class="line">                <span class="string">"Thread &#123;0&#125; T-minus &#123;1&#125; seconds"</span>.format(</span><br><span class="line">                    threading.current_thread().name, self.times</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">            self.times -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_subclass</span><span class="params">()</span>:</span></span><br><span class="line">    work7 = CountDownThread(name=<span class="string">"work7"</span>, times=<span class="number">8</span>)</span><br><span class="line">    work7.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    begin_time = time.time()</span><br><span class="line"></span><br><span class="line">    version = <span class="string">"unlock"</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        version = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 未加锁版本</span></span><br><span class="line">        <span class="keyword">if</span> version == <span class="string">"unlock"</span>:</span><br><span class="line">            demo_no_lock()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加锁版本</span></span><br><span class="line">        <span class="keyword">elif</span> version == <span class="string">"lock"</span>:</span><br><span class="line">            demo_lock()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># monitor版本</span></span><br><span class="line">        <span class="keyword">elif</span> version == <span class="string">"monitor"</span>:</span><br><span class="line">            demo_monitor()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># subclass版本</span></span><br><span class="line">        <span class="keyword">elif</span> version == <span class="string">"subclass"</span>:</span><br><span class="line">            demo_subclass()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(traceback.format_exc())</span><br><span class="line"></span><br><span class="line">    print(</span><br><span class="line">        <span class="string">"MainThread 运行结束, 耗时: &#123;0&#125;(ms)"</span>.format(</span><br><span class="line">            round((time.time() - begin_time) * <span class="number">1000</span>, <span class="number">2</span>)</span><br><span class="line">        )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h3><span id="gil">GIL</span></h3><p>既然用到Python的多线程，必须得知道<code>GIL</code>的存在。</p>
<blockquote>
<p>GIL(Global Interpreter Lock)</p>
<p>启动与CPU核心数量相同的N个线程，在4核CPU上可以监控到CPU占用率仅有160%，也就是使用不到两核。</p>
<p>即使启动100个线程，使用率也就170%左右，仍然不到两核。</p>
<p>但是用C、C++或Java来改写相同的死循环，直接可以把全部核心跑满，4核就跑到400%，8核就跑到800%，为什么Python不行呢？</p>
<p>因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。</p>
<p>GIL是Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。</p>
<p>所以，在Python中，可以使用多线程，但不要指望能有效利用多核。如果一定要通过多线程利用多核，那只能通过C扩展来实现，不过这样就失去了Python简单易用的特点。</p>
<p>不过，也不用过于担心，Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。</p>
</blockquote>
<p>参考资料:<br><a href="https://docs.python.org/2/library/thread.html" target="_blank" rel="noopener">Python 2 thread 官方文档</a><br><a href="https://docs.python.org/3.6/library/_thread.html" target="_blank" rel="noopener">Python 3 _thread 官方文档</a><br><a href="https://www.rddoc.com/doc/Python/3.6.0/zh/library/_thread/" target="_blank" rel="noopener">Python 3 _thread 中文译文</a><br><a href="https://docs.python.org/2/library/threading.html" target="_blank" rel="noopener">Pythoh 2 threading 官方文档</a><br><a href="https://docs.python.org/3/library/threading.html" target="_blank" rel="noopener">Pythoh 3 threading 官方文档</a><br><a href="https://www.rddoc.com/doc/Python/3.6.0/zh/library/threading/" target="_blank" rel="noopener">Pythoh 3 threading 中文译文</a><br><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p12_concurrency.html" target="_blank" rel="noopener">Python 3 cookbook 并发编程</a><br><a href="https://blog.louie.lu/2017/05/19/%E6%B7%B1%E5%85%A5-gil-%E5%A6%82%E4%BD%95%E5%AF%AB%E5%87%BA%E5%BF%AB%E9%80%9F%E4%B8%94-thread-safe-%E7%9A%84-python-grok-the-gil-how-to-write-fast-and-thread-safe-python/" target="_blank" rel="noopener">深入 GIL: 如何寫出快速且 thread-safe 的 Python – Grok the GIL: How to write fast and thread-safe Python</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143192823818768cd506abbc94eb5916192364506fa5d000" target="_blank" rel="noopener">多线程</a><br><a href="https://blog.csdn.net/suipingsp/article/details/40303789" target="_blank" rel="noopener">Python多线程之threading Event</a><br><a href="https://blog.csdn.net/ns2250225/article/details/45501333" target="_blank" rel="noopener">【Python】threading.Event模块控制多线程</a><br><a href="https://docs.python.org/3/library/concurrent.futures.html" target="_blank" rel="noopener">Launching parallel tasks</a><br><a href="http://zhaochj.github.io/2016/08/14/2016-08-14-%E7%BA%BF%E7%A8%8B%E7%9A%84event%E7%89%B9%E6%80%A7/" target="_blank" rel="noopener">python多线程间通信机制-event</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>thread</tag>
        <tag>threading</tag>
        <tag>GIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Aliyun Ubuntu 服务器配置记录</title>
    <url>/article/d1cd/</url>
    <content><![CDATA[<h3><span id="永久修改主机名称">永久修改主机名称</span></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/hostname </span></span><br><span class="line">your-hostname</span><br></pre></td></tr></table></figure>
<h3><span id="用户管理">用户管理</span></h3><h4><span id="创建用户adduser">创建用户adduser</span></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adduser <span class="built_in">test</span></span></span><br><span class="line">Adding user `test' ...</span><br><span class="line">Adding new group `test' (1006) ...</span><br><span class="line">Adding new user `test' (1006) with group `test' ...</span><br><span class="line">Creating home directory `/home/test' ...</span><br><span class="line">Copying files from `/etc/skel' ...</span><br><span class="line">Enter new UNIX password: </span><br><span class="line">Retype new UNIX password: </span><br><span class="line">passwd: password updated successfully</span><br><span class="line">Changing the user information for test</span><br><span class="line">Enter the new value, or press ENTER for the default</span><br><span class="line">	Full Name []: </span><br><span class="line">	Room Number []: </span><br><span class="line">	Work Phone []: </span><br><span class="line">	Home Phone []: </span><br><span class="line">	Other []: </span><br><span class="line">Is the information correct? [Y/n] y</span><br></pre></td></tr></table></figure>
<h4><span id="删除用户userdel">删除用户userdel</span></h4><blockquote>
<p>-f, –force    强制删除用户，即使用户当时已登录，同时删除用户目录和用户邮件</p>
<p>-r, –remove    同时删除用户目录和用户邮件</p>
<p>-R, –root    Apply changes in the CHROOT_DIR directory and use the configuration files from the          CHROOT_DIR directory.</p>
<p>-Z, –selinux-user    Remove any SELinux user mapping for the user’s login.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo userdel -r <span class="built_in">test</span></span></span><br><span class="line">userdel: test mail spool (/var/mail/test) not found</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4><span id="用户权限设置">用户权限设置</span></h4><ol>
<li><p>添加sudo权限</p>
<p><code>usermod -G 27 test</code> #sudo用户组的id为27</p>
</li>
</ol>
<h3><span id="ssh安全设置">SSH安全设置</span></h3><h4><span id="修改配置信息">修改配置信息</span></h4><p><code>vim /etc/ssh/sshd_config</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Port 33333					#修改ssh端口,1024~65535之间即可</span><br><span class="line">PermitRootLogin no			#禁止root用户直接登录ssh</span><br><span class="line">AllowUsers test				#仅允许test用户可以ssh登录</span><br><span class="line">PasswordAuthentication no	#禁止密码登录</span><br></pre></td></tr></table></figure>
<ol>
<li><p>重启ssh</p>
<p><code>service ssh restart</code></p>
</li>
<li><p>重新加载配置</p>
<p><code>sudo /etc/init.d/ssh reload</code></p>
</li>
<li><p>设置ssh证书登录</p>
<ul>
<li><p>生成证书</p>
<p><code>ssh-keygen -t rsa</code></p>
</li>
<li><p>公钥配置在目标机器用户目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/authorized_keys</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB...TB3qNyetCcT test</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>私钥配置在源机器用户目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/config</span><br><span class="line">Host pandll-hk</span><br><span class="line">    Hostname 47.52.225.88</span><br><span class="line">    User wayde</span><br><span class="line">    Port 33333</span><br><span class="line">    IdentityFile ~/.ssh/wayde.key</span><br><span class="line">Host *</span><br><span class="line">    ServerAliveInterval 60</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3><span id="安装openvpn">安装openvpn</span></h3><ol>
<li><p>安装OpenVPN</p>
<ul>
<li><code>apt-get update</code></li>
<li><code>apt-get install -y openvpn easy-rsa</code></li>
</ul>
</li>
<li><p>建立CA目录</p>
<p><code>make-cadir /etc/openvpn/easy-rsa</code></p>
<p>or</p>
<p><code>mkdir /etc/openvpn/easy-rsa</code></p>
<p><code>cp -r /usr/share/easy-rsa/*  /etc/openvpn/easy-rsa</code></p>
</li>
<li><p>配置CA变量</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">export KEY_COUNTRY="CN"</span><br><span class="line">export KEY_PROVINCE="HK"</span><br><span class="line">export KEY_CITY="HongKong"</span><br><span class="line">export KEY_ORG="Pandll"</span><br><span class="line">export KEY_EMAIL="wayde@pandll.com"</span><br><span class="line">export KEY_OU="Pandll"</span><br><span class="line"></span><br><span class="line"><span class="comment"># X509 Subject Field</span></span><br><span class="line">export KEY_NAME="PandllRSA"</span><br></pre></td></tr></table></figure>
</li>
<li><p>制作CA证书</p>
<ol>
<li><code>source vars</code></li>
<li><code>./clean-all</code></li>
<li><code>./build-ca</code></li>
</ol>
</li>
<li><p>制作服务端证书</p>
<ol>
<li><code>./build-key-server PandllRSA</code></li>
<li><code>./build-dh</code></li>
<li><code>openvpn --genkey --secret keys/ta.key</code></li>
</ol>
</li>
<li><p>制作客户端证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./build-key client-wayde-01</span><br><span class="line">./build-key-pass client-wayde-02 #设置密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置openvpn服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/openvpn/config</span><br><span class="line">cp ca.crt ca.key PandllRSA.crt PandllRSA.key ta.key dh2048.pem /etc/openvpn/config</span><br><span class="line">cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/config/</span><br><span class="line">gzip -d server.conf.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 /etc/openvpn/config/server.conf 文件</span></span><br><span class="line">mkdir -p /var/log/openvpn/</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务端</p>
<p><code>/usr/sbin/openvpn --config /etc/openvpn/config/server.conf --daemon</code></p>
<p>or</p>
<p><code>systemctl start openvpn@server</code></p>
<p><code>systemctl status openvpn@server</code></p>
</li>
<li><p>配置客户端</p>
<p><code>sudo openvpn /etc/openvpn/config/client.conf &gt; /dev/null &amp;</code></p>
<blockquote>
<p>如果客户端证书设置了密码，则需要在client.conf中加入下列行，文件中存储密码</p>
<p><code>askpass /etc/openvpn/config/private_key_password</code></p>
</blockquote>
</li>
<li><p>客户端分配静态ip</p>
<p>server.conf</p>
<p><code>client-config-dir /etc/openvpn/config/ccd</code></p>
<p><code>cat ccd/common_name</code></p>
<p><code>ifconfig-push 172.10.11.26 172.10.11.27</code></p>
</li>
</ol>
<h3><span id="安装oh-my-zsh">安装oh-my-zsh</span></h3><ol>
<li><p>安装zsh</p>
<p><code>sudo apt-get install -y zsh git</code></p>
</li>
<li><p>设置默认shell为zsh</p>
<p><code>chsh -s /bin/zsh</code></p>
<p><code>chsh -s $(which zsh)</code></p>
<p><code>sudo usermod -s /bin/zsh username</code></p>
</li>
<li><p>安装oh-my-zsh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3><span id="安装配置nginx">安装配置Nginx</span></h3><ol>
<li><code>apt-get install -y build-essential libtool libpcre3 libpcre3-dev zlib1g-dev openssl</code></li>
<li><code>wget http://nginx.org/download/nginx-1.12.2.tar.gz</code></li>
<li><code>tar -xvf nginx-1.12.2.tar.gz -C nginx</code></li>
<li><code>./configure --prefix=/home/service/nginx</code></li>
<li><code>make</code></li>
<li><code>make install</code></li>
<li><code>make clean</code></li>
<li><code>sudo apt-get install -y nginx</code></li>
</ol>
<h3><span id="安装lamp环境">安装LAMP环境</span></h3><ol>
<li><code>sudo apt-get install -y apache2</code></li>
<li><code>sudo apt-get install -y php</code></li>
<li><code>sudo apt-get install -y libapache2-mod-php</code></li>
<li><code>sudo /etc/init.d/apache2 restart</code></li>
<li><code>sudo apt-get install -y mysql-server mysql-client</code></li>
<li><code>sudo apt-get install -y libapache2-mod-php7.0 php7.0-mysql</code></li>
<li><code>sudo apt-get install php7.0-gd php7.0-xml</code></li>
<li><code>cd /etc/apache2/sites-enabled</code></li>
<li><code>ln -s ../sites-available/site.conf ./</code></li>
<li><code>cd /etc/apache2/mods-enabled</code></li>
<li><code>ln -s ../mods-available/rewrite.load ./</code></li>
</ol>
<h3><span id="恢复mysql数据库">恢复mysql数据库</span></h3><p><code>$ mysql -u root -p</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">create user pandll;</span><br><span class="line"></span><br><span class="line"># 限制用户只允许本机登录</span><br><span class="line">update mysql.user set Host=&quot;localhost&quot; where User=&quot;pandll&quot;;</span><br><span class="line"></span><br><span class="line"># 设置用户密码</span><br><span class="line">update mysql.user set authentication_string = password(&apos;123456&apos;) where Host = &apos;localhost&apos; and User = &apos;pandll&apos;;</span><br><span class="line"></span><br><span class="line"># 显示存储引擎信息</span><br><span class="line">show engines;</span><br><span class="line"></span><br><span class="line"># 创建数据库设置字符集为utf-8</span><br><span class="line">create database pandll default character set `utf8` collate `utf8_unicode_ci`;</span><br><span class="line"></span><br><span class="line"># 用户授权</span><br><span class="line">grant select,insert,update,delete on pandll.* to pandll@localhost;</span><br><span class="line"></span><br><span class="line"># 切换数据库</span><br><span class="line">use pandll;</span><br><span class="line"></span><br><span class="line"># 刷新系统权限</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 导入sql</span><br><span class="line">source /home/wayde/backup.sql;</span><br></pre></td></tr></table></figure>
<h3><span id="搭建hexo站点">搭建Hexo站点</span></h3><ol>
<li><p><code>sudo apt-get install git</code></p>
</li>
<li><p><code>sudo apt-get install nodejs npm</code></p>
</li>
<li><p><code>sudo ln -s /usr/bin/nodejs /usr/bin/node</code></p>
</li>
<li><p><code>sudo npm i -g hexo hexo-cli</code></p>
</li>
<li><p><code>sudo adduser blog</code></p>
</li>
<li><p><code>hexo init blog.pandll.com</code></p>
</li>
<li><p><code>hexo server -p 10308</code></p>
</li>
<li><p>安装next主题</p>
<ol>
<li><code>git clone --branch v5.1.3 https://github.com/iissnan/hexo-theme-next themes/next</code></li>
<li><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></li>
<li><code>git clone https://github.com/A-limon/pacman.git themes/pacman</code></li>
</ol>
</li>
<li><p>安装hexo插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成搜索引擎网站地图</span></span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动生成文章目录</span></span><br><span class="line">npm install hexo-toc --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 固定链接</span></span><br><span class="line">npm install hexo-abbrlink --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文章最末添加永久链接及版权声明</span></span><br><span class="line">npm install hexo-addlink --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地搜索</span></span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改首页为任意的页面</span></span><br><span class="line">npm install hexo-index-anything --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导航条</span></span><br><span class="line">npm install hexo-breadcrumb --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 代码高亮</span></span><br><span class="line">npm install hexo-filter-highlight --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 引用markdown文件</span></span><br><span class="line">npm install hexo-include-markdown --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> seo no follow</span></span><br><span class="line">npm install hexo-autonofollow --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件压缩</span></span><br><span class="line">npm install hexo-all-minifier --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载插件</span></span><br><span class="line">npm uninstall hexo-breadcrumb</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>添加百度统计</p>
<p><code>thems/next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Baidu Analytics ID</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="number">54</span><span class="string">fab7a6da470f69******8485845c02</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加disqus评论</p>
<p><code>thems/next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">pandll</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加livere评论</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Support for LiveRe comments system.</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="string">MTAyMC8z******84OTYw</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置ico图标</p>
<p><code>thems/next/_config.yml</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: <span class="regexp">/images/</span>pandll_16.png</span><br><span class="line">  medium: <span class="regexp">/images/</span>pandll_32.png</span><br><span class="line">  apple_touch_icon: <span class="regexp">/images/</span>pandll_180.png</span><br><span class="line">  safari_pinned_tab: <span class="regexp">/images/</span>pandll_512.svg</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3><span id="申请lets-encrypt免费证书">申请Let’s Encrypt免费证书</span></h3><ol>
<li><p><code>sudo apt-get update</code></p>
</li>
<li><p><code>sudo apt-get install software-properties-common</code></p>
</li>
<li><p><code>sudo add-apt-repository ppa:certbot/certbot</code></p>
</li>
<li><p><code>sudo apt-get update</code></p>
</li>
<li><p><code>sudo apt-get install python-certbot-nginx</code></p>
</li>
<li><p><code>sudo certbot --nginx</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo certbot --nginx                     </span></span><br><span class="line">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span><br><span class="line">Plugins selected: Authenticator nginx, Installer nginx</span><br><span class="line">Enter email address (used for urgent renewal and security notices) (Enter 'c' to</span><br><span class="line">cancel): wayde@pandll.com</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Please read the Terms of Service at</span><br><span class="line">https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must</span><br><span class="line">agree in order to register with the ACME server at</span><br><span class="line">https://acme-v01.api.letsencrypt.org/directory</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">(A)gree/(C)ancel: A</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Would you be willing to share your email address with the Electronic Frontier</span><br><span class="line">Foundation, a founding partner of the Let\'s Encrypt project and the non-profit</span><br><span class="line">organization that develops Certbot? We\'d like to send you email about EFF and</span><br><span class="line">our work to encrypt the web, protect its users and defend digital rights.</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">(Y)es/(N)o: Y</span><br><span class="line"></span><br><span class="line">Which names would you like to activate HTTPS for?</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">1: blog.pandll.com</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Select the appropriate numbers separated by commas and/or spaces, or leave input</span><br><span class="line">blank to select all options shown (Enter 'c' to cancel): 1</span><br><span class="line">Obtaining a new certificate</span><br><span class="line">Performing the following challenges:</span><br><span class="line">tls-sni-01 challenge for blog.pandll.com</span><br><span class="line">Cleaning up challenges</span><br><span class="line">Deployed Certificate to VirtualHost /etc/nginx/sites-enabled/blog.pandll.com for set(['blog.pandll.com'])</span><br><span class="line"></span><br><span class="line">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">1: No redirect - Make no further changes to the webserver configuration.</span><br><span class="line">2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for</span><br><span class="line">new sites, or if you\'re confident your site works on HTTPS. You can undo this</span><br><span class="line">change by editing your web server\'s configuration.</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Select the appropriate number [1-2] then [enter] (press 'c' to cancel): c</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Congratulations! You have successfully enabled https://blog.pandll.com</span><br><span class="line"></span><br><span class="line">You should test your configuration at:</span><br><span class="line">https://www.ssllabs.com/ssltest/analyze.html?d=blog.pandll.com</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class="line">   /etc/letsencrypt/live/pandll.com/fullchain.pem</span><br><span class="line">   Your key file has been saved at:</span><br><span class="line">   /etc/letsencrypt/live/pandll.com/privkey.pem</span><br><span class="line">   Your cert will expire on 2018-03-12. To obtain a new or tweaked</span><br><span class="line">   version of this certificate in the future, simply run certbot again</span><br><span class="line">   with the "certonly" option. To non-interactively renew *all* of</span><br><span class="line">   your certificates, run "certbot renew"</span><br><span class="line"> - Your account credentials have been saved in your Certbot</span><br><span class="line">   configuration directory at /etc/letsencrypt. You should make a</span><br><span class="line">   secure backup of this folder now. This configuration directory will</span><br><span class="line">   also contain certificates and private keys obtained by Certbot so</span><br><span class="line">   making regular backups of this folder is ideal.</span><br><span class="line"> - If you like Certbot, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">   Donating to ISRG / Let\'s Encrypt:   https://letsencrypt.org/donate</span><br><span class="line">   Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>新增站点</p>
<p><code>sudo certbot --nginx certonly</code></p>
</li>
<li><p>续期证书</p>
<p>测试续期命令</p>
<p><code>sudo certbot renew --dry-run</code></p>
<p>续期</p>
<p><code>sudo certbot renew</code></p>
<p>强制续期</p>
<p><code>sudo certbot renew --force-renewal</code></p>
</li>
</ol>
<h4><span id="遇到问题记录">遇到问题记录</span></h4><ol>
<li><blockquote>
<p>perl: warning: Setting locale failed.</p>
</blockquote>
<p><code>apt-get update</code></p>
<p><code>apt-get install language-pack-zh-hans</code></p>
</li>
<li><blockquote>
<p>ssh: error: Could not load host key: /etc/ssh/ssh_host_ed25519_key</p>
</blockquote>
<p><code>ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key</code></p>
</li>
<li><blockquote>
<p>openvpn 客户端连接上，一直重启</p>
<p>Connection reset, restarting [-1]</p>
</blockquote>
<p>将连接方式改为udp正常，怀疑跟gfw有关</p>
</li>
<li><blockquote>
<p>ubuntu apache2 : 403 forbidden</p>
</blockquote>
<p>ubuntu apache2配置文件错误</p>
</li>
</ol>
<p>参考资料:<br><a href="http://blog.csdn.net/u012843189/article/details/77422505" target="_blank" rel="noopener">Ubuntu16.04搭建OpenVPN</a><br><a href="http://www.linuxidc.com/Linux/2016-10/136327.htm" target="_blank" rel="noopener">Ubuntu 16.04搭建LAMP开发环境</a><br><a href="http://www.jb51.net/article/39454.htm" target="_blank" rel="noopener">MySQL——修改root密码的4种方法</a><br><a href="http://www.cnblogs.com/yuwensong/p/3955834.html" target="_blank" rel="noopener">mysql导入导出sql文件</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a><br><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">iissnan/hexo-theme-next</a><br><a href="http://blog.csdn.net/linshuhe1/article/details/52424573" target="_blank" rel="noopener">next主题、评论、阅读量统计和站内搜索</a><br><a href="http://www.jianshu.com/p/c23902f93558" target="_blank" rel="noopener">next主题的配置和优化</a><br><a href="https://certbot.eff.org/#ubuntuxenial-nginx" target="_blank" rel="noopener">Nginx on Ubuntu 16.04 (xenial)</a><br><a href="https://coolshell.cn/articles/18094.html" target="_blank" rel="noopener">如何免费的让网站启用HTTPS</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Nginx</tag>
        <tag>ssh</tag>
        <tag>openvpn</tag>
        <tag>oh-my-zsh</tag>
        <tag>Mysql</tag>
        <tag>Hexo</tag>
        <tag>https免费证书</tag>
      </tags>
  </entry>
  <entry>
    <title>Supervisor 入门教程</title>
    <url>/article/be57/</url>
    <content><![CDATA[<h3><span id="superviosr-介绍">Superviosr 介绍</span></h3><p><strong><a href="http://supervisord.org/" target="_blank" rel="noopener">Supervisor</a></strong>是一款用采用Client/Server架构、开源(<a href="https://github.com/Supervisor/supervisor" target="_blank" rel="noopener">github地址</a>)的进程监控管理工具。</p>
<p>Supervisor稳定、简单、高效、可扩展、兼容性好，可以在大部分类Unix系统(Debian、Solaris、Mac OS、FreeBSD等)上使用(不支持Windows，可用<a href="/article/4689/">NSSN</a>替代)。</p>
<p>Supervisor可以很方便的管理批量进程，不仅支持启动、重启、关闭、重载，还支持监控进程，进程意外僵死后可自动拉起。</p>
<p>Supervisor虽然是用Python开发，但是可以用来管理任意进程，而不仅仅是Python进程。</p>
<p>Supervisor目前最新版本3.3.4，暂不支持Python 3，不过即将推出的4.0版本将会支持Python3.4+。</p>
<p>Supervisor由以下4部分组成:</p>
<ul>
<li><p><strong>supervisord</strong></p>
<p><em>supervisord</em>是supervisor的后台服务。它负责启动supervisor管理的子进程、响应来自client的请求、重启闪退或异常退出的子进程、把子进程的stderr或stdout记录到日志文件中、生成和处理Event等。</p>
</li>
<li><p><strong>supervisorctl</strong></p>
<p><em>supervisorctl</em>相当于supervisor的客户端。它有一个类shell的命令行界面，可以通过命令查看、启动、停止、重启子进程，supervisorctl不仅可以通过UNIX socket连接本机的supervisord管理进程，还可以通过TCP socket连接远程的supervisord管理进程。supervisorctl和supervisord之间的通信，是通过xml_rpc完成的，相应的配置在[supervisorctl]块里面。</p>
</li>
<li><p><strong>Web Server</strong></p>
<p><em>Web Server</em>主要可以在界面上管理进程，Web Server其实是通过XML_RPC来实现的，可以向supervisor请求数据，也可以控制supervisor及子进程。配置在[inet_http_server]块里面。</p>
</li>
<li><p><strong>XML-RPC Interface</strong></p>
<p>supervisorctl和Web Server通过<code>XML-RPC接口</code>调用<code>supervisord</code>，实现进程的管理。当然你也可以在你自己的服务里调用这些XML-RPC接口，来管理子进程。</p>
</li>
</ul>
<a id="more"></a>
<h3><span id="supervisor-安装">Supervisor 安装</span></h3><h4><span id="通过源码安装">通过源码安装</span></h4><p><code>$ git clone https://github.com/Supervisor/supervisor.git</code></p>
<p><code>$ python setup.py install</code></p>
<h4><span id="通过pip安装">通过pip安装</span></h4><p><code>$ pip install supervisor</code></p>
<h4><span id="通过apt-get安装">通过apt-get安装</span></h4><p>在Ubuntu上，可以直接运行<code>apt-get install supervisor</code>安装</p>
<h4><span id="通过easy_install安装">通过easy_install安装</span></h4><p><code>$ easy_install supervisor</code></p>
<p><em>easy_install 是一个基于setuptools的工具，帮助我们自动下载、编译、安装和管理python packages。</em></p>
<p><em>pip是easy_install的改进版，平常用pip就可以了，但还有老版本的Python只有easy_install。</em></p>
<h3><span id="supervisor-配置">Supervisor 配置</span></h3><p>Supervisor的配置文件采用的Windows INI格式，推荐命名为<code>supervisord.conf</code>，<code>supervisord</code>和<code>supervisorctl</code>都会用到这个配置文件。Supervisor启动时可以通过<code>-c</code>参数指定配置文件，如果没有指定，supervisor则会在以下路径依次寻找<code>supervisord.conf</code>，直到读取到supervisord.conf。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">CWD/supervisord.conf				<span class="comment"># $CWD表示运行supervisord程序的目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">CWD/etc/supervisord.conf			<span class="comment"># $CWD表示运行supervisord程序的目录</span></span></span><br><span class="line">/etc/supervisord.conf</span><br><span class="line">/etc/supervisor/supervisord.conf 	# Supervisor3.3.0新加</span><br><span class="line">../etc/supervisord.conf 			# 相对脚本执行的路径</span><br><span class="line">../supervisord.conf 				# 相对脚本执行的路径</span><br></pre></td></tr></table></figure>
<p>安装完毕后，可以通过<code>echo_supervisord_conf</code>生成一份默认初始配置文件。<br><code>$ echo_supervisord_conf &gt; your_path/supervisord.conf</code></p>
<p><code>supervisord.conf</code>主要由以下9个部分组成。其中常用的为前面6个部分，后面3个很少用到。</p>
<h4><span id="unixinet_http_server">[unix|inet]_http_server</span></h4><p>supervisorctl通过unix socket或tcp socket与supervisord通信，Web Server通过tcp与supervisord通信。<code>unix_http_server</code>和<code>inet_http_server</code>两者必须配置一个，否则无法管理supervisord。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[unix_http_server]</span></span><br><span class="line"><span class="attr">file</span>=/tmp/supervisor.sock   ; unix socket文件路径</span><br><span class="line"><span class="comment">;chmod=0700                 ; unix socket文件的mode，默认是0700</span></span><br><span class="line"><span class="comment">;chown=nobody:nogroup       ; unix socket文件的owner，格式：uid:gid,默认为启动supervisord进程的用户及属组</span></span><br><span class="line"><span class="comment">;username=user              ; supervisorctl连接时认证的用户，默认为不需要用户</span></span><br><span class="line"><span class="comment">;password=123               ; 和上面的用户名对应的密码，可以直接使用明码，也可以使用SHA加密，如：&#123;SHA&#125;82ab876d1387bfafe46cc1c8a2ef074eae50cb1d</span></span><br><span class="line"></span><br><span class="line"><span class="section">[inet_http_server]</span></span><br><span class="line"><span class="comment">;port=127.0.0.1:9001        ; tcp监听地址和端口</span></span><br><span class="line"><span class="comment">;username=user              ; supervisorctl和web server连接时认证的用户,默认无需用户名</span></span><br><span class="line"><span class="comment">;password=123               ; 和上面的用户名对应的密码，可以直接使用明码，也可以使用SHA加密，如：&#123;SHA&#125;82ab876d1387bfafe46cc1c8a2ef074eae50cb1d</span></span><br></pre></td></tr></table></figure>
<h4><span id="supervisord">supervisord</span></h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[supervisord]</span></span><br><span class="line"><span class="attr">logfile</span>=/tmp/supervisord.log ; supervisord主进程日志文件路径,默认是<span class="variable">$CWD</span>/supervisord.log</span><br><span class="line"><span class="attr">logfile_maxbytes</span>=<span class="number">50</span>MB        ; supervisord主进程日志文件大小，超出会rotate，默认 <span class="number">50</span>MB，如果设成<span class="number">0</span>，表示不限制大小</span><br><span class="line"><span class="attr">logfile_backups</span>=<span class="number">10</span>           ; supervisord主进程日志文件保留备份数量默认<span class="number">10</span>，设为<span class="number">0</span>表示不备份</span><br><span class="line"><span class="attr">loglevel</span>=info                ; 日志级别，默认info，其它: debug,warn,trace</span><br><span class="line"><span class="attr">pidfile</span>=/tmp/supervisord.pid ; supervisord主进程的pid文件路径,默认名为supervisord.pid</span><br><span class="line"><span class="attr">nodaemon</span>=<span class="literal">false</span>               ; supervisord主进程是否在前台启动，默认是<span class="literal">false</span>，即以 daemon 的方式启动</span><br><span class="line"><span class="attr">minfds</span>=<span class="number">1024</span>                  ; supervisord主进程可以打开的文件描述符的最小值，默认 <span class="number">1024</span></span><br><span class="line"><span class="attr">minprocs</span>=<span class="number">200</span>                 ; supervisord主进程可以打开的进程数的最小值，默认 <span class="number">200</span></span><br><span class="line"><span class="comment">;umask=022                   ; supervisord主进程创建文件的掩码,默认为022</span></span><br><span class="line"><span class="comment">;user=chrism                 ; 这个参数可以设置一个非root用户，当我们以root用户启动supervisord之后。这里面设置的这个用户，也可以对supervisord进行管理</span></span><br><span class="line"><span class="comment">;identifier=supervisor       ; 这个参数是supervisord的标识符，主要是给XML_RPC用的。当你有多supervisor的时候，而且想调用XML_RPC统一管理，就需要为每个supervisor设置不同的标识符了，默认是supervisord</span></span><br><span class="line"><span class="comment">;directory=/tmp              ; 这个参数是当supervisord作为守护进程运行的时候，设置这个参数的话，启动supervisord进程之前，会先切换到这个目录</span></span><br><span class="line"><span class="comment">;nocleanup=true              ; 这个参数当为false的时候，会在supervisord进程启动的时候，把以前子进程产生的日志文件(路径为AUTO的情况下)清除掉。有时候需要查看历史日志，可以设置为true</span></span><br><span class="line"><span class="comment">;childlogdir=/tmp            ; 当子进程日志路径为AUTO的时候，子进程日志文件的存放路径。默认路径是这个东西，执行下面的这个命令看看就OK了，python -c "import tempfile;print tempfile.gettempdir()"</span></span><br><span class="line"><span class="comment">;environment=KEY="value"     ; 这个是用来设置环境变量的，supervisord在linux中启动默认继承了linux的环境变量，在这里可以设置supervisord进程特有的其他环境变量。supervisord启动子进程时，子进程会拷贝父进程的内存空间内容。 所以设置的这些环境变量也会被子进程继承。小例子：environment=name="haha",age="hehe"</span></span><br><span class="line"><span class="comment">;strip_ansi=false            ; 这个选项如果设置为true，会清除子进程日志中的所有ANSI 序列。什么是ANSI序列呢？就是我们的\n,\t这些东西</span></span><br></pre></td></tr></table></figure>
<p>supervisord的配置也可以不写入配置文件，可在启动supervisord时当参数传入，如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisord -h</span></span><br><span class="line">supervisord -- run a set of applications as daemons.</span><br><span class="line"></span><br><span class="line">Usage: /usr/local/bin/supervisord [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-c/--configuration FILENAME -- configuration file path (searches if not given)</span><br><span class="line">-n/--nodaemon -- run in the foreground (same as 'nodaemon=true' in config file)</span><br><span class="line">-h/--help -- print this usage message and exit</span><br><span class="line">-v/--version -- print supervisord version number and exit</span><br><span class="line">-u/--user USER -- run supervisord as this user (or numeric uid)</span><br><span class="line">-m/--umask UMASK -- use this umask for daemon subprocess (default is 022)</span><br><span class="line">-d/--directory DIRECTORY -- directory to chdir to when daemonized</span><br><span class="line">-l/--logfile FILENAME -- use FILENAME as logfile path</span><br><span class="line">-y/--logfile_maxbytes BYTES -- use BYTES to limit the max size of logfile</span><br><span class="line">-z/--logfile_backups NUM -- number of backups to keep when max bytes reached</span><br><span class="line">-e/--loglevel LEVEL -- use LEVEL as log level (debug,info,warn,error,critical)</span><br><span class="line">-j/--pidfile FILENAME -- write a pid file for the daemon process to FILENAME</span><br><span class="line">-i/--identifier STR -- identifier used for this instance of supervisord</span><br><span class="line">-q/--childlogdir DIRECTORY -- the log directory for child process logs</span><br><span class="line">-k/--nocleanup --  prevent the process from performing cleanup (removal of</span><br><span class="line">                   old automatic child log files) at startup.</span><br><span class="line">-a/--minfds NUM -- the minimum number of file descriptors for start success</span><br><span class="line">-t/--strip_ansi -- strip ansi escape codes from process output</span><br><span class="line">--minprocs NUM  -- the minimum number of processes available for start success</span><br><span class="line">--profile_options OPTIONS -- run supervisord under profiler and output</span><br><span class="line">                             results based on OPTIONS, which  is a comma-sep'd</span><br><span class="line">                             list of 'cumulative', 'calls', and/or 'callers',</span><br><span class="line">                             e.g. 'cumulative,callers')</span><br></pre></td></tr></table></figure>
<h4><span id="supervisorctl">supervisorctl</span></h4><p>当你使用unix socket与supervisord通信时，serverurl配置<code>unix://path/supervisor.sock</code>。当你使用tcp socket与supervisord通信时，serverurl配置<code>http://ip:port</code>。</p>
<p>如果[unix|inet]_http_server中有设置username和password，此处不配置的话，则通过<code>supervisorctl</code>管理时需要显式传入username 和 password。如果你不希望别人查看管理你的program，这种方式就有用了。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[supervisorctl]</span></span><br><span class="line"><span class="attr">serverurl</span>=unix:///tmp/supervisor.sock ; unix socket文件路径</span><br><span class="line"><span class="comment">;serverurl=http://127.0.0.1:9001 	  ; tcp socket监听的ip:port</span></span><br><span class="line"><span class="comment">;username=chris              ; 如果设置则必须与[unix|inet]_http_server中的username一致</span></span><br><span class="line"><span class="comment">;password=123                ; 如果设置则必须与[unix|inet]_http_server中的username一致</span></span><br><span class="line"><span class="comment">;prompt=mysupervisor         ; cmd line prompt (default "supervisor")</span></span><br><span class="line"><span class="comment">;history_file=~/.sc_history  ; use readline history if available</span></span><br></pre></td></tr></table></figure>
<p>supervisorctl的配置也可以不写入配置文件，可在启动supervisorctl时当参数传入，如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl -h</span></span><br><span class="line">supervisorctl -- control applications run by supervisord from the cmd line.</span><br><span class="line"></span><br><span class="line">Usage: /usr/local/bin/supervisorctl [options] [action [arguments]]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-c/--configuration FILENAME -- configuration file path (searches if not given)</span><br><span class="line">-h/--help -- print usage message and exit</span><br><span class="line">-i/--interactive -- start an interactive shell after executing commands</span><br><span class="line">-s/--serverurl URL -- URL on which supervisord server is listening</span><br><span class="line">     (default "http://localhost:9001").</span><br><span class="line">-u/--username USERNAME -- username to use for authentication with server</span><br><span class="line">-p/--password PASSWORD -- password to use for authentication with server</span><br><span class="line">-r/--history-file -- keep a readline history (if readline is available)</span><br><span class="line"></span><br><span class="line">action [arguments] -- see below</span><br><span class="line"></span><br><span class="line">Actions are commands like "tail" or "stop".  If -i is specified or no action is</span><br><span class="line">specified on the command line, a "shell" interpreting actions typed</span><br><span class="line">interactively is started.  Use the action "help" to find out about available</span><br><span class="line">actions.</span><br></pre></td></tr></table></figure>
<h4><span id="program">program</span></h4><p>应用程序配置信息，<code>x</code>是应用程序的唯一标识，不能重复。后续对该程序的所有操作(start, restart等)都通过该名字来实现。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">;[program:x]</span></span><br><span class="line"><span class="comment">;command=/bin/cat              ; program的运行命令,支持相对路径,可以带参数</span></span><br><span class="line"><span class="comment">;process_name=%(program_name)s ; 进程名称,默认是%(program_name)s,如果numprocs大于1,则必须将”%(process_num)s”变量放入”process_name”中，防止多个进程同名导致启动出错</span></span><br><span class="line"><span class="comment">;numprocs=1                    ; 同时启动的进程个数,用来实现并发,默认是1</span></span><br><span class="line"><span class="comment">;directory=/tmp                ; 如果配置了这个目录,那program运行前,会先切换到这个目录</span></span><br><span class="line"><span class="comment">;umask=022                     ; umask for process (default None)</span></span><br><span class="line"><span class="comment">;priority=999                  ; program进程优先级,决定了启动和关闭program进程的顺序,默认是最大值999</span></span><br><span class="line"><span class="comment">;autostart=true                ; 启动supervisord时,program进程是否自动启动,默认是true</span></span><br><span class="line"><span class="comment">;startsecs=1                   ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span></span><br><span class="line"><span class="comment">;startretries=3                ; 启动失败自动重试次数，默认是3</span></span><br><span class="line"><span class="comment">;autorestart=unexpected        ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span></span><br><span class="line"><span class="comment">;exitcodes=0,2                 ; 'expected' exit codes used with autorestart (default 0,2)</span></span><br><span class="line"><span class="comment">;stopsignal=QUIT               ; signal used to kill process (default TERM)</span></span><br><span class="line"><span class="comment">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</span></span><br><span class="line"><span class="comment">;stopasgroup=false             ; 进程被杀死时，是否向这个进程组发送stop信号，包括program子进程,默认false</span></span><br><span class="line"><span class="comment">;killasgroup=false             ; 向进程组发送kill信号，包括program子进程,默认false</span></span><br><span class="line"><span class="comment">;user=chrism                   ; 运行program进程的用户,默认同supervisord服务的启动用户。如果supervisord由root启动,而你又不想给program进程root,你可以配置这个参数</span></span><br><span class="line"><span class="comment">;redirect_stderr=true          ; 把stderr重定向到stdout，默认false</span></span><br><span class="line"><span class="comment">;stdout_logfile=/a/path        ; 由于program进程由supervisord启动，所以其stdout将无法输出到系统的标准输出上，所以你要将program进程的stdout写入到日志文件中。这个参数指定了该日志文件的位置,默认是 $CWD/supervisord.log。(需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录)</span></span><br><span class="line"><span class="comment">;stdout_logfile_maxbytes=1MB   ; 日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span></span><br><span class="line"><span class="comment">;stdout_logfile_backups=10     ; 日志文件保留备份数量默认10，设为0表示不备份</span></span><br><span class="line"><span class="comment">;stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)</span></span><br><span class="line"><span class="comment">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</span></span><br><span class="line"><span class="comment">;stderr_logfile=/a/path        ; 同stdout_logfile，这里指定了stderr写入的日志文件位置</span></span><br><span class="line"><span class="comment">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line"><span class="comment">;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)</span></span><br><span class="line"><span class="comment">;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)</span></span><br><span class="line"><span class="comment">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span></span><br><span class="line"><span class="comment">;environment=A="1",B="2"       ; 通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</span></span><br><span class="line"><span class="comment">;serverurl=AUTO                ; override serverurl computation (childutils)</span></span><br></pre></td></tr></table></figure>
<h4><span id="include">include</span></h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[include]</span></span><br><span class="line"><span class="comment">;files = relative/directory/*.ini	; 可以指定一个或多个以.ini结束的配置文件</span></span><br></pre></td></tr></table></figure>
<h4><span id="group">group</span></h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[group:x]</span></span><br><span class="line"><span class="comment">;programs=progname1,progname2  ; each refers to 'x' in [program:x] definitions</span></span><br><span class="line"><span class="comment">;priority=999                  ; the relative start priority (default 999)</span></span><br></pre></td></tr></table></figure>
<h4><span id="rpcinerface">rpcinerface</span></h4><p>这个选项是给XML_RPC用的，当然你如果想使用supervisord或者web server 这个选项必须要开启的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[rpcinterface:supervisor]</span></span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br></pre></td></tr></table></figure>
<h4><span id="fcgi-program">fcgi-program</span></h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">;[fcgi-program:x]</span></span><br><span class="line"><span class="comment">;command=/bin/cat              ; program的运行命令,支持相对路径,可以带参数</span></span><br><span class="line"><span class="comment">;socket=unix:///var/run/supervisor/%(program_name)s.sock</span></span><br><span class="line"><span class="comment">;socket=tcp://localhost:9002</span></span><br><span class="line"><span class="comment">;socket_owner=user:group</span></span><br><span class="line"><span class="comment">;socket_mode=0700</span></span><br><span class="line"><span class="comment">;process_name=%(program_name)s ; 进程名称,默认是%(program_name)s,如果numprocs大于1,则必须将”%(process_num)s”变量放入”process_name”中，防止多个进程同名导致启动出错</span></span><br><span class="line"><span class="comment">;numprocs=1                    ; 同时启动的进程个数,用来实现并发,默认是1</span></span><br><span class="line"><span class="comment">;directory=/tmp                ; 如果配置了这个目录,那program运行前,会先切换到这个目录</span></span><br><span class="line"><span class="comment">;umask=022                     ; umask for process (default None)</span></span><br><span class="line"><span class="comment">;priority=999                  ; program进程优先级,决定了启动和关闭program进程的顺序,默认是最大值999</span></span><br><span class="line"><span class="comment">;autostart=true                ; 启动supervisord时,program进程是否自动启动,默认是true</span></span><br><span class="line"><span class="comment">;startsecs=1                   ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span></span><br><span class="line"><span class="comment">;startretries=3                ; 启动失败自动重试次数，默认是3</span></span><br><span class="line"><span class="comment">;autorestart=unexpected        ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span></span><br><span class="line"><span class="comment">;exitcodes=0,2                 ; 'expected' exit codes used with autorestart (default 0,2)</span></span><br><span class="line"><span class="comment">;stopsignal=QUIT               ; signal used to kill process (default TERM)</span></span><br><span class="line"><span class="comment">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</span></span><br><span class="line"><span class="comment">;stopasgroup=false             ; 进程被杀死时，是否向这个进程组发送stop信号，包括program子进程,默认false</span></span><br><span class="line"><span class="comment">;killasgroup=false             ; 向进程组发送kill信号，包括program子进程,默认false</span></span><br><span class="line"><span class="comment">;user=chrism                   ; 运行program进程的用户,默认同supervisord服务的启动用户。如果supervisord由root启动,而你又不想给program进程root,你可以配置这个参数</span></span><br><span class="line"><span class="comment">;redirect_stderr=true          ; 把stderr重定向到stdout，默认false</span></span><br><span class="line"><span class="comment">;stdout_logfile=/a/path        ; 由于program进程由supervisord启动，所以其stdout将无法输出到系统的标准输出上，所以你要将program进程的stdout写入到日志文件中。这个参数指定了该日志文件的位置,默认是 $CWD/supervisord.log。(需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录)</span></span><br><span class="line"><span class="comment">;stdout_logfile_maxbytes=1MB   ; 日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span></span><br><span class="line"><span class="comment">;stdout_logfile_backups=10     ; 日志文件保留备份数量默认10，设为0表示不备份</span></span><br><span class="line"><span class="comment">;stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)</span></span><br><span class="line"><span class="comment">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</span></span><br><span class="line"><span class="comment">;stderr_logfile=/a/path        ; 同stdout_logfile，这里指定了stderr写入的日志文件位置</span></span><br><span class="line"><span class="comment">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line"><span class="comment">;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)</span></span><br><span class="line"><span class="comment">;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)</span></span><br><span class="line"><span class="comment">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span></span><br><span class="line"><span class="comment">;environment=A="1",B="2"       ; 通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</span></span><br><span class="line"><span class="comment">;serverurl=AUTO                ; override serverurl computation (childutils)</span></span><br></pre></td></tr></table></figure>
<h4><span id="eventlistenner">eventlistenner</span></h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">;[eventlistenner:x]</span></span><br><span class="line"><span class="comment">;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)</span></span><br><span class="line"><span class="comment">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</span></span><br><span class="line"><span class="comment">;numprocs=1                    ; number of processes copies to start (def 1)</span></span><br><span class="line"><span class="comment">;events=EVENT                  ; event notif. types to subscribe to (req\'d)</span></span><br><span class="line"><span class="comment">;buffer_size=10                ; event buffer queue size (default 10)</span></span><br><span class="line"><span class="comment">;directory=/tmp                ; directory to cwd to before exec (def no cwd)</span></span><br><span class="line"><span class="comment">;umask=022                     ; umask for process (default None)</span></span><br><span class="line"><span class="comment">;priority=-1                   ; the relative start priority (default -1)</span></span><br><span class="line"><span class="comment">;autostart=true                ; start at supervisord start (default: true)</span></span><br><span class="line"><span class="comment">;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)</span></span><br><span class="line"><span class="comment">;startretries=3                ; max # of serial start failures when starting (default 3)</span></span><br><span class="line"><span class="comment">;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)</span></span><br><span class="line"><span class="comment">;exitcodes=0,2                 ; 'expected' exit codes used with autorestart (default 0,2)</span></span><br><span class="line"><span class="comment">;stopsignal=QUIT               ; signal used to kill process (default TERM)</span></span><br><span class="line"><span class="comment">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</span></span><br><span class="line"><span class="comment">;stopasgroup=false             ; send stop signal to the UNIX process group (default false)</span></span><br><span class="line"><span class="comment">;killasgroup=false             ; SIGKILL the UNIX process group (def false)</span></span><br><span class="line"><span class="comment">;user=chrism                   ; setuid to this UNIX account to run the program</span></span><br><span class="line"><span class="comment">;redirect_stderr=false         ; redirect_stderr=true is not allowed for eventlisteners</span></span><br><span class="line"><span class="comment">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</span></span><br><span class="line"><span class="comment">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line"><span class="comment">;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)</span></span><br><span class="line"><span class="comment">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</span></span><br><span class="line"><span class="comment">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</span></span><br><span class="line"><span class="comment">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span></span><br><span class="line"><span class="comment">;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)</span></span><br><span class="line"><span class="comment">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span></span><br><span class="line"><span class="comment">;environment=A="1",B="2"       ; process environment additions</span></span><br><span class="line"><span class="comment">;serverurl=AUTO                ; override serverurl computation (childutils)</span></span><br></pre></td></tr></table></figure>
<h3><span id="supervisor-命令">Supervisor 命令</span></h3><ul>
<li><p>启动supervisor服务</p>
<p><code>$ install_path/supervisord -c supervisord.conf</code></p>
<p><em>如果是<code>apt-get</code>安装，可通过<code>service supervisor start</code>启动</em></p>
</li>
<li><p>停止supervisor服务</p>
<p><code>$ supervisorctl [-c supervisord.conf] shutdown</code></p>
<p><em>如果是<code>apt-get</code>安装，可通过<code>service supervisor stop</code>停止</em></p>
</li>
<li><p>查看supervisor管理的program列表及状态</p>
<p><code>$ supervisorctl [-c supervisord.conf] status</code></p>
</li>
<li><p>管理单个或多个进程</p>
<p><code>$ supervisorctl [-c supervisord.conf] [start|status|stop|restart] program_name_1 [program_name_n...]</code></p>
</li>
<li><p>管理进程组</p>
<p><code>$ supervisorctl [-c supervisord.conf] [start|status|stop|restart] groupworker:group_name</code></p>
</li>
<li><p>启动新配置的program、重启配置有改动的program</p>
<p><code>$ supervisorctl [-c supervisord.conf] update</code></p>
</li>
<li><p>停止<strong>原所有进程</strong>，并按新的配置启动program</p>
<p><code>$ supervisorctl [-c supervisord.conf] reload</code></p>
</li>
<li><p>停止所有program</p>
<p><code>$ supervisorctl [-c supervisord.conf] stop all</code></p>
</li>
<li><p>进入supervisorctl交互式环境</p>
<p><code>$supervisorctl [-c supervisord.conf]</code></p>
</li>
</ul>
<h3><span id="说明">说明</span></h3><ol>
<li><p>Supervisor 只能管理在前台运行的程序，所以如果应用程序有后台运行的选项，需要关闭。</p>
</li>
<li><p>如果program还有子进程，为确保所有program子进程都能正确停止，[program:x]下的<code>stopasgroup</code>和<code>killasgroup</code>都必须设置为true，否则program子进程就可能变成僵尸进程。</p>
</li>
<li><p>按照官方文档的定义，一个 [program:x] 实际上是表示一组相同特征或同类的进程组，也就是说一个 [program:x] 可以启动<em>多个进程</em>。这组进程的成员是通过 <code>numprocs</code> 和 <code>process_name</code> 这两个参数来确定的。</p>
</li>
<li><p>Supervisor 同时还提供了另外一种进程组的管理方式，通过这种方式，可以使用 supervisorctl 命令来管理一组进程。跟 [program:x] 的进程组不同的是，这里的进程是一个个的 [program:x] 。</p>
</li>
<li><p>Supervisor的Web Server界面长这样</p>
<p><img src="../../resource/images/supervisor-web-01.png" alt="supervisor web页面"></p>
</li>
</ol>
<p>参考资料:<br><a href="http://www.bjhee.com/supervisor.html" target="_blank" rel="noopener">Linux上的后台进程管理工具Supervisor</a><br><a href="http://blog.51cto.com/lixcto/1539136" target="_blank" rel="noopener">supervisor(一)基础篇</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux chattr和lsattr命令</title>
    <url>/article/5c9c/</url>
    <content><![CDATA[<ol>
<li><p>chattr</p>
<p>Linux chattr命令用于改变文件属性</p>
<blockquote>
<p>chattr [-RV][-v&lt;版本编号&gt;][+/-/=&lt;属性&gt;][文件或目录…]<br>参数<br>　　-R 递归处理，将指定目录下的所有文件及子目录一并处理。<br>　　-v&lt;版本编号&gt; 设置文件或目录版本。<br>　　-V 显示指令执行过程。<br>　　+&lt;属性&gt; 开启文件或目录的该项属性。<br>　　-&lt;属性&gt; 关闭文件或目录的该项属性。<br>　　=&lt;属性&gt; 指定文件或目录的该项属性。</p>
<p>这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：<br>a：让文件或目录仅供附加用途。<br>b：不更新文件或目录的最后存取时间。<br>c：将文件或目录压缩后存放。<br>d：将文件或目录排除在倾倒操作之外。<br>i：不得任意更动文件或目录。<br>s：保密性删除文件或目录。<br>S：即时更新文件或目录。<br>u：预防以外删除。</p>
</blockquote>
</li>
<li><p>lsattr</p>
<p>Linux lsattr命令用于显示文件属性</p>
<blockquote>
<p>lsattr [-adlRvV][文件或目录…]<br>-a 　显示所有文件和目录，包括以”.”为名称开头字符的额外内建，现行目录”.”与上层目录”..”。<br>-d 　显示，目录名称，而非其内容。<br>-l 　此参数目前没有任何作用。<br>-R 　递归处理，将指定目录下的所有文件及子目录一并处理。<br>-v 　显示文件或目录版本。<br>-V 　显示版本信息。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>chattr</tag>
        <tag>lsattr</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux export命令</title>
    <url>/article/4e9f/</url>
    <content><![CDATA[<p><strong>参数说明</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export [-fnp][变量名称]=[变量设置值]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<p>​    -f 　代表[变量名称]中为函数名称。</p>
<p>​    -n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。</p>
<p>​    -p 　列出所有的shell赋予程序的环境变量。</p>
<p><strong>设置环境变量</strong></p>
<ol>
<li><p>直接用export命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export username="wayde"</span><br></pre></td></tr></table></figure>
<p>查看是否已经设好，可用命令export查看：</p>
</li>
<li><p>修改/etc/profile文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">vim /etc/profile</span></span><br><span class="line">在里面加入:</span><br><span class="line">export username="wayde"</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改~/.bashrc文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim ~/.bashrc</span></span><br><span class="line">在里面加入：</span><br><span class="line">export username="wayde"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim ~/.zshrc</span></span><br><span class="line">在里面加入：</span><br><span class="line">export username="wayde"</span><br></pre></td></tr></table></figure>
<blockquote>
<p>后两种方法一般需要重新注销系统才能生效，最后可以通过echo命令测试一下：</p>
<p>echo $username</p>
</blockquote>
</li>
</ol>
<p>参考资料:<br><a href="http://www.cnblogs.com/tinywan/p/7224011.html" target="_blank" rel="noopener">Linux 命令详解（一）export 命令</a><br><a href="http://www.cnblogs.com/zhangze/articles/1832542.html" target="_blank" rel="noopener">shell export 作用</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>export</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux find命令</title>
    <url>/article/4935/</url>
    <content><![CDATA[<p><code>find pathname -option -action</code></p>
<ul>
<li><p>pathname</p>
<p>多个目录空格分开</p>
</li>
<li><p>option</p>
<p>-name  文件名查找</p>
<p>-iname  文件名查找(不区分大小写)</p>
<p>-user  根据属主来查找文件</p>
<p>!-user 根据属主来查找文件(不属于)</p>
<p>-group  根据属组来查找文件</p>
<p>!-group  根据属组来查找文件(不属于)</p>
<p>-uid  属主id</p>
<p>-gid  属组id</p>
<p>-a  连接两个不同的条件(两个条件必须同时满足)</p>
<p>-o  连接两个不同的条件(两个条件满足其一即可)</p>
<p>-not  对条件取反的</p>
<p>-size n  指定文件大小，若数字前+表示大于，-表示小于；常用单位c(字节)，k，M，G</p>
<p>-perm  根据文件权限查找文件</p>
<p>-nouser  and  -nogroup  查找既没有属主又没有属组的文件 </p>
<p>-follow  遇到符号链接文件，就跟踪到链接指向的文件</p>
<p>-mount  不跨越文件系统的mount点，即在当前的文件系统查询，不进入其他文件系统（如挂载的windows系统）</p>
<p>-prune　指出要忽略的目录</p>
<p>-path pathname -prune    避开指定子目录pathname查找</p>
<p>-atime  -n[+n]    找出文件访问时间在n日之内[之外]的文件</p>
<p>-ctime  -n[+n]    找出文件更改时间在n日之内[之外]的文件</p>
<p>-mtime -n[+n]    找出修改数据时间在n日之内[之外]的文件</p>
<p>-amin   -n[+n]    找出文件访问时间在n分钟之内[之外]的文件</p>
<p>-cmin   -n[+n]    找出文件更改时间在n分钟之内[之外]的文件</p>
<p>-mmin  -n[+n]    找出修改数据时间在n分钟之内[之外]的文件</p>
<p>-maxdepth    后面的参数表示距当前目录指定的深度</p>
</li>
<li><p>action</p>
<p>-print  默认情况下的动作</p>
<p>-ls  查找到后用ls 显示出来</p>
<p>-ok [command] {} \; 查找后执行命令的时候询问用户是否要执行</p>
<p>-exec [command] {} \; 查找后执行命令的时候不询问用户，直接执行</p>
</li>
</ul>
<p>eg:</p>
<ol>
<li><p>删除查找到的超过30天没有访问过文件</p>
<p><code>find  /tmp  -atime  +30  –exec rm –rf  {}  \;</code></p>
</li>
<li><p>查找在五天内没有访问过的文件</p>
<p><code>find  /tmp  –atime  +5</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>find</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux grep命令</title>
    <url>/article/cecf/</url>
    <content><![CDATA[<ol>
<li><p>排除多个</p>
<p><code>grep -v &#39;name\|age\|sex&#39;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux iptables用法</title>
    <url>/article/a202/</url>
    <content><![CDATA[<p><code>iptables -L</code></p>
<p><code>iptables -L -n</code></p>
<p><code>iptables -L -t nat</code></p>
<p><code>iptables -L -n -t nat</code></p>
<p><code>iptables -vnL --line-numbers</code></p>
<p><code>iptables -D FORWARD 4</code></p>
<p><code>iptables -t nat -D PREROUTING 5</code></p>
<p><code>iptables-save &gt; /etc/iptables/rules.v4.bak</code></p>
<p><code>iptables-restore &lt; /etc/iptables/rules.v4.bak</code></p>
<p><code>iptables -F</code>  删除所有规则</p>
<ul>
<li><p>iptables-persistent</p>
<blockquote>
<p>持久化iptables</p>
<p>正常情况下，我们写入的iptables规则将会在系统重启时消失。即使我们使用iptables-save命令将iptables规则存储到文件，在系统重启后也需要执行iptables-restore操作来恢复原有规则。(当然，你也可以通过在network中的if.post.up.d中配置启动规则来达到开机自动启动iptables的方法)</p>
<p>这里我们有一个更好的iptables持久化方案，让防火墙规则重启后依旧有效。即使用iptables-persistent工具。</p>
<p>To do this, the rules must be saved in the file <code>/etc/iptables/rules.v4</code> for IPv4 and <code>/etc/iptables/rules.v6</code> for IPv6.</p>
<p>Usage: /etc/init.d/iptables-persistent {start|restart|reload|force-reload|save|flush}</p>
</blockquote>
<p>安装: <code>sudo apt-get install iptables-persistent</code></p>
</li>
<li><p>centos</p>
<blockquote>
<p>service iptables status</p>
<p>/etc/rc.d/init.d/iptables save</p>
<p>iptables -P INPUT DROP</p>
<p>iptables -P OUTPUT ACCEPT</p>
<p>iptables -P FORWARD DROP</p>
<p>iptables -A INPUT -p tcp –dport 10302 -j ACCEPT</p>
<p>iptables -A INPUT -p tcp –dport 3306 -j ACCEPT</p>
<p>iptables -A INPUT -p tcp –dport 80 -j ACCEPT</p>
<p>iptables -A INPUT -p tcp –dport 443 -j ACCEPT</p>
<p>iptables -A INPUT -p icmp -j ACCEPT (允许ping)</p>
<p>iptables -L -n –line-numbers</p>
<p>iptables -D INPUT 4 (删除某条规则)</p>
<p>iptables -A INPUT -s localhost -d localhost -j ACCEPT (允许本地的数据包)</p>
<p>service iptables restart</p>
<p>iptables -A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT (放开yum)</p>
</blockquote>
</li>
</ul>
<p>参考资料:<br><a href="https://www.thomas-krenn.com/en/wiki/Saving_Iptables_Firewall_Rules_Permanently" target="_blank" rel="noopener">Saving Iptables Firewall Rules Permanently</a><br><a href="http://blog.csdn.net/csfreebird/article/details/8132362" target="_blank" rel="noopener">iptables加强系统安全性</a><br><a href="http://www.cnblogs.com/kevingrace/p/6265113.html" target="_blank" rel="noopener">Iptables防火墙规则使用梳理</a><br><a href="http://blog.csdn.net/hepeng597/article/details/8270138" target="_blank" rel="noopener">iptables用法初解</a><br><a href="http://linux.vbird.org/linux_server/0250simple_firewall.php" target="_blank" rel="noopener">第九章、防火墙与 NAT 服务器</a><br><a href="http://blog.csdn.net/splenday/article/details/50697881" target="_blank" rel="noopener">iptables基础知识详解</a><br><a href="http://blog.csdn.net/reyleon/article/details/12976341" target="_blank" rel="noopener">Iptables详解</a><br><a href="http://blog.chinaunix.net/uid-26495963-id-3279216.html" target="_blank" rel="noopener">Iptables详解</a><br><a href="http://www.cnblogs.com/bangerlee/archive/2013/02/27/2935422.html" target="_blank" rel="noopener">9个常用iptables配置实例</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux ln命令</title>
    <url>/article/fc6c/</url>
    <content><![CDATA[<blockquote>
<p>默认情况下，ln命令产生硬链接。</p>
</blockquote>
<p><code>ln [-s] source target</code></p>
<ul>
<li><p>硬链接(Hard Link)</p>
<blockquote>
<p>硬连接指通过索引节点来进行连接。</p>
<p>在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。</p>
<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。</p>
<p>也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>
<p>硬连接的2个限制：</p>
<ol>
<li>不允许给目录创建硬链接</li>
<li>只有在同一文件系统中的文件之间才能创建链接。 即不同硬盘分区上的两个文件之间不能够建立硬链接。这是因为硬链接是通过结点指向原始文件的，而文件的i-结点在不同的文件系统中可能会不同。</li>
</ol>
</blockquote>
</li>
<li><p>符号链接(Symbolic Link)</p>
<blockquote>
<p>软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p>
<p>​      这就允许符号链接（经常简写为symlinks）指向位于其他分区、甚至是其他网络硬盘上的某个文件</p>
</blockquote>
</li>
</ul>
<p>参考资料:<br><a href="http://www.cnblogs.com/crazylqy/p/5821105.html" target="_blank" rel="noopener">linux硬链接与软链接</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux lsblk命令</title>
    <url>/article/a303/</url>
    <content><![CDATA[<p>lsblk命令用于列出所有可用块设备的信息，而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。块设备有硬盘，闪存盘，cd-ROM等等</p>
<ul>
<li><p>选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a, --all            显示所有设备。</span><br><span class="line">-b, --bytes          以bytes方式显示设备大小。</span><br><span class="line">-d, --nodeps         不显示 slaves 或 holders。</span><br><span class="line">-D, --discard        print discard capabilities。</span><br><span class="line">-e, --exclude &lt;list&gt; 排除设备 (default: RAM disks)。</span><br><span class="line">-f, --fs             显示文件系统信息。</span><br><span class="line">-h, --help           显示帮助信息。</span><br><span class="line">-i, --ascii          use ascii characters only。</span><br><span class="line">-m, --perms          显示权限信息。</span><br><span class="line">-l, --list           使用列表格式显示。</span><br><span class="line">-n, --noheadings     不显示标题。</span><br><span class="line">-o, --output &lt;list&gt;  输出列。</span><br><span class="line">-P, --pairs          使用key="value"格式显示。</span><br><span class="line">-r, --raw            使用原始格式显示。</span><br><span class="line">-t, --topology       显示拓扑结构信息。</span><br></pre></td></tr></table></figure>
</li>
<li><p>名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME：这是块设备名。</span><br><span class="line">MAJ:MIN：本栏显示主要和次要设备号。</span><br><span class="line">RM：本栏显示设备是否可移动设备。注意，在本例中设备sdb和sr0的RM值等于1，这说明他们是可移动设备。</span><br><span class="line">SIZE：本栏列出设备的容量大小信息。例如298.1G表明该设备大小为298.1GB，而1K表明该设备大小为1KB。</span><br><span class="line">RO：该项表明设备是否为只读。在本案例中，所有设备的RO值为0，表明他们不是只读的。</span><br><span class="line">TYPE：本栏显示块设备是否是磁盘或磁盘上的一个分区。在本例中，sda和sdb是磁盘，而sr0是只读存储（rom）。</span><br><span class="line">MOUNTPOINT：本栏指出设备挂载的挂载点。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>$ lsblk</p>
<p>NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0 931.5G  0 disk<br>├─sda1   8:1    0 915.6G  0 part /<br>├─sda2   8:2    0     1K  0 part<br>└─sda5   8:5    0  15.9G  0 part [SWAP]<br>loop0    7:0    0  81.3M  1 loop /snap/core/3887<br>loop1    7:1    0  81.6M  1 loop /snap/core/4110<br>loop2    7:2    0 253.5M  1 loop /snap/electronic-wechat/7<br>loop3    7:3    0  81.7M  1 loop /snap/core/4206<br>loop4    7:4    0  86.3M  1 loop /snap/sensors-unity/61</p>
</blockquote>
<p>参考资料:<br><a href="http://man.linuxde.net/lsblk" target="_blank" rel="noopener">lsblk命令</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>lsblk</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux mtr命令</title>
    <url>/article/7026/</url>
    <content><![CDATA[<p>mtr—网络连通性判断工具</p>
<blockquote>
<p>eg. mtr www.baidu.com</p>
<p>mtr -h 提供帮助命令</p>
<p>mtr -v 显示mtr的版本信息</p>
<p>mtr -r 已报告模式显示</p>
<p>mtr -c 设置每秒发送数据包的数量(默认10)</p>
<p>mtr -s 用来指定ping数据包的大小</p>
<p>mtr -n no-dns不对IP地址做域名解析</p>
<p>mtr -a 来设置发送数据包的IP地址 这个对一个主机由多个IP地址是有用的</p>
<p>mtr -i 使用这个参数来设置ICMP返回之间的要求默认是1秒</p>
<p>mtr -4 IPv4</p>
<p>mtr -6 IPv6</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>mtr</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux netstat命令</title>
    <url>/article/7836/</url>
    <content><![CDATA[<blockquote>
<p>Netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。</p>
</blockquote>
<p><code>netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a或--all 显示所有选项，netstat默认不显示LISTEN相关</span><br><span class="line">-t或--tcp 仅显示tcp相关选项</span><br><span class="line">-u或--udp 仅显示udp相关选项</span><br><span class="line">-n或--numeric 直接使用IP地址，而不通过域名服务器。</span><br><span class="line">-l或--listening 仅列出有在Listen(监听)的服务状态</span><br><span class="line">-p或--programs 显示建立相关链接的程序名(macOS中表示协议 -p protocol)</span><br><span class="line">-r或--route 显示路由信息，路由表</span><br><span class="line">-e或--extend 显示扩展信息，例如uid等</span><br><span class="line">-s或--statistice 按各个协议进行统计</span><br><span class="line">-c或--continuous 每隔一个固定时间，执行该netstat命令。</span><br><span class="line">-A&lt;网络类型&gt;或–&lt;网络类型&gt; 列出该网络类型连线中的相关地址。</span><br><span class="line">-C或--cache 显示路由器配置的快取信息。</span><br><span class="line">-F或--fib 显示FIB。</span><br><span class="line">-g或--groups 显示多重广播功能群组组员名单。</span><br><span class="line">-h或--help 在线帮助。</span><br><span class="line">-i或--interfaces 显示网络界面信息表单。</span><br><span class="line">-l或--listening 显示监控中的服务器的Socket。</span><br><span class="line">-M或--masquerade 显示伪装的网络连线。</span><br><span class="line">-n或--numeric 直接使用IP地址，而不通过域名服务器。</span><br><span class="line">-N或--netlink或–symbolic 显示网络硬件外围设备的符号连接名称。</span><br><span class="line">-o或--timers 显示计时器。</span><br><span class="line">-v或--verbose 显示指令执行过程。</span><br><span class="line">-V或--version 显示版本信息。</span><br><span class="line">-w或--raw 显示RAW传输协议的连线状况。</span><br><span class="line">-x或--unix 此参数的效果和指定”-A unix”参数相同。</span><br><span class="line">-ip或--inet 此参数的效果和指定”-A inet”参数相同</span><br></pre></td></tr></table></figure>
<p>参考资料:<br><a href="https://linux.cn/article-2434-1.html" target="_blank" rel="noopener">netstat 的10个基本用法</a><br><a href="http://www.cnblogs.com/echo1937/p/6677325.html" target="_blank" rel="noopener">Linux netstat命令详解</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>netstat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux nmap命令</title>
    <url>/article/2292/</url>
    <content><![CDATA[<blockquote>
<p>Nmap即网络映射器对Linux系统/网络管理员来说是一个开源且非常通用的工具。Nmap用于在远程机器上探测网络，执行安全扫描，网络审计和搜寻开放端口。</p>
</blockquote>
<ul>
<li><p>扫描局域网ip</p>
<p><code>nmap 10.17.1.*</code></p>
</li>
<li><p>查看局域网mac</p>
<p><code>cat /proc/net/arp</code></p>
</li>
<li><p>扫描IP开放端口</p>
<p><code>nmap -Pn 120.79.148.49</code></p>
</li>
</ul>
<p>参考资料:<br><a href="http://os.51cto.com/art/201401/428152.htm" target="_blank" rel="noopener">给Linux系统管理员准备的Nmap命令的29个实用范例</a><br><a href="http://blog.csdn.net/keepsmi1e/article/details/9370049" target="_blank" rel="noopener">Linux 下查看局域网内所有主机IP和MAC(及nmap的用法)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux ssh命令</title>
    <url>/article/f75d/</url>
    <content><![CDATA[<h3><span id="指定端口和私钥连接">指定端口和私钥连接</span></h3><p><code>$ ssh username@remote_host -p port -i ~/.ssh/private.key</code></p>
<h3><span id="远程执行命令">远程执行命令</span></h3><p><code>$ ssh pandll-hk ls -l</code></p>
<h3><span id="挂载远程文件系统">挂载远程文件系统</span></h3><p><code>$ sudo apt-get install sshfs</code></p>
<p><code>$ sshfs -o idmap=user pandll-hk:/home/wayde ~/Remote</code></p>
<p>该命令就将远程主机user用户的主目录挂载到本地主目录下的 Remote文件夹</p>
<h3><span id="利用x11-forwarding远程执行gui程序">利用X11 Forwarding远程执行GUI程序</span></h3><h4><span id="原理">原理</span></h4><p>Linux下执行一个GUI程序通常需要两个部分来协调完成，X server与X client。</p>
<p>X server是专门负责显示用户界面的，它管理你的显示器，键盘以及鼠标，通常你看到的桌面系统即是由它在背后驱动的。</p>
<p>X client则负责程序的逻辑，如果需要使用用户界面，则通过给X server发送请求来完成。</p>
<p>通常情况下，X server与X client都运行在同一台机器上，例如我们在Window上运行任何GUI程序都是这样的。</p>
<p>但因为X系统当初设计成是通过socket在X server与X client之间通信的，所以它们也可以运行在不同的机器上。<br>X11 Forwarding就提供了一个方法，在远程机器上执行X client程序(如Firefox)，但是在本地机器上显示(即运行X server)。</p>
<h4><span id="步骤">步骤</span></h4><ol>
<li><p>配置<code>X client</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/ssh/sshd_config</span></span><br><span class="line">X11Forwarding yes</span><br><span class="line">X11DisplayOffset 10</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置<code>X server</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/ssh/ssh_config</span></span><br><span class="line">Host *</span><br><span class="line">   ForwardX11 yes</span><br></pre></td></tr></table></figure>
</li>
<li><p>远程连接</p>
<p><code>$ ssh -aX pandll-hk</code></p>
</li>
</ol>
<h3><span id="将本机公钥写入远程服务器">将本机公钥写入远程服务器</span></h3><p><code>$ cat ~/.ssh/id_rsa.pub | ssh user@host &#39;cat &gt;&gt; .ssh/authorized_keys&#39;</code></p>
<p>参考资料:<br><a href="https://linux.cn/article-3858-1.html" target="_blank" rel="noopener">Linux 下 SSH 命令实例指南</a><br><a href="http://www.cnblogs.com/yasmi/articles/4835070.html" target="_blank" rel="noopener">Ubuntu下ssh连接显示图形界面</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux mtr命令</title>
    <url>/article/7026/</url>
    <content><![CDATA[<blockquote>
<p>!! 表示上一条命令</p>
<p>Esc + . 表示上一条命令的最后部分</p>
<p>sudo bash 进入root shell</p>
<p>sudo su - 切换到root用户</p>
<p>:w !sudo tee %  vim编辑后再以sudo权限保存</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux tail命令</title>
    <url>/article/f03a/</url>
    <content><![CDATA[<h4><span id="tail-f多次grep过滤输出">tail-f多次grep过滤输出</span></h4><p><code>tail -f log | grep xxx | grep yyy</code></p>
<p>发现grep失效，无法做正确输出，原因如下：<br>管道 | 是全缓冲的，一般来说buffer_size为4096，有些是8192。不管具体值多少，只有buffer_size满了，才会看到输出。</p>
<p>解决方法:</p>
<p><code>tail -f log | grep --line-buffer xxx | grep --line-buffer yyy</code></p>
<p><code>tail -f filename.log | grep --line-buffered -i xxx | grep --line-buffered -v yyy</code></p>
<h4><span id="解决tail-f-inotify-资源耗尽问题">解决tail -f inotify 资源耗尽问题</span></h4><ul>
<li><p>查看 inotify 的配置</p>
<blockquote>
<p>sysctl fs.inotify</p>
</blockquote>
</li>
</ul>
<ul>
<li><p>修改 inotify 文件监听上限</p>
<blockquote>
<p>echo fs.inotify.max_user_watches=100000 | sudo tee -a /etc/sysctl.conf<br>sudo sysctl -p (重载配置文件，使之马上生效)</p>
</blockquote>
</li>
</ul>
<p>参考资料:<br><a href="http://www.quwenqing.com/read-134.html" target="_blank" rel="noopener">tail -f 多次grep过滤输出</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tail</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux tar命令</title>
    <url>/article/d340/</url>
    <content><![CDATA[<ul>
<li><p>tar</p>
<blockquote>
<p>-c: 建立压缩档案<br>-x：解压<br>-t：查看内容<br>-r：向压缩归档文件末尾追加文件<br>-u：更新原压缩包中的文件</p>
<p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。</p>
<p>-z：有gzip属性的</p>
<p>-j：有bz2属性的</p>
<p>-Z：有compress属性的</p>
<p>-v：显示所有过程</p>
<p>-O：将文件解开到标准输出</p>
<p>-P：绝对路径(tar默认为相对路径)</p>
<p>下面的参数-f是必须的</p>
<p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p>
</blockquote>
</li>
</ul>
<p>不带P时，会自动移除路径前面的’/‘</p>
<p><code>tar: Removing leading &amp;apos;/&#39; from member names</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux tree命令</title>
    <url>/article/957a/</url>
    <content><![CDATA[<blockquote>
<p>Linux tree命令用于以树状图列出目录的内容。<br>执行tree指令，它会列出指定目录下的所有文件，包括子目录里的文件。</p>
</blockquote>
<p>当你需要向别人展示或者介绍某个项目的目录结构时，<code>tree</code>命令就可以派上用场了。</p>
<p>不仅仅是在终端显示，<code>tree</code>命令还支持输出<code>xml</code>|<code>json</code>|<code>html</code>格式的数据。</p>
<p>如果你有一个包含大量<code>html</code>文件的目录，需要生成一个树形的<code>index</code>导航，下面的命令就可以解决:</p>
<p><code>$ tree -H . ./ -T IndexTitle -o index.html</code></p>
<a id="more"></a>
<p>详细用法如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ]</span><br><span class="line">	[-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version]</span><br><span class="line">	[--help] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst]</span><br><span class="line">	[--charset charset] [--filelimit[=]#] [--si] [--timefmt[=]&lt;f&gt;]</span><br><span class="line">	[--sort[=]&lt;name&gt;] [--matchdirs] [--ignore-case] [--] [&lt;directory list&gt;]</span><br><span class="line">  ------- 列表相关选项 -------</span><br><span class="line">  -a            显示所有文件和目录</span><br><span class="line">  -d            显示目录名称而非内容</span><br><span class="line">  -l            如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录</span><br><span class="line">  -f            在每个文件或目录之前，显示完整的相对路径名称</span><br><span class="line">  -x            将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外</span><br><span class="line">  -L level      指定目录层级</span><br><span class="line">  -R            Rerun tree when max dir level reached.</span><br><span class="line">  -P pattern    只显示匹配pattern的文件或目录名称</span><br><span class="line">  -I pattern    不显示匹配pattern的文件或目录名称</span><br><span class="line">  --ignore-case 忽略大小写</span><br><span class="line">  --matchdirs   Include directory names in -P pattern matching.</span><br><span class="line">  --noreport    不显示最后面的文件/目录总数</span><br><span class="line">  --charset X   设置字符集</span><br><span class="line">  --filelimit # Do not descend dirs with more than # files in them.</span><br><span class="line">  --timefmt &lt;f&gt; 格式化输出时间(如"%Y-%m-%d %H:%M:%S")</span><br><span class="line">  -o filename   输出内容写入指定文件</span><br><span class="line">  -------- 文件相关选项 ---------</span><br><span class="line">  -q            用"?"号取代控制字符，列出文件和目录名称</span><br><span class="line">  -N            直接列出文件和目录名称，包括控制字符</span><br><span class="line">  -Q            输出的文件名用双引号""包起来</span><br><span class="line">  -p            列出权限标示</span><br><span class="line">  -u            列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码</span><br><span class="line">  -g            列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码</span><br><span class="line">  -s            列出文件或目录大小</span><br><span class="line">  -h            自动选择文件大小的单位(1M=1024Kb)</span><br><span class="line">  --si          类似-h，但是使用国际单位(1M=1000Kb)</span><br><span class="line">  -D            列出文件或目录的更改时间</span><br><span class="line">  -F            在执行文件，目录，Socket，符号连接，管道名称名称，各自加上"*","/","=","@","|"号</span><br><span class="line">  --inodes      输出每个文件的索引节点</span><br><span class="line">  --device      输出每个文件归属的设备ID</span><br><span class="line">  ------- 排序相关选项 -------</span><br><span class="line">  -v            根据文件名排序</span><br><span class="line">  -t            用文件和目录的更改时间排序</span><br><span class="line">  -c            根据ctime排序</span><br><span class="line">  -U            文件和文件夹混杂</span><br><span class="line">  -r            逆序排列(与--sort配合使用)</span><br><span class="line">  --dirsfirst   显示列表优先显示文件夹</span><br><span class="line">  --sort X      排序选项(name,version,size,mtime,ctime)</span><br><span class="line">  ------- 图形显示相关选项 ------</span><br><span class="line">  -i            不以阶梯状列出文件或目录名称</span><br><span class="line">  -A            使用ASNI绘图字符显示树状图而非以ASCII字符组合</span><br><span class="line">  -S            Print with CP437 (console) graphics indentation lines.</span><br><span class="line">  -n            不在文件和目录清单加上色彩</span><br><span class="line">  -C            在文件和目录清单加上色彩，便于区分各种类型。</span><br><span class="line">  ------- XML/HTML/JSON相关选项 -------</span><br><span class="line">  -X            以XML格式输出目录结构</span><br><span class="line">  -J            以Json格式输出目录结构</span><br><span class="line">  -H baseHREF   以HTML格式输出目录结构(baseHREF为top节点)</span><br><span class="line">  -T string     设置以HTML格式输出时的html标题和head标题</span><br><span class="line">  --nolinks     以HTML格式输出目录结构时,不显示超链接</span><br><span class="line">  ---- 其它杂项 ----</span><br><span class="line">  --version     输出版本并退出</span><br><span class="line">  --help        输出帮助文档并退出</span><br><span class="line">  --            Options processing terminator</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Celery 相关</title>
    <url>/article/b44/</url>
    <content><![CDATA[<ol>
<li><p>查看状态</p>
<p><code>celery -A origino_cloud:celery_app status</code></p>
</li>
<li><p>安装web实时监控</p>
<p><code>pip install flower</code></p>
<p><code>celery -A origino_cloud:celery_app flower</code></p>
<p><code>celery -A origino_cloud:celery_app flower --port=10304</code></p>
<p><code>celery flower --broker=redis://127.0.0.1:6379/6 --port=10304</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Celery</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows平台下以守护进程方式运行Celery</title>
    <url>/article/1d99/</url>
    <content><![CDATA[<h2><span id="介绍">介绍</span></h2><p>最近有个需求，需要在Windows环境部署一个Celery任务。为了让程序稳定运行，对外提供服务，需要以守护进程方式运行Celery任务。之前的项目都是运行在Linux环境，Celery任务也都是用Supervisor管理进程的，但是Supervisor不支持Windows环境，因此研究了Windows环境下以守护进程方式运行Celery的几种实现方案。</p>
<p>一番Google之后，了解到有以下4种方案:</p>
<ol>
<li><p>NSSM</p>
<p>NSSM是Windows环境下一款免安装的服务管理软件，它可以将应用封装成服务，使之像windows服务可以设置自动启动等。并且可以监控程序运行状态，程序异常中断后自动启动，实现守护进程的功能。不仅支持图形界面操作，也完全支持命令行设置。</p>
<p><strong>推荐，本文就采用的这种方案</strong></p>
<p><em>更多NSSM介绍及相关用法请参考<a href="/article/4689/">NSSM介绍</a></em></p>
</li>
<li><p>Forever</p>
<p>Forever 是一种简单的命令行界面工具，用于确保特定脚本持续(永久)运行。Forever 的简单界面使其成为运行 Node.js 应用程序和脚本的较小部署的理想选择。</p>
<p>经过一番折腾后，发现forever可以管理直接运行的Python脚本，但是运行celery worker时，无法设置复杂的参数。</p>
</li>
<li><p>Task Scheduler</p>
<p>Windows自带的计划任务，<a href="http://docs.celeryproject.org/en/3.1/tutorials/daemonizing.html" target="_blank" rel="noopener">celery 官网</a>有提到这种方案<a href="https://www.calazan.com/windows-tip-run-applications-in-the-background-using-task-scheduler/" target="_blank" rel="noopener">Windows Tip: Run applications in the background using Task Scheduler</a>，但是尝试未果。</p>
</li>
<li><p>自己写Python守护进程脚本</p>
<p>由于时间关系，此方案未尝试，有兴趣可以参考下面的文章。</p>
<p><a href="https://blog.csdn.net/ghostfromheaven/article/details/8604738" target="_blank" rel="noopener">Python 编写Windows服务程序：将Python作为Windows服务启动</a><br><a href="https://blog.csdn.net/taiyang1987912/article/details/44850999" target="_blank" rel="noopener">Python实例浅谈之五Python守护进程和脚本单例运行</a><br><a href="http://blog.orleven.com/2016/10/22/python-linux-daemon-windows-service/" target="_blank" rel="noopener">python 版的守护进程和Windows服务</a></p>
</li>
</ol>
<a id="more"></a>
<h2><span id="配置环境">配置环境</span></h2><blockquote>
<p><strong>操作系统</strong>:<br>Windows 10 企业版<br>Windows 7 旗舰版</p>
</blockquote>
<h4><span id="安装python352">安装Python3.5.2</span></h4><p>下载<a href="https://www.python.org/ftp/python/3.5.2/python-3.5.2-amd64.exe" target="_blank" rel="noopener">Python 3.5.2</a>并安装</p>
<h4><span id="安装nssm">安装NSSM</span></h4><p>下载<a href="https://nssm.cc/release/nssm-2.24.zip" target="_blank" rel="noopener">NSSM压缩包</a>并解压</p>
<h4><span id="安装windows-server-2003-resource-kit-tools">安装Windows Server 2003 Resource Kit Tools</span></h4><p><em>可选项，主要是想用<code>tail -f</code>命令</em></p>
<p>下载<a href="https://www.microsoft.com/en-us/download/details.aspx?id=17657" target="_blank" rel="noopener">Windows Server 2003 Resource Kit Tools</a> 并安装</p>
<h4><span id="安装git">安装Git</span></h4><p>可选项，下载<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git</a>并安装</p>
<h4><span id="安装redis服务">安装Redis服务</span></h4><p>可选项，下载<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">Redis</a>并安装</p>
<h4><span id="设置环境变量">设置环境变量</span></h4><p>依次进入<code>计算机</code>=&gt;<code>属性</code>=&gt;<code>高级系统设置</code>=&gt;<code>环境变量</code>，双击<code>Path</code>后，新建环境变量</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Program Files\Python35</span><br><span class="line">C:\Program Files\Python35\Scripts\</span><br><span class="line">D:\download\nssm-<span class="number">2.24</span>\nssm-<span class="number">2.24</span>\win64</span><br><span class="line">C:\Program Files (x86)\Windows Resource Kits\Tools</span><br><span class="line">C:\Program Files\Git\cmd</span><br></pre></td></tr></table></figure>
<p><em>以上路径仅供参考，以实际安装路径为准</em></p>
<h3><span id="搭建项目">搭建项目</span></h3><h4><span id="创建项目">创建项目</span></h4><p>clone <a href="https://github.com/Wayde2014/celery-windows-daemon-demo" target="_blank" rel="noopener">celery-windows-daemon-demo</a>项目</p>
<p><code>git clone https://github.com/Wayde2014/celery-windows-daemon-demo</code></p>
<h4><span id="安装python依赖包">安装Python依赖包</span></h4><p>以<strong>管理员身份</strong>运行cmd，切换至项目目录</p>
<p><code>pip install -r requirements.txt</code></p>
<p><strong>celery版本不能高于3.1.25，因为从4.0开始celery不再支持windows了</strong></p>
<h4><span id="测试脚本是否正常工作">测试脚本是否正常工作</span></h4><p>进入项目目录，执行<code>python run.py</code>，等待5s后如果输出<code>Test Success</code>测试OK。</p>
<p>通过<code>tail -f test.log</code>可实时查看日志内容。</p>
<h4><span id="创建celery-demo-worker服务并启动之">创建<code>celery-demo-worker</code>服务并启动之</span></h4><p><em>命令前后无`符号，此处是为了标示命令</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;`nssm install celery-demo-worker <span class="string">"c:\Program Files\Python35\Scripts\celery.exe"</span>`</span><br><span class="line">Service <span class="string">"celery-demo-worker"</span> installed successfully!</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;`nssm <span class="built_in">set</span> celery-demo-worker AppDirectory d:\celery-demo`</span><br><span class="line">Set parameter <span class="string">"AppDirectory"</span> <span class="keyword">for</span> service <span class="string">"celery-demo-worker"</span>.</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;`nssm <span class="built_in">set</span> celery-demo-worker AppParameters -A run worker --loglevel=debug -c 1`</span><br><span class="line">Set parameter <span class="string">"AppParameters"</span> <span class="keyword">for</span> service <span class="string">"celery-demo-worker"</span>.</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;`nssm start celery-demo-worker`</span><br><span class="line">celery-demo-worker: START: 操作成功完成。</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;`nssm status celery-demo-worker`</span><br><span class="line">SERVICE_RUNNING</span><br></pre></td></tr></table></figure>
<h4><span id="创建celery-demo-beat服务并启动之">创建<code>celery-demo-beat</code>服务并启动之</span></h4><p><em>命令前后无`符号，此处是为了标示命令</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;`nssm install celery-demo-beat <span class="string">"c:\Program Files\Python35\Scripts\celery.exe"</span>`</span><br><span class="line">Service <span class="string">"celery-demo-beat"</span> installed successfully!</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;`nssm <span class="built_in">set</span> celery-demo-beat AppDirectory d:\celery-demo`</span><br><span class="line">Set parameter <span class="string">"AppDirectory"</span> <span class="keyword">for</span> service <span class="string">"celery-demo-beat"</span>.</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;`nssm <span class="built_in">set</span> celery-demo-beat AppParameters -A run beat --loglevel=debug --config=run`</span><br><span class="line">Set parameter <span class="string">"AppParameters"</span> <span class="keyword">for</span> service <span class="string">"celery-demo-beat"</span>.</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;`nssm start celery-demo-beat`</span><br><span class="line">celery-demo-beat: START: 操作成功完成。</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;`nssm status celery-demo-beat`</span><br><span class="line">SERVICE_RUNNING</span><br></pre></td></tr></table></figure>
<p>至此，celery-demo搭建完成，可通过<code>tail -f test.log</code>查看日志，检查服务是否正常运行。</p>
]]></content>
      <categories>
        <category>Celery</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Python</tag>
        <tag>NSSM</tag>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask url唯一</title>
    <url>/article/49f3/</url>
    <content><![CDATA[<blockquote>
<p>Flask的URL规则是基于Werkzeug的路由模块。这个模块的思想是基于Apache以及更早的HTTP服务器的主张，希望保证优雅且唯一的URL</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/projects/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projects</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'project page'</span></span><br><span class="line"><span class="comment"># 上例中，访问结尾不带/的url会被重定向到带/的url</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/about')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'about page'</span></span><br><span class="line"><span class="comment"># 上例中，访问带/的url会产生404错误</span></span><br><span class="line"><span class="comment"># so box的nginx中会配置自动去掉url结尾斜杠</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask 钩子函数</title>
    <url>/article/cbcd/</url>
    <content><![CDATA[<h4><span id="before_first_request">before_first_request</span></h4><blockquote>
<p>顾名思义，注册一个在处理第一个请求之前运行的函数。</p>
</blockquote>
<h4><span id="before_request">before_request</span></h4><blockquote>
<p>注册一个在处理请求之前运行的函数。</p>
</blockquote>
<h4><span id="after_request">after_request</span></h4><blockquote>
<p>注册一个函数，如果没有未处理的异常抛出，在每次请求之后运行。</p>
</blockquote>
<h4><span id="teardown_request">teardown_request</span></h4><blockquote>
<p>注册一个函数，即使有未处理的异常抛出，也在每次请求之后运行。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request</span><span class="params">()</span>:</span></span><br><span class="line">    logging.info(<span class="string">'开始处理第一个请求'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">()</span>:</span></span><br><span class="line">    logging.info(<span class="string">'开始处理一个新的请求'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(response)</span>:</span></span><br><span class="line">    logging.info(<span class="string">'一个请求处理成功'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_request</span><span class="params">(response)</span>:</span></span><br><span class="line">    logging.info(<span class="string">'一个请求处理结束'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 常用命令(类比Linux)</title>
    <url>/article/958d/</url>
    <content><![CDATA[<h3><span id="windows命令与linux命令的差异">Windows命令与Linux命令的差异</span></h3><p>Windows大部分命令都<strong>不区分</strong>大小写，Linux命令<strong>区分</strong>大小写。</p>
<p>Windows下斜杠”/“表示参数(如<code>cmd /?</code>)，反斜杠”\”表示本地路径(如<code>c:\Users\wayde\Desktop)</code>。</p>
<p>Linux下斜杠”/“表示路径，反斜杠”\”表示转义。</p>
<p><em>注: 由于网络使用Unix标准，所以网络路径都是用斜杠“/”</em></p>
<a id="more"></a>
<h3><span id="目录部分">目录部分</span></h3><h4><span id="cd-chdir-命令">cd / chdir 命令</span></h4><p><code>cd/chdir</code>命令用于切换当前目录或显示当前目录名。</p>
<p><em>linux下目录切换也是<code>cd</code></em></p>
<p>例如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前目录</span></span><br><span class="line">C:\Users\wayde&gt;`<span class="built_in">cd</span>`</span><br><span class="line">C:\Users\wayde</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前驱动器切换目录</span></span><br><span class="line">C:\Users\wayde&gt;`<span class="built_in">cd</span> Desktop`</span><br><span class="line">C:\Users\wayde\Desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换当前驱动器</span></span><br><span class="line">c:\Users\wayde\Desktop&gt;`d:`</span><br><span class="line">d:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定驱动器的某个目录</span></span><br><span class="line">D:\&gt;`<span class="built_in">cd</span> /d c:\Users\wayde\Desktop`</span><br><span class="line">c:\Users\wayde\Desktop&gt;</span><br></pre></td></tr></table></figure>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CHDIR [/D] [drive:][path]</span><br><span class="line">CHDIR [..]</span><br><span class="line">CD [/D] [drive:][path]</span><br><span class="line">CD [..]</span><br><span class="line"></span><br><span class="line">  ..   指定要改成父目录。</span><br><span class="line"></span><br><span class="line">键入 CD drive: 显示指定驱动器中的当前目录。</span><br><span class="line">不带参数只键入 CD，则显示当前驱动器和目录。</span><br><span class="line"></span><br><span class="line">使用 /D 开关，除了改变驱动器的当前目录之外，</span><br><span class="line">还可改变当前驱动器。</span><br><span class="line"></span><br><span class="line">如果命令扩展被启用，CHDIR 会如下改变:</span><br><span class="line"></span><br><span class="line">当前的目录字符串会被转换成使用磁盘名上的大小写。所以，</span><br><span class="line">如果磁盘上的大小写如此，CD C:\TEMP 会将当前目录设为</span><br><span class="line">C:\Temp。</span><br><span class="line"></span><br><span class="line">CHDIR 命令不把空格当作分隔符，因此有可能将目录名改为一个</span><br><span class="line">带有空格但不带有引号的子目录名。例如:</span><br><span class="line"></span><br><span class="line">     <span class="built_in">cd</span> \winnt\profiles\username\programs\start menu</span><br><span class="line"></span><br><span class="line">与下列相同:</span><br><span class="line"></span><br><span class="line">     <span class="built_in">cd</span> <span class="string">"\winnt\profiles\username\programs\start menu"</span></span><br><span class="line"></span><br><span class="line">在扩展停用的情况下，你必须键入以上命令。</span><br></pre></td></tr></table></figure>
<h4><span id="tree-命令">tree 命令</span></h4><p><code>tree</code>命令用来显示驱动器或文件夹的树形结构。</p>
<p><em>linux下显示树形结构文件也是<code>tree</code></em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TREE [drive:][path] [/F] [/A]</span><br><span class="line"></span><br><span class="line">   /F   显示每个文件夹中文件的名称。</span><br><span class="line">   /A   使用 ASCII 字符，而不使用扩展字符。</span><br></pre></td></tr></table></figure>
<h4><span id="dir-命令">dir 命令</span></h4><p><code>dir</code>命令用来显示目录中文件和子目录列表。</p>
<p><em>linux下查看目录文件列表用<code>ls</code></em></p>
<p>例如:</p>
<ul>
<li>显示当前目录文件以文件大小升序排列<br><code>dir /os</code></li>
<li>显示当前目录且文件时间为创建时间<br><code>dir /tc</code></li>
</ul>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DIR [drive:][path][filename] [/A[[:]attributes]] [/B] [/C] [/D] [/L] [/N]</span><br><span class="line">  [/O[[:]sortorder]] [/P] [/Q] [/R] [/S] [/T[[:]timefield]] [/W] [/X] [/4]</span><br><span class="line"></span><br><span class="line">  [drive:][path][filename]</span><br><span class="line">              指定要列出的驱动器、目录和/或文件。</span><br><span class="line"></span><br><span class="line">  /A          显示具有指定属性的文件。</span><br><span class="line">  属性         D  目录                R  只读文件</span><br><span class="line">               H  隐藏文件            A  准备存档的文件</span><br><span class="line">               S  系统文件            I  无内容索引文件</span><br><span class="line">               L  解析点             -  表示“否”的前缀</span><br><span class="line">  /B          使用空格式(没有标题信息或摘要)。</span><br><span class="line">  /C          在文件大小中显示千位数分隔符。这是默认值。用 /-C 来</span><br><span class="line">              禁用分隔符显示。</span><br><span class="line">  /D          跟宽式相同，但文件是按栏分类列出的。</span><br><span class="line">  /L          用小写。</span><br><span class="line">  /N          新的长列表格式，其中文件名在最右边。</span><br><span class="line">  /O          用分类顺序列出文件。</span><br><span class="line">  排列顺序     N  按名称(字母顺序)     S  按大小(从小到大)</span><br><span class="line">               E  按扩展名(字母顺序)   D  按日期/时间(从先到后)</span><br><span class="line">               G  组目录优先           -  反转顺序的前缀</span><br><span class="line">  /P          在每个信息屏幕后暂停。</span><br><span class="line">  /Q          显示文件所有者。</span><br><span class="line">  /R          显示文件的备用数据流。</span><br><span class="line">  /S          显示指定目录和所有子目录中的文件。</span><br><span class="line">  /T          控制显示或用来分类的时间字符域。</span><br><span class="line">  时间段      C  创建时间</span><br><span class="line">              A  上次访问时间</span><br><span class="line">              W  上次写入的时间</span><br><span class="line">  /W          用宽列表格式。</span><br><span class="line">  /X          显示为非 8.3 文件名产生的短名称。格式是 /N 的格式，</span><br><span class="line">              短名称插在长名称前面。如果没有短名称，在其位置则</span><br><span class="line">              显示空白。</span><br><span class="line">  /4          用四位数字显示年</span><br><span class="line"></span><br><span class="line">可以在 DIRCMD 环境变量中预先设定开关。通过添加前缀 - (破折号)</span><br><span class="line">来替代预先设定的开关。例如，/-W。</span><br></pre></td></tr></table></figure>
<h3><span id="文件部分">文件部分</span></h3><h4><span id="md-mkdir-命令">md / mkdir 命令</span></h4><p><code>md/mkdir</code>命令用来新建文件夹。</p>
<p><em>linux下新建文件夹也是<code>mkdir</code></em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建目录。</span><br><span class="line"></span><br><span class="line">MKDIR [drive:]path</span><br><span class="line">MD [drive:]path</span><br><span class="line"></span><br><span class="line">如果命令扩展被启用，MKDIR 会如下改变:</span><br><span class="line"></span><br><span class="line">如果需要，MKDIR 会在路径中创建中级目录。例如: 假设 \a 不</span><br><span class="line">存在，那么:</span><br><span class="line"></span><br><span class="line">    mkdir \a\b\c\d</span><br><span class="line"></span><br><span class="line">与:</span><br><span class="line"></span><br><span class="line">    mkdir \a</span><br><span class="line">    <span class="built_in">chdir</span> \a</span><br><span class="line">    mkdir b</span><br><span class="line">    <span class="built_in">chdir</span> b</span><br><span class="line">    mkdir c</span><br><span class="line">    <span class="built_in">chdir</span> c</span><br><span class="line">    mkdir d</span><br><span class="line"></span><br><span class="line">相同。如果扩展被停用，则需要键入 mkdir \a\b\c\d。</span><br></pre></td></tr></table></figure>
<h4><span id="move-命令">move 命令</span></h4><p><code>move</code>命令用来移动或者重命名文件和目录。</p>
<p><em>linux下移动或重命名文件用<code>mv</code></em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 要移动至少一个文件:</span></span><br><span class="line">MOVE [/Y | /-Y] [drive:][path]filename1[,...] destination</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要重命名一个目录:</span></span><br><span class="line">MOVE [/Y | /-Y] [drive:][path]dirname1 dirname2</span><br><span class="line"></span><br><span class="line">  [drive:][path]filename1 指定你想移动的文件位置和名称。</span><br><span class="line">  destination             指定文件的新位置。目标可包含一个驱动器号</span><br><span class="line">                          和冒号、一个目录名或组合。如果只移动一个文件</span><br><span class="line">                          并在移动时将其重命名，你还可以包括文件名。</span><br><span class="line">  [drive:][path]dirname1  指定要重命名的目录。</span><br><span class="line">  dirname2                指定目录的新名称。</span><br><span class="line"></span><br><span class="line">  /Y                      取消确认覆盖一个现有目标文件的提示。</span><br><span class="line">  /-Y                     对确认覆盖一个现有目标文件发出提示。</span><br><span class="line"></span><br><span class="line">命令行开关 /Y 可以出现在 COPYCMD 环境变量中。这可以用命令行上</span><br><span class="line">的 /-Y 替代。默认值是，除非 MOVE 命令是从一个批脚本内</span><br><span class="line">执行的，覆盖时都发出提示。</span><br></pre></td></tr></table></figure>
<h4><span id="copy-命令">copy 命令</span></h4><p><code>copy</code>命令用来将一份或多份文件复制到另一个位置。</p>
<p><em>linux下复制文件是<code>cp</code>和<code>dd</code></em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">COPY [/D] [/V] [/N] [/Y | /-Y] [/Z] [/L] [/A | /B ] <span class="built_in">source</span> [/A | /B]</span><br><span class="line">     [+ <span class="built_in">source</span> [/A | /B] [+ ...]] [destination [/A | /B]]</span><br><span class="line"></span><br><span class="line">  <span class="built_in">source</span>       指定要复制的文件。</span><br><span class="line">  /A           表示一个 ASCII 文本文件。</span><br><span class="line">  /B           表示一个二进位文件。</span><br><span class="line">  /D           允许解密要创建的目标文件</span><br><span class="line">  destination  为新文件指定目录和/或文件名。</span><br><span class="line">  /V           验证新文件写入是否正确。</span><br><span class="line">  /N           复制带有非 8dot3 名称的文件时，</span><br><span class="line">               尽可能使用短文件名。</span><br><span class="line">  /Y           不使用确认是否要覆盖现有目标文件</span><br><span class="line">               的提示。</span><br><span class="line">  /-Y          使用确认是否要覆盖现有目标文件</span><br><span class="line">               的提示。</span><br><span class="line">  /Z           用可重新启动模式复制已联网的文件。</span><br><span class="line">/L           如果源是符号链接，请将链接复制</span><br><span class="line">               到目标而不是源链接指向的实际文件。</span><br><span class="line"></span><br><span class="line">命令行开关 /Y 可以在 COPYCMD 环境变量中预先设定。</span><br><span class="line">这可能会被命令行上的 /-Y 替代。除非 COPY</span><br><span class="line">命令是在一个批处理脚本中执行的，默认值应为</span><br><span class="line">在覆盖时进行提示。</span><br><span class="line"></span><br><span class="line">要附加文件，请为目标指定一个文件，为源指定</span><br><span class="line">数个文件(用通配符或 file1+file2+file3 格式)。</span><br></pre></td></tr></table></figure>
<h4><span id="xcopy-命令">xcopy 命令</span></h4><p><code>xcopy</code>命令用来复制文件和目录树。</p>
<p><code>xcopy</code>命令与<code>copy</code>命令类似，但也有区别:</p>
<ul>
<li><code>copy</code>不能在有子目录存在的文件中拷贝文件的同时重命名此文件名</li>
<li><code>copy</code>命令能合并两个文件，而<code>xcopy</code>不能</li>
</ul>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XCOPY <span class="built_in">source</span> [destination] [/A | /M] [/D[:date]] [/P] [/S [/E]] [/V] [/W]</span><br><span class="line">                           [/C] [/I] [/Q] [/F] [/L] [/G] [/H] [/R] [/T] [/U]</span><br><span class="line">                           [/K] [/N] [/O] [/X] [/Y] [/-Y] [/Z] [/B]</span><br><span class="line">                           [/EXCLUDE:file1[+file2][+file3]...]</span><br><span class="line"></span><br><span class="line">  <span class="built_in">source</span>       指定要复制的文件。</span><br><span class="line">  destination  指定新文件的位置和/或名称。</span><br><span class="line">  /A           仅复制有存档属性集的文件，但不更改属性。</span><br><span class="line">  /M           仅复制有存档属性集的文件，并关闭存档属性。</span><br><span class="line">  /D:m<span class="_">-d</span>-y     复制在指定日期或指定日期以后更改的文件。</span><br><span class="line">               如果没有提供日期，只复制那些源时间比目标时间新的文件。</span><br><span class="line">  /EXCLUDE:file1[+file2][+file3]...</span><br><span class="line">               指定含有字符串的文件列表。每个字符串在文件中应位于单独的一行。</span><br><span class="line">               如果任何字符串与复制文件的绝对路径的任何部分相符，则排除复制</span><br><span class="line">               该文件。例如，指定如 \obj\ 或 .obj 的字符串会分别排除目录</span><br><span class="line">               obj 下面的所有文件或带有 .obj 扩展名的所有文件。</span><br><span class="line">  /P           创建每个目标文件之前提示您。</span><br><span class="line">  /S           复制目录和子目录，不包括空目录。</span><br><span class="line">  /E           复制目录和子目录，包括空目录。与 /S /E 相同。可以用来修改 /T。</span><br><span class="line">  /V           验证每个新文件的大小。</span><br><span class="line">  /W           提示您在复制前按键。</span><br><span class="line">  /C           即使有错误，也继续复制。</span><br><span class="line">  /I           如果目标不存在，且要复制多个文件，则假定目标必须是目录。</span><br><span class="line">  /Q           复制时不显示文件名。</span><br><span class="line">  /F           复制时显示完整的源文件名和目标文件名。</span><br><span class="line">  /L           显示要复制的文件。</span><br><span class="line">  /G           允许将加密文件复制到不支持加密的目标。</span><br><span class="line">  /H           也复制隐藏文件和系统文件。</span><br><span class="line">  /R           覆盖只读文件。</span><br><span class="line">  /T           创建目录结构，但不复制文件。不包括空目录或子目录。/T /E 包括</span><br><span class="line">               空目录和子目录。</span><br><span class="line">  /U           只复制已经存在于目标中的文件。</span><br><span class="line">  /K           复制属性。一般的 Xcopy 会重设只读属性。</span><br><span class="line">  /N           用生成的短名称复制。</span><br><span class="line">  /O           复制文件所有权和 ACL 信息。</span><br><span class="line">  /X           复制文件审核设置(隐含 /O)。</span><br><span class="line">  /Y           取消提示以确认要覆盖现有目标文件。</span><br><span class="line">  /-Y          要提示以确认要覆盖现有目标文件。</span><br><span class="line">  /Z           在可重新启动模式下复制网络文件。</span><br><span class="line">  /B           复制符号链接本身与链接目标相对。</span><br><span class="line">  /J           复制时不使用缓冲的 I/O。推荐复制大文件时使用。</span><br><span class="line"></span><br><span class="line">开关 /Y 可以预先在 COPYCMD 环境变量中设置。</span><br><span class="line">这可能被命令行上的 /-Y 覆盖。</span><br></pre></td></tr></table></figure>
<h4><span id="ren-rename-命令">ren / rename 命令</span></h4><p><code>ren/rename</code>命令用来重命名文件。</p>
<p><em>linux下没有专门的重命名文件命令，<code>mv</code>既可移动也可重命名文件</em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RENAME [drive:][path]filename1 filename2.</span><br><span class="line">REN [drive:][path]filename1 filename2.</span><br><span class="line"></span><br><span class="line">请注意，您不能为目标文件指定新的驱动器或路径。</span><br></pre></td></tr></table></figure>
<h4><span id="type-命令">type 命令</span></h4><p><code>type</code>命令用来显示文本文件的内容。</p>
<p><em>linux下显示文本文件内容有<code>cat</code>和<code>tac</code></em></p>
<p><strong>windows下没有创建文件的命令，可用<code>type nul &gt; filename</code>创建空文件</strong></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TYPE [drive:][path]filename</span><br></pre></td></tr></table></figure>
<h4><span id="find-命令">find 命令</span></h4><p><code>find</code>命令用来在文件中搜索字符串。</p>
<p><em>linux下类似命令有<code>grep</code></em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FIND [/V] [/C] [/N] [/I] [/OFF[LINE]] <span class="string">"string"</span> [[drive:][path]filename[ ...]]</span><br><span class="line"></span><br><span class="line">  /V         显示所有未包含指定字符串的行。</span><br><span class="line">  /C         仅显示包含字符串的行数。</span><br><span class="line">  /N         显示行号。</span><br><span class="line">  /I         搜索字符串时忽略大小写。</span><br><span class="line">  /OFF[LINE] 不要跳过具有脱机属性集的文件。</span><br><span class="line">  <span class="string">"string"</span> 指定要搜索的文本字符串。</span><br><span class="line">  [drive:][path]filename</span><br><span class="line">             指定要搜索的文件。</span><br><span class="line"></span><br><span class="line">如果没有指定路径，FIND 将搜索在提示符处键入</span><br><span class="line">的文本或者由另一命令产生的文本。</span><br></pre></td></tr></table></figure>
<h4><span id="findstr-命令">findstr 命令</span></h4><p><code>findstr</code>命令用来在文件中寻找字符串。</p>
<p><code>findstr</code>是<code>find</code>的增强版，支持正则表达式，而<code>find</code>不支持正则。</p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FINDSTR [/B] [/E] [/L] [/R] [/S] [/I] [/X] [/V] [/N] [/M] [/O] [/P] [/F:file]</span><br><span class="line">        [/C:string] [/G:file] [/D:dir list] [/A:color attributes] [/OFF[LINE]]</span><br><span class="line">        strings [[drive:][path]filename[ ...]]</span><br><span class="line"></span><br><span class="line">  /B         在一行的开始配对模式。</span><br><span class="line">  /E         在一行的结尾配对模式。</span><br><span class="line">  /L         按字使用搜索字符串。</span><br><span class="line">  /R         将搜索字符串作为一般表达式使用。</span><br><span class="line">  /S         在当前目录和所有子目录中搜索匹配文件。</span><br><span class="line">  /I         指定搜索不分大小写。</span><br><span class="line">  /X         打印完全匹配的行。</span><br><span class="line">  /V         只打印不包含匹配的行。</span><br><span class="line">  /N         在匹配的每行前打印行数。</span><br><span class="line">  /M         如果文件含有匹配项，只打印其文件名。</span><br><span class="line">  /O         在每个匹配行前打印字符偏移量。</span><br><span class="line">  /P         忽略有不可打印字符的文件。</span><br><span class="line">  /OFF[LINE] 不跳过带有脱机属性集的文件。</span><br><span class="line">  /A:attr    指定有十六进位数字的颜色属性。请见 <span class="string">"color /?"</span></span><br><span class="line">  /F:file    从指定文件读文件列表 (/ 代表控制台)。</span><br><span class="line">  /C:string  使用指定字符串作为文字搜索字符串。</span><br><span class="line">  /G:file    从指定的文件获得搜索字符串。 (/ 代表控制台)。</span><br><span class="line">  /D:dir     查找以分号为分隔符的目录列表</span><br><span class="line">  strings    要查找的文字。</span><br><span class="line">  [drive:][path]filename</span><br><span class="line">             指定要查找的文件。</span><br><span class="line"></span><br><span class="line">除非参数有 /C 前缀，请使用空格隔开搜索字符串。</span><br><span class="line">例如: <span class="string">'FINDSTR "hello there" x.y'</span> 在文件 x.y 中寻找 <span class="string">"hello"</span> 或</span><br><span class="line"><span class="string">"there"</span>。<span class="string">'FINDSTR /C:"hello there" x.y'</span> 文件 x.y  寻找</span><br><span class="line"><span class="string">"hello there"</span>。</span><br><span class="line"></span><br><span class="line">一般表达式的快速参考:</span><br><span class="line">  .        通配符: 任何字符</span><br><span class="line">  *        重复: 以前字符或类出现零或零以上次数</span><br><span class="line">  ^        行位置: 行的开始</span><br><span class="line">  $        行位置: 行的终点</span><br><span class="line">  [class]  字符类: 任何在字符集中的字符</span><br><span class="line">  [^class] 补字符类: 任何不在字符集中的字符</span><br><span class="line">  [x-y]    范围: 在指定范围内的任何字符</span><br><span class="line">  \x       Escape: 元字符 x 的文字用法</span><br><span class="line">  \&lt;xyz    字位置: 字的开始</span><br><span class="line">  xyz\&gt;    字位置: 字的结束</span><br><span class="line"></span><br><span class="line">有关 FINDSTR 常见表达法的详细情况，请见联机命令参考。</span><br></pre></td></tr></table></figure>
<h4><span id="more-命令">more 命令</span></h4><p><code>more</code>命令用来逐屏显示输出。</p>
<p><em>linux下逐屏输出有<code>more</code>和<code>less</code></em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MORE [/E [/C] [/P] [/S] [/Tn] [+n]] &lt; [drive:][path]filename</span><br><span class="line"><span class="built_in">command</span>-name | MORE [/E [/C] [/P] [/S] [/Tn] [+n]]</span><br><span class="line">MORE /E [/C] [/P] [/S] [/Tn] [+n] [files]</span><br><span class="line"></span><br><span class="line">    [drive:][path]filename  指定要逐屏显示的文件。</span><br><span class="line"></span><br><span class="line">    <span class="built_in">command</span>-name            指定要显示其输出的命令。</span><br><span class="line"></span><br><span class="line">    /E      启用扩展功能</span><br><span class="line">    /C      显示页面前先清除屏幕</span><br><span class="line">    /P      扩展 FormFeed 字符</span><br><span class="line">    /S      将多个空白行缩成一行</span><br><span class="line">    /Tn     将制表符扩展为 n 个空格(默认值为 8)</span><br><span class="line"></span><br><span class="line">            开关可以出现在 MORE 环境变量中。</span><br><span class="line">    +n      从第 n 行开始显示第一个文件</span><br><span class="line"></span><br><span class="line">    files   要显示的文件列表。使用空格分隔列表中的文件。</span><br><span class="line">            如果已启用扩展功能，则在 -- More -- 提示处 接受下列命令:</span><br><span class="line">    P n 显示下 n 行</span><br><span class="line">    S n 跳过下 n 行</span><br><span class="line">    F 显示下个文件</span><br><span class="line">    Q 退出</span><br><span class="line">    = 显示行号</span><br><span class="line">    ? 显示帮助行</span><br><span class="line">    &lt;space&gt; 显示下一页</span><br><span class="line">    &lt;ret&gt; 显示下一行</span><br></pre></td></tr></table></figure>
<h4><span id="rd-rmdir-命令">rd / rmdir 命令</span></h4><p><code>rd/rmdir</code>命令用来删除文件夹。</p>
<p><em>linux下删除文件或文件夹用<code>rm</code>命令</em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RMDIR [/S] [/Q] [drive:]path</span><br><span class="line">RD [/S] [/Q] [drive:]path</span><br><span class="line"></span><br><span class="line">    /S      除目录本身外，还将删除指定目录下的所有子目录和</span><br><span class="line">            文件。用于删除目录树。</span><br><span class="line"></span><br><span class="line">    /Q      安静模式，带 /S 删除目录树时不要求确认</span><br></pre></td></tr></table></figure>
<h4><span id="where-命令">where 命令</span></h4><p><code>where</code>命令用来搜索文件及命令。</p>
<p><em>linux下搜索文件用<code>find</code>，搜索命令用<code>whereis</code>和<code>which</code></em></p>
<p>例如:</p>
<ul>
<li>查找python程序所在路径<br><code>where python</code></li>
<li>在d盘搜索以celery开头的文件<br><code>where /r d: celery*</code></li>
</ul>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WHERE [/R dir] [/Q] [/F] [/T] pattern...</span><br><span class="line"></span><br><span class="line">描述:</span><br><span class="line">    显示符合搜索模式的文件位置。在默认情况下，搜索是在当前目录和 PATH</span><br><span class="line">    环境变量指定的路径中执行的。</span><br><span class="line"></span><br><span class="line">参数列表:</span><br><span class="line">    /R       从指定目录开始，递归性搜索并显示符合指定模式的文件。</span><br><span class="line"></span><br><span class="line">    /Q       只返回退出代码，不显示匹配文件列表。(安静模式)</span><br><span class="line"></span><br><span class="line">             匹配文件。(安静模式)</span><br><span class="line"></span><br><span class="line">    /F       显示所有相配文件并用双引号括上。</span><br><span class="line"></span><br><span class="line">    /T       显示所有相配文件的文件的文件。</span><br><span class="line"></span><br><span class="line">    pattern  指定要匹配的文件的搜索模式。通配符 * 和 ? 可以用在模式中。</span><br><span class="line">             也可以指定 <span class="string">"<span class="variable">$env</span>:pattern"</span> 和 <span class="string">"path:pattern"</span> 格式; 其中</span><br><span class="line">             <span class="string">"env"</span> 是环境变量，搜索是在 <span class="string">"env"</span> 变量的指定的路径中执行的。</span><br><span class="line">             这些格式不应该跟 /R 一起使用。此搜索也可以用将 PATHEXT 变</span><br><span class="line">             量扩展名附加于此模式的方式完成。</span><br><span class="line"></span><br><span class="line">     /?      显示此帮助消息。</span><br><span class="line"></span><br><span class="line">  注意: 如果搜索成功，此工具返回错误级别 0; 如果不成功，返回 1; 如果失</span><br><span class="line">        败或发生错误，返回 2。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">    WHERE /?</span><br><span class="line">    WHERE myfilename1 myfile????.*</span><br><span class="line">    WHERE <span class="variable">$windir</span>:*.*</span><br><span class="line">    WHERE /R c:\windows *.exe *.dll *.bat</span><br><span class="line">    WHERE /Q ??.???</span><br><span class="line">    WHERE <span class="string">"c:\windows;c:\windows\system32:*.dll"</span></span><br><span class="line">    WHERE /F /T *.dll</span><br></pre></td></tr></table></figure>
<h4><span id="del-命令">del 命令</span></h4><p><code>del</code>命令用来删除一个或数个文件。</p>
<p><em>linux下删除文件或文件夹用<code>rm</code>命令</em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEL [/P] [/F] [/S] [/Q] [/A[[:]attributes]] names</span><br><span class="line">ERASE [/P] [/F] [/S] [/Q] [/A[[:]attributes]] names</span><br><span class="line"></span><br><span class="line">  names         指定一个或多个文件或者目录列表。</span><br><span class="line">                通配符可用来删除多个文件。</span><br><span class="line">                如果指定了一个目录，该目录中的所</span><br><span class="line">                有文件都会被删除。</span><br><span class="line"></span><br><span class="line">  /P            删除每一个文件之前提示确认。</span><br><span class="line">  /F            强制删除只读文件。</span><br><span class="line">  /S            删除所有子目录中的指定的文件。</span><br><span class="line">  /Q            安静模式。删除全局通配符时，不要求确认</span><br><span class="line">  /A            根据属性选择要删除的文件</span><br><span class="line">  属性          R  只读文件                     S  系统文件</span><br><span class="line">                H  隐藏文件                     A  存档文件</span><br><span class="line">                I  无内容索引文件               L  重分析点</span><br><span class="line">                -  表示“否”的前缀</span><br><span class="line"></span><br><span class="line">如果命令扩展被启用，DEL 和 ERASE 更改如下:</span><br><span class="line"></span><br><span class="line">/S 开关的显示句法会颠倒，即只显示已经</span><br><span class="line">删除的文件，而不显示找不到的文件。</span><br></pre></td></tr></table></figure>
<h4><span id="fc-命令">fc 命令</span></h4><p><code>fc</code>命令用来比较两个文件或两个文件集并显示它们之间的不同。</p>
<p><em>linux下比较文件差异有<code>diff</code>和<code>compare</code></em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FC [/A] [/C] [/L] [/LBn] [/N] [/OFF[LINE]] [/T] [/U] [/W] [/nnnn]</span><br><span class="line">   [drive1:][path1]filename1 [drive2:][path2]filename2</span><br><span class="line">FC /B [drive1:][path1]filename1 [drive2:][path2]filename2</span><br><span class="line"></span><br><span class="line">  /A         只显示每个不同处的第一行和最后一行。</span><br><span class="line">  /B         执行二进制比较。</span><br><span class="line">  /C         不分大小写。</span><br><span class="line">  /L         将文件作为 ASCII 文字比较。</span><br><span class="line">  /LBn       将连续不匹配的最大值设置为指定</span><br><span class="line">             的行数。</span><br><span class="line">  /N         在 ASCII 比较上显示行数。</span><br><span class="line">  /OFF[LINE] 不要跳过带有脱机属性集的文件。</span><br><span class="line">  /T         不要将制表符扩充到空格。</span><br><span class="line">  /U         将文件作为 UNICODE 文本文件比较。</span><br><span class="line">  /W         为了比较而压缩空白(制表符和空格)。</span><br><span class="line">  /nnnn      指定不匹配处后必须连续</span><br><span class="line">             匹配的行数。</span><br><span class="line">  [drive1:][path1]filename1</span><br><span class="line">             指定要比较的第一个文件或第一个文件集。</span><br><span class="line">  [drive2:][path2]filename2</span><br><span class="line">             指定要比较的第二个文件或第二个文件集。</span><br></pre></td></tr></table></figure>
<h4><span id="comp-命令">comp 命令</span></h4><p><code>comp</code>命令用来比较两个文件或两个文件集的内容。</p>
<p><em>linux下比较文件差异有<code>diff</code>和<code>compare</code></em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">COMP [data1] [data2] [/D] [/A] [/L] [/N=number] [/C] [/OFF[LINE]]</span><br><span class="line"></span><br><span class="line">  data1      指定要比较的第一个文件的位置和名称。</span><br><span class="line">  data2      指定要比较的第二个文件的位置和名称。</span><br><span class="line">  /D         以十进制格式显示差异。</span><br><span class="line">  /A         以 ASCII 字符显示差异。</span><br><span class="line">  /L         显示不同的行数。</span><br><span class="line">  /N=number  只比较每个文件中第一个指定的行数。</span><br><span class="line">  /C         比较文件时 ASCII 字母不区分大小写。</span><br><span class="line">  /OFF[LINE] 不要跳过带有脱机属性集的文件。</span><br><span class="line"></span><br><span class="line">要比较文件集，请在 data1 和 data2 参数中使用通配符。</span><br></pre></td></tr></table></figure>
<h3><span id="网络部分">网络部分</span></h3><h4><span id="netstat-命令">netstat 命令</span></h4><p><code>netstat</code>命令用来显示协议统计信息和当前 TCP/IP 网络连接。</p>
<p><em>linux下也有netstat命令，参数稍有不同，如显示tcp连接<code>netstat -t</code>，而windows下是<code>netstat -p tcp</code></em></p>
<p>例如: </p>
<ul>
<li>显示当前所有网络连接端口及关联进程id用<br><code>nestat -ano</code></li>
<li>显示当前tcp连接<br><code>netstat -anop tcp</code></li>
<li>显示当前udp连接<br><code>netstat -anop udp</code></li>
<li>查找具体端口<br><code>netstat -ano | findstr &quot;&lt;port&gt;&quot;</code></li>
</ul>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-x] [-t] [interval]</span><br><span class="line"></span><br><span class="line">  -a            显示所有连接和侦听端口。</span><br><span class="line">  -b            显示在创建每个连接或侦听端口时涉及的</span><br><span class="line">                可执行程序。在某些情况下，已知可执行程序承载</span><br><span class="line">                多个独立的组件，这些情况下，</span><br><span class="line">                显示创建连接或侦听端口时</span><br><span class="line">                涉及的组件序列。在此情况下，可执行程序的</span><br><span class="line">                名称位于底部 [] 中，它调用的组件位于顶部，</span><br><span class="line">                直至达到 TCP/IP。注意，此选项</span><br><span class="line">                可能很耗时，并且在你没有足够</span><br><span class="line">                权限时可能失败。</span><br><span class="line">  -e            显示以太网统计信息。此选项可以与 -s 选项</span><br><span class="line">                结合使用。</span><br><span class="line">  -f            显示外部地址的完全限定</span><br><span class="line">                域名(FQDN)。</span><br><span class="line">  -n            以数字形式显示地址和端口号。</span><br><span class="line">  -o            显示拥有的与每个连接关联的进程 ID。</span><br><span class="line">  -p proto      显示 proto 指定的协议的连接；proto</span><br><span class="line">                可以是下列任何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s</span><br><span class="line">                选项一起用来显示每个协议的统计信息，proto 可以是下列任何一个:</span><br><span class="line">                IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6。</span><br><span class="line">  -q            显示所有连接、侦听端口和绑定的</span><br><span class="line">                非侦听 TCP 端口。绑定的非侦听端口</span><br><span class="line">                 不一定与活动连接相关联。</span><br><span class="line">  -r            显示路由表。</span><br><span class="line">  -s            显示每个协议的统计信息。默认情况下，</span><br><span class="line">                显示 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 的统计信息;</span><br><span class="line">                -p 选项可用于指定默认的子网。</span><br><span class="line">  -t            显示当前连接卸载状态。</span><br><span class="line">  -x            显示 NetworkDirect 连接、侦听器和共享</span><br><span class="line">                终结点。</span><br><span class="line">  -y            显示所有连接的 TCP 连接模板。</span><br><span class="line">                无法与其他选项结合使用。</span><br><span class="line">  interval      重新显示选定的统计信息，各个显示间暂停的</span><br><span class="line">                间隔秒数。按 CTRL+C 停止重新显示</span><br><span class="line">                统计信息。如果省略，则 netstat 将打印当前的</span><br><span class="line">                配置信息一次。</span><br></pre></td></tr></table></figure>
<h4><span id="ping-命令">ping 命令</span></h4><p><code>ping</code>命令用来用来测试数据包能否通过IP协议到达特定主机。</p>
<p><em>linux下也有ping命令，参数稍有不同，如持续ping某个主机<code>ping blog.pandll.com</code>，而windows下是<code>ping -t blog.pandll.com</code></em></p>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用法: ping [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS]</span><br><span class="line">            [-r count] [-s count] [[-j host-list] | [-k host-list]]</span><br><span class="line">            [-w timeout] [-R] [-S srcaddr] [-c compartment] [-p]</span><br><span class="line">            [-4] [-6] target_name</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line">    -t             Ping 指定的主机，直到停止。</span><br><span class="line">                   若要查看统计信息并继续操作，请键入 Ctrl+Break；</span><br><span class="line">                   若要停止，请键入 Ctrl+C。</span><br><span class="line">    -a             将地址解析为主机名。</span><br><span class="line">    -n count       要发送的回显请求数。</span><br><span class="line">    -l size        发送缓冲区大小。</span><br><span class="line">    -f             在数据包中设置“不分段”标记(仅适用于 IPv4)。</span><br><span class="line">    -i TTL         生存时间。</span><br><span class="line">    -v TOS         服务类型(仅适用于 IPv4。该设置已被弃用，</span><br><span class="line">                   对 IP 标头中的服务类型字段没有任何</span><br><span class="line">                   影响)。</span><br><span class="line">    -r count       记录计数跃点的路由(仅适用于 IPv4)。</span><br><span class="line">    -s count       计数跃点的时间戳(仅适用于 IPv4)。</span><br><span class="line">    -j host-list   与主机列表一起使用的松散源路由(仅适用于 IPv4)。</span><br><span class="line">    -k host-list    与主机列表一起使用的严格源路由(仅适用于 IPv4)。</span><br><span class="line">    -w timeout     等待每次回复的超时时间(毫秒)。</span><br><span class="line">    -R             同样使用路由标头测试反向路由(仅适用于 IPv6)。</span><br><span class="line">                   根据 RFC 5095，已弃用此路由标头。</span><br><span class="line">                   如果使用此标头，某些系统可能丢弃</span><br><span class="line">                   回显请求。</span><br><span class="line">    -S srcaddr     要使用的源地址。</span><br><span class="line">    -c compartment 路由隔离舱标识符。</span><br><span class="line">    -p             Ping Hyper-V 网络虚拟化提供程序地址。</span><br><span class="line">    -4             强制使用 IPv4。</span><br><span class="line">    -6             强制使用 IPv6。</span><br></pre></td></tr></table></figure>
<h3><span id="进程部分">进程部分</span></h3><h4><span id="tasklist-命令">tasklist 命令</span></h4><p><code>tasklist</code>命令用来显示在本地或远程机器上当前运行的进程列表。</p>
<p><em>linux下查看进程列表命令有<code>top</code>和<code>ps</code></em></p>
<p>例如: </p>
<ul>
<li>显示pid为16812的进程信息<br><code>tasklist /v | findstr &quot;16812&quot;</code></li>
<li>显示notepad++的进程信息<br><code>tasklist /v | findstr &quot;notepad++&quot;</code></li>
</ul>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TASKLIST [/S system [/U username [/P [password]]]]</span><br><span class="line">         [/M [module] | /SVC | /V] [/FI filter] [/FO format] [/NH]</span><br><span class="line"></span><br><span class="line">描述:</span><br><span class="line">    该工具显示在本地或远程机器上当前运行的进程列表。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">参数列表:</span><br><span class="line">   /S     system           指定连接到的远程系统。</span><br><span class="line"></span><br><span class="line">   /U     [domain\]user    指定应该在哪个用户上下文执行这个命令。</span><br><span class="line"></span><br><span class="line">   /P     [password]       为提供的用户上下文指定密码。如果省略，则</span><br><span class="line">                           提示输入。</span><br><span class="line"></span><br><span class="line">   /M     [module]         列出当前使用所给 exe/dll 名称的所有任务。</span><br><span class="line">                           如果没有指定模块名称，显示所有加载的模块。</span><br><span class="line"></span><br><span class="line">   /SVC                    显示每个进程中主持的服务。</span><br><span class="line"></span><br><span class="line">   /APPS 显示应用商店应用及其关联的进程。</span><br><span class="line"></span><br><span class="line">   /V                      显示详细任务信息。</span><br><span class="line"></span><br><span class="line">   /FI    filter           显示一系列符合筛选器</span><br><span class="line">                           指定条件的任务。</span><br><span class="line"></span><br><span class="line">   /FO    format           指定输出格式。</span><br><span class="line">                           有效值: <span class="string">"TABLE"</span>、<span class="string">"LIST"</span>、<span class="string">"CSV"</span>。</span><br><span class="line"></span><br><span class="line">   /NH                     指定列标题不应该</span><br><span class="line">                           在输出中显示。</span><br><span class="line">                           只对 <span class="string">"TABLE"</span> 和 <span class="string">"CSV"</span> 格式有效。</span><br><span class="line"></span><br><span class="line">   /?                      显示此帮助消息。</span><br><span class="line"></span><br><span class="line">筛选器:</span><br><span class="line">    筛选器名称     有效运算符           有效值</span><br><span class="line">    -----------     ---------------           --------------------------</span><br><span class="line">    STATUS          eq, ne                    RUNNING | SUSPENDED</span><br><span class="line">                                              NOT RESPONDING | UNKNOWN</span><br><span class="line">    IMAGENAME       eq, ne                    映像名称</span><br><span class="line">    PID             eq, ne, gt, lt, ge, le    PID 值</span><br><span class="line">    SESSION         eq, ne, gt, lt, ge, le    会话编号</span><br><span class="line">    SESSIONNAME     eq, ne                    会话名称</span><br><span class="line">    CPUTIME         eq, ne, gt, lt, ge, le    CPU 时间，格式为</span><br><span class="line">                                              hh:mm:ss。</span><br><span class="line">                                              hh - 小时，</span><br><span class="line">                                              mm - 分钟，ss - 秒</span><br><span class="line">    MEMUSAGE        eq, ne, gt, lt, ge, le    内存使用(以 KB 为单位)</span><br><span class="line">    USERNAME        eq, ne                    用户名，格式为</span><br><span class="line">                                              [域\]用户</span><br><span class="line">    SERVICES        eq, ne                    服务名称</span><br><span class="line">    WINDOWTITLE     eq, ne                    窗口标题</span><br><span class="line">    模块         eq, ne                    DLL 名称</span><br><span class="line"></span><br><span class="line">注意: 当查询远程计算机时，不支持 <span class="string">"WINDOWTITLE"</span> 和 <span class="string">"STATUS"</span></span><br><span class="line">      筛选器。</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">    TASKLIST</span><br><span class="line">    TASKLIST /M</span><br><span class="line">    TASKLIST /V /FO CSV</span><br><span class="line">    TASKLIST /SVC /FO LIST</span><br><span class="line">    TASKLIST /APPS /FI <span class="string">"STATUS eq RUNNING"</span></span><br><span class="line">    TASKLIST /M wbem*</span><br><span class="line">    TASKLIST /S system /FO LIST</span><br><span class="line">    TASKLIST /S system /U 域\用户名 /FO CSV /NH</span><br><span class="line">    TASKLIST /S system /U username /P password /FO TABLE /NH</span><br><span class="line">    TASKLIST /FI <span class="string">"USERNAME ne NT AUTHORITY\SYSTEM"</span> /FI <span class="string">"STATUS eq running"</span></span><br></pre></td></tr></table></figure>
<h4><span id="taskkill-命令">taskkill 命令</span></h4><p><code>taskkill</code>命令用来终止任务(根据进程id或映像名称)。</p>
<p><em>linux下终止进程命令有<code>kill</code>、<code>pkill</code>、<code>xkill</code>和<code>killall</code></em></p>
<p>例如:</p>
<ul>
<li>kill掉notepad++的进程<br><code>taskkill /im notepad++.exe</code><br><em>映像名称支持通配符*</em></li>
<li>强制kill掉pid为16812的进程<br><code>taskkill /pid /f 16812</code></li>
</ul>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TASKKILL [/S system [/U username [/P [password]]]]</span><br><span class="line">         &#123; [/FI filter] [/PID processid | /IM imagename] &#125; [/T] [/F]</span><br><span class="line"></span><br><span class="line">描述:</span><br><span class="line">    使用该工具按照进程 ID (PID) 或映像名称终止任务。</span><br><span class="line"></span><br><span class="line">参数列表:</span><br><span class="line">    /S    system           指定要连接的远程系统。</span><br><span class="line"></span><br><span class="line">    /U    [domain\]user    指定应该在哪个用户上下文执行这个命令。</span><br><span class="line"></span><br><span class="line">    /P    [password]       为提供的用户上下文指定密码。如果忽略，提示</span><br><span class="line">                           输入。</span><br><span class="line"></span><br><span class="line">    /FI   filter           应用筛选器以选择一组任务。</span><br><span class="line">                           允许使用 <span class="string">"*"</span>。例如，映像名称 eq acme*</span><br><span class="line"></span><br><span class="line">    /PID  processid        指定要终止的进程的 PID。</span><br><span class="line">                           使用 TaskList 取得 PID。</span><br><span class="line"></span><br><span class="line">    /IM   imagename        指定要终止的进程的映像名称。通配符 <span class="string">'*'</span>可用来</span><br><span class="line">                           指定所有任务或映像名称。</span><br><span class="line"></span><br><span class="line">    /T                     终止指定的进程和由它启用的子进程。</span><br><span class="line"></span><br><span class="line">    /F                     指定强制终止进程。</span><br><span class="line"></span><br><span class="line">    /?                     显示帮助消息。</span><br><span class="line"></span><br><span class="line">筛选器:</span><br><span class="line">    筛选器名      有效运算符                有效值</span><br><span class="line">    -----------   ---------------           -------------------------</span><br><span class="line">    STATUS        eq, ne                    RUNNING |</span><br><span class="line">                                            NOT RESPONDING | UNKNOWN</span><br><span class="line">    IMAGENAME     eq, ne                    映像名称</span><br><span class="line">    PID           eq, ne, gt, lt, ge, le    PID 值</span><br><span class="line">    SESSION       eq, ne, gt, lt, ge, le    会话编号。</span><br><span class="line">    CPUTIME       eq, ne, gt, lt, ge, le    CPU 时间，格式为</span><br><span class="line">                                            hh:mm:ss。</span><br><span class="line">                                            hh - 时，</span><br><span class="line">                                            mm - 分，ss - 秒</span><br><span class="line">    MEMUSAGE      eq, ne, gt, lt, ge, le    内存使用量，单位为 KB</span><br><span class="line">    USERNAME      eq, ne                    用户名，格式为 [domain\]user</span><br><span class="line">    MODULES       eq, ne                    DLL 名称</span><br><span class="line">    SERVICES      eq, ne                    服务名称</span><br><span class="line">    WINDOWTITLE   eq, ne                    窗口标题</span><br><span class="line"></span><br><span class="line">    说明</span><br><span class="line">    ----</span><br><span class="line">    1) 只有在应用筛选器的情况下，/IM 切换才能使用通配符 <span class="string">'*'</span>。</span><br><span class="line">    2) 远程进程总是要强行 (/F) 终止。</span><br><span class="line">    3) 当指定远程机器时，不支持 <span class="string">"WINDOWTITLE"</span> 和 <span class="string">"STATUS"</span> 筛选器。</span><br><span class="line"></span><br><span class="line">例如:</span><br><span class="line">    TASKKILL /IM notepad.exe</span><br><span class="line">    TASKKILL /PID 1230 /PID 1241 /PID 1253 /T</span><br><span class="line">    TASKKILL /F /IM cmd.exe /T</span><br><span class="line">    TASKKILL /F /FI <span class="string">"PID ge 1000"</span> /FI <span class="string">"WINDOWTITLE ne untitle*"</span></span><br><span class="line">    TASKKILL /F /FI <span class="string">"USERNAME eq NT AUTHORITY\SYSTEM"</span> /IM notepad.exe</span><br><span class="line">    TASKKILL /S system /U 域\用户名 /FI <span class="string">"用户名 ne NT*"</span> /IM *</span><br><span class="line">    TASKKILL /S system /U username /P password /FI <span class="string">"IMAGENAME eq note*"</span></span><br></pre></td></tr></table></figure>
<h3><span id="时间部分">时间部分</span></h3><h4><span id="date-命令">date 命令</span></h4><p><code>date</code>命令用来显示或设置日期。</p>
<p><em>linux下日期时间设置查看都是<code>date</code></em></p>
<p>例如:</p>
<ul>
<li>查看系统日期 <code>date /t</code></li>
<li>设置系统日期<code>date</code></li>
</ul>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DATE [/T | date]</span><br><span class="line"></span><br><span class="line">显示当前日期设置和输入新日期的提示，请键入</span><br><span class="line">不带参数的 DATE。要保留现有日期，请按 Enter。</span><br><span class="line"></span><br><span class="line">如果命令扩展被启用，DATE 命令会支持 /T 开关；</span><br><span class="line">该开关指示命令只输出当前日期，但不提示输入新日期。</span><br></pre></td></tr></table></figure>
<h4><span id="time-命令">time 命令</span></h4><p><code>time</code>命令用来显示或设置系统时间。</p>
<p><em>linux下日期时间设置查看都是<code>date</code></em></p>
<p>例如:</p>
<ul>
<li>查看系统时间 <code>time /t</code></li>
<li>设置系统时间<code>time</code></li>
</ul>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TIME [/T | time]</span><br><span class="line"></span><br><span class="line">显示当前时间设置和输入新时间的提示，请键入</span><br><span class="line">不带参数的 TIME。要保留现有时间，请按 Enter。</span><br><span class="line"></span><br><span class="line">如果命令扩展被启用，TIME 命令会支持 /T 命令行开关；该命令行开关告诉</span><br><span class="line">命令只输出当前时间，但不提示输入新时间。</span><br></pre></td></tr></table></figure>
<h3><span id="其他">其他</span></h3><h4><span id="for-命令">for 命令</span></h4><p><code>for</code>命令用来对一组文件中的每一个文件执行某个特定命令。</p>
<p>例如:</p>
<ul>
<li><p>输出1,3,5,7,9</p>
<p><code>for /l %n in (1,2,10) do echo %n</code></p>
</li>
<li><p>列出指定目录所有py文件</p>
<p><code>for /f %i in (&#39;dir /b /o-n input\*.py&#39;) do echo %i</code></p>
</li>
</ul>
<p>详细用法如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FOR %variable IN (<span class="built_in">set</span>) DO <span class="built_in">command</span> [<span class="built_in">command</span>-parameters]</span><br><span class="line"></span><br><span class="line">  %variable  指定一个单一字母可替换的参数。</span><br><span class="line">  (<span class="built_in">set</span>)      指定一个或一组文件。可以使用通配符。</span><br><span class="line">  <span class="built_in">command</span>    指定对每个文件执行的命令。</span><br><span class="line">  <span class="built_in">command</span>-parameters</span><br><span class="line">             为特定命令指定参数或命令行开关。</span><br><span class="line"></span><br><span class="line">在批处理程序中使用 FOR 命令时，指定变量请使用 %%variable</span><br><span class="line">而不要用 %variable。变量名称是区分大小写的，所以 %i 不同于 %I.</span><br><span class="line"></span><br><span class="line">如果启用命令扩展，则会支持下列 FOR 命令的其他格式:</span><br><span class="line"></span><br><span class="line">FOR /D %variable IN (<span class="built_in">set</span>) DO <span class="built_in">command</span> [<span class="built_in">command</span>-parameters]</span><br><span class="line"></span><br><span class="line">    如果集中包含通配符，则指定与目录名匹配，而不与文件名匹配。</span><br><span class="line"></span><br><span class="line">FOR /R [[drive:]path] %variable IN (<span class="built_in">set</span>) DO <span class="built_in">command</span> [<span class="built_in">command</span>-parameters]</span><br><span class="line"></span><br><span class="line">    检查以 [drive:]path 为根的目录树，指向每个目录中的 FOR 语句。</span><br><span class="line">    如果在 /R 后没有指定目录规范，则使用当前目录。如果集仅为一个单点(.)字符，</span><br><span class="line">    则枚举该目录树。</span><br><span class="line"></span><br><span class="line">FOR /L %variable IN (start,step,end) DO <span class="built_in">command</span> [<span class="built_in">command</span>-parameters]</span><br><span class="line"></span><br><span class="line">    该集表示以增量形式从开始到结束的一个数字序列。因此，(1,1,5)将产生序列</span><br><span class="line">    1 2 3 4 5，(5,-1,1)将产生序列(5 4 3 2 1)</span><br><span class="line"></span><br><span class="line">FOR /F [<span class="string">"options"</span>] %variable IN (file-set) DO <span class="built_in">command</span> [<span class="built_in">command</span>-parameters]</span><br><span class="line">FOR /F [<span class="string">"options"</span>] %variable IN (<span class="string">"string"</span>) DO <span class="built_in">command</span> [<span class="built_in">command</span>-parameters]</span><br><span class="line">FOR /F [<span class="string">"options"</span>] %variable IN (<span class="string">'command'</span>) DO <span class="built_in">command</span> [<span class="built_in">command</span>-parameters]</span><br><span class="line"></span><br><span class="line">    或者，如果有 usebackq 选项:</span><br><span class="line"></span><br><span class="line">FOR /F [<span class="string">"options"</span>] %variable IN (file-set) DO <span class="built_in">command</span> [<span class="built_in">command</span>-parameters]</span><br><span class="line">FOR /F [<span class="string">"options"</span>] %variable IN (<span class="string">"string"</span>) DO <span class="built_in">command</span> [<span class="built_in">command</span>-parameters]</span><br><span class="line">FOR /F [<span class="string">"options"</span>] %variable IN (<span class="string">'command'</span>) DO <span class="built_in">command</span> [<span class="built_in">command</span>-parameters]</span><br><span class="line"></span><br><span class="line">    fileset 为一个或多个文件名。继续到 fileset 中的下一个文件之前，</span><br><span class="line">    每份文件都被打开、读取并经过处理。处理包括读取文件，将其分成一行行的文字，</span><br><span class="line">    然后将每行解析成零或更多的符号。然后用已找到的符号字符串变量值调用 For 循环。</span><br><span class="line">    以默认方式，/F 通过每个文件的每一行中分开的第一个空白符号。跳过空白行。</span><br><span class="line">    你可通过指定可选 <span class="string">"options"</span> 参数替代默认解析操作。这个带引号的字符串包括一个</span><br><span class="line">    或多个指定不同解析选项的关键字。这些关键字为:</span><br><span class="line"></span><br><span class="line">        eol=c           - 指一个行注释字符的结尾(就一个)</span><br><span class="line">        skip=n          - 指在文件开始时忽略的行数。</span><br><span class="line">        delims=xxx      - 指分隔符集。这个替换了空格和制表符的</span><br><span class="line">                          默认分隔符集。</span><br><span class="line">        tokens=x,y,m-n  - 指每行的哪一个符号被传递到每个迭代</span><br><span class="line">                          的 <span class="keyword">for</span> 本身。这会导致额外变量名称的分配。m-n</span><br><span class="line">                          格式为一个范围。通过 nth 符号指定 mth。如果</span><br><span class="line">                          符号字符串中的最后一个字符星号，</span><br><span class="line">                          那么额外的变量将在最后一个符号解析之后</span><br><span class="line">                          分配并接受行的保留文本。</span><br><span class="line">        usebackq        - 指定新语法已在下类情况中使用:</span><br><span class="line">                          在作为命令执行一个后引号的字符串并且一个单</span><br><span class="line">                          引号字符为文字字符串命令并允许在 file-set</span><br><span class="line">                          中使用双引号扩起文件名称。</span><br><span class="line"></span><br><span class="line">    某些范例可能有助:</span><br><span class="line"></span><br><span class="line">FOR /F <span class="string">"eol=; tokens=2,3* delims=, "</span> %i <span class="keyword">in</span> (myfile.txt) <span class="keyword">do</span> @<span class="built_in">echo</span> %i %j %k</span><br><span class="line"></span><br><span class="line">    会分析 myfile.txt 中的每一行，忽略以分号打头的那些行，将</span><br><span class="line">    每行中的第二个和第三个符号传递给 <span class="keyword">for</span> 函数体，用逗号和/或</span><br><span class="line">    空格分隔符号。请注意，此 <span class="keyword">for</span> 函数体的语句引用 %i 来</span><br><span class="line">    获得第二个符号，引用 %j 来获得第三个符号，引用 %k</span><br><span class="line">    来获得第三个符号后的所有剩余符号。对于带有空格的文件</span><br><span class="line">    名，你需要用双引号将文件名括起来。为了用这种方式来使</span><br><span class="line">    用双引号，还需要使用 usebackq 选项，否则，双引号会</span><br><span class="line">    被理解成是用作定义某个要分析的字符串的。</span><br><span class="line"></span><br><span class="line">    %i 在 <span class="keyword">for</span> 语句中显式声明，%j 和 %k 是通过</span><br><span class="line">    tokens= 选项隐式声明的。可以通过 tokens= 一行</span><br><span class="line">    指定最多 26 个符号，只要不试图声明一个高于字母 <span class="string">"z"</span> 或</span><br><span class="line">    <span class="string">"Z"</span> 的变量。请记住，FOR 变量是单一字母、分大小写和全局的变量；</span><br><span class="line">    而且，不能同时使用超过 52 个。</span><br><span class="line"></span><br><span class="line">    还可以在相邻字符串上使用 FOR /F 分析逻辑，方法是，</span><br><span class="line">    用单引号将括号之间的 file-set 括起来。这样，该字符</span><br><span class="line">    串会被当作一个文件中的一个单一输入行进行解析。</span><br><span class="line"></span><br><span class="line">    最后，可以用 FOR /F 命令来分析命令的输出。方法是，将</span><br><span class="line">    括号之间的 file-set 变成一个反括字符串。该字符串会</span><br><span class="line">    被当作命令行，传递到一个子 CMD.EXE，其输出会被捕获到</span><br><span class="line">    内存中，并被当作文件分析。如以下例子所示:</span><br><span class="line"></span><br><span class="line">      FOR /F <span class="string">"usebackq delims=="</span> %i IN (`<span class="built_in">set</span>`) DO @<span class="built_in">echo</span> %i</span><br><span class="line"></span><br><span class="line">    会枚举当前环境中的环境变量名称。</span><br><span class="line"></span><br><span class="line">另外，FOR 变量参照的替换已被增强。你现在可以使用下列</span><br><span class="line">选项语法:</span><br><span class="line"></span><br><span class="line">     %~I          - 删除任何引号(<span class="string">")，扩展 %I</span></span><br><span class="line"><span class="string">     %~fI        - 将 %I 扩展到一个完全合格的路径名</span></span><br><span class="line"><span class="string">     %~dI        - 仅将 %I 扩展到一个驱动器号</span></span><br><span class="line"><span class="string">     %~pI        - 仅将 %I 扩展到一个路径</span></span><br><span class="line"><span class="string">     %~nI        - 仅将 %I 扩展到一个文件名</span></span><br><span class="line"><span class="string">     %~xI        - 仅将 %I 扩展到一个文件扩展名</span></span><br><span class="line"><span class="string">     %~sI        - 扩展的路径只含有短名</span></span><br><span class="line"><span class="string">     %~aI        - 将 %I 扩展到文件的文件属性</span></span><br><span class="line"><span class="string">     %~tI        - 将 %I 扩展到文件的日期/时间</span></span><br><span class="line"><span class="string">     %~zI        - 将 %I 扩展到文件的大小</span></span><br><span class="line"><span class="string">     %~<span class="variable">$PATH</span>:I   - 查找列在路径环境变量的目录，并将 %I 扩展</span></span><br><span class="line"><span class="string">                   到找到的第一个完全合格的名称。如果环境变量名</span></span><br><span class="line"><span class="string">                   未被定义，或者没有找到文件，此组合键会扩展到</span></span><br><span class="line"><span class="string">                   空字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可以组合修饰符来得到多重结果:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     %~dpI       - 仅将 %I 扩展到一个驱动器号和路径</span></span><br><span class="line"><span class="string">     %~nxI       - 仅将 %I 扩展到一个文件名和扩展名</span></span><br><span class="line"><span class="string">     %~fsI       - 仅将 %I 扩展到一个带有短名的完整路径名</span></span><br><span class="line"><span class="string">     %~dp<span class="variable">$PATH</span>:I - 搜索列在路径环境变量的目录，并将 %I 扩展</span></span><br><span class="line"><span class="string">                   到找到的第一个驱动器号和路径。</span></span><br><span class="line"><span class="string">     %~ftzaI     - 将 %I 扩展到类似输出线路的 DIR</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在以上例子中，%I 和 PATH 可用其他有效数值代替。%~ 语法</span></span><br><span class="line"><span class="string">用一个有效的 FOR 变量名终止。选取类似 %I 的大写变量名</span></span><br><span class="line"><span class="string">比较易读，而且避免与不分大小写的组合键混淆。</span></span><br></pre></td></tr></table></figure>
<h4><span id="查看显卡信息">查看显卡信息</span></h4><p>命令行输入<code>dxdiag</code>，弹出”DirectX诊断工具”，切换到”显示”标签，即可查看显卡信息。</p>
<p>参考资料:<br><a href="http://www.jb51.net/help/cmd.htm" target="_blank" rel="noopener">CMD 命令速查手册</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
</search>
